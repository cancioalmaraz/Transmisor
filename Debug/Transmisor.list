
Transmisor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e114  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800e318  0800e318  0001e318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e880  0800e880  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e880  0800e880  0001e880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e888  0800e888  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e888  0800e888  0001e888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e88c  0800e88c  0001e88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e890  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  200001e8  0800ea78  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  0800ea78  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b269  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000347e  00000000  00000000  0003b47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  0003e900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001568  00000000  00000000  00040000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a490  00000000  00000000  00041568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012ac5  00000000  00000000  0006b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100840  00000000  00000000  0007e4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017ecfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007374  00000000  00000000  0017ed78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e2fc 	.word	0x0800e2fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800e2fc 	.word	0x0800e2fc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800030e:	f000 b9bd 	b.w	800068c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <NRF24_DelayMicroSeconds+0x38>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <NRF24_DelayMicroSeconds+0x3c>)
 80006a2:	fba2 2303 	umull	r2, r3, r2, r3
 80006a6:	0c9a      	lsrs	r2, r3, #18
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80006b0:	bf00      	nop
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	60fa      	str	r2, [r7, #12]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1fa      	bne.n	80006b2 <NRF24_DelayMicroSeconds+0x22>
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20000008 	.word	0x20000008
 80006cc:	165e9f81 	.word	0x165e9f81

080006d0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <NRF24_csn+0x20>
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <NRF24_csn+0x38>)
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <NRF24_csn+0x3c>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f004 f9eb 	bl	8004ac4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80006ee:	e007      	b.n	8000700 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <NRF24_csn+0x38>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <NRF24_csn+0x3c>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	4619      	mov	r1, r3
 80006fc:	f004 f9e2 	bl	8004ac4 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000020c 	.word	0x2000020c
 800070c:	20000210 	.word	0x20000210

08000710 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <NRF24_ce+0x20>
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <NRF24_ce+0x38>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <NRF24_ce+0x3c>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	2201      	movs	r2, #1
 8000728:	4619      	mov	r1, r3
 800072a:	f004 f9cb 	bl	8004ac4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800072e:	e007      	b.n	8000740 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <NRF24_ce+0x38>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <NRF24_ce+0x3c>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	f004 f9c2 	bl	8004ac4 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000020c 	.word	0x2000020c
 800074c:	20000212 	.word	0x20000212

08000750 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffb8 	bl	80006d0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 031f 	and.w	r3, r3, #31
 8000766:	b2db      	uxtb	r3, r3
 8000768:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800076a:	f107 010c 	add.w	r1, r7, #12
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	2201      	movs	r2, #1
 8000772:	480a      	ldr	r0, [pc, #40]	; (800079c <NRF24_read_register+0x4c>)
 8000774:	f006 fc0e 	bl	8006f94 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	1c59      	adds	r1, r3, #1
 800077e:	2364      	movs	r3, #100	; 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <NRF24_read_register+0x4c>)
 8000784:	f006 fd6c 	bl	8007260 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff9f 	bl	80006d0 <NRF24_csn>
	return retData;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000214 	.word	0x20000214

080007a0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff8d 	bl	80006d0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 031f 	and.w	r3, r3, #31
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2201      	movs	r2, #1
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <NRF24_read_registerN+0x4c>)
 80007ca:	f006 fbe3 	bl	8006f94 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	6839      	ldr	r1, [r7, #0]
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <NRF24_read_registerN+0x4c>)
 80007d8:	f006 fd42 	bl	8007260 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff77 	bl	80006d0 <NRF24_csn>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000214 	.word	0x20000214

080007f0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff65 	bl	80006d0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	b2db      	uxtb	r3, r3
 800080e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000814:	f107 010c 	add.w	r1, r7, #12
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2202      	movs	r2, #2
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <NRF24_write_register+0x40>)
 800081e:	f006 fbb9 	bl	8006f94 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff54 	bl	80006d0 <NRF24_csn>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000214 	.word	0x20000214

08000834 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	4613      	mov	r3, r2
 8000842:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ff43 	bl	80006d0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	b2db      	uxtb	r3, r3
 8000852:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000854:	f107 010c 	add.w	r1, r7, #12
 8000858:	2364      	movs	r3, #100	; 0x64
 800085a:	2201      	movs	r2, #1
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <NRF24_write_registerN+0x4c>)
 800085e:	f006 fb99 	bl	8006f94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000862:	79bb      	ldrb	r3, [r7, #6]
 8000864:	b29a      	uxth	r2, r3
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	6839      	ldr	r1, [r7, #0]
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <NRF24_write_registerN+0x4c>)
 800086c:	f006 fb92 	bl	8006f94 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff ff2d 	bl	80006d0 <NRF24_csn>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000214 	.word	0x20000214

08000884 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff ff1d 	bl	80006d0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800089a:	f107 010f 	add.w	r1, r7, #15
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	2201      	movs	r2, #1
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <NRF24_write_payload+0x40>)
 80008a4:	f006 fb76 	bl	8006f94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <NRF24_write_payload+0x40>)
 80008b2:	f006 fb6f 	bl	8006f94 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff ff0a 	bl	80006d0 <NRF24_csn>
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000214 	.word	0x20000214

080008c8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80008cc:	21ff      	movs	r1, #255	; 0xff
 80008ce:	20e1      	movs	r0, #225	; 0xe1
 80008d0:	f7ff ff8e 	bl	80007f0 <NRF24_write_register>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80008dc:	21ff      	movs	r1, #255	; 0xff
 80008de:	20e2      	movs	r0, #226	; 0xe2
 80008e0:	f7ff ff86 	bl	80007f0 <NRF24_write_register>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff ff2e 	bl	8000750 <NRF24_read_register>
 80008f4:	4603      	mov	r3, r0
 80008f6:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80008f8:	79fb      	ldrb	r3, [r7, #7]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000904:	b082      	sub	sp, #8
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	460b      	mov	r3, r1
 8000912:	807b      	strh	r3, [r7, #2]
 8000914:	4613      	mov	r3, r2
 8000916:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000918:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <NRF24_begin+0x1ac>)
 800091a:	4618      	mov	r0, r3
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	2264      	movs	r2, #100	; 0x64
 8000922:	4619      	mov	r1, r3
 8000924:	f008 fb80 	bl	8009028 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000928:	4a62      	ldr	r2, [pc, #392]	; (8000ab4 <NRF24_begin+0x1b0>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800092e:	4a62      	ldr	r2, [pc, #392]	; (8000ab8 <NRF24_begin+0x1b4>)
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000934:	4a61      	ldr	r2, [pc, #388]	; (8000abc <NRF24_begin+0x1b8>)
 8000936:	883b      	ldrh	r3, [r7, #0]
 8000938:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff fec8 	bl	80006d0 <NRF24_csn>
	NRF24_ce(0);
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fee5 	bl	8000710 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000946:	2005      	movs	r0, #5
 8000948:	f003 f9e0 	bl	8003d0c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800094c:	2108      	movs	r1, #8
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff ff4e 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000954:	213f      	movs	r1, #63	; 0x3f
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff4a 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800095c:	2103      	movs	r1, #3
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff ff46 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000964:	2103      	movs	r1, #3
 8000966:	2003      	movs	r0, #3
 8000968:	f7ff ff42 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800096c:	2103      	movs	r1, #3
 800096e:	2004      	movs	r0, #4
 8000970:	f7ff ff3e 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000974:	2102      	movs	r1, #2
 8000976:	2005      	movs	r0, #5
 8000978:	f7ff ff3a 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800097c:	210f      	movs	r1, #15
 800097e:	2006      	movs	r0, #6
 8000980:	f7ff ff36 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000984:	210e      	movs	r1, #14
 8000986:	2007      	movs	r0, #7
 8000988:	f7ff ff32 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800098c:	2100      	movs	r1, #0
 800098e:	2008      	movs	r0, #8
 8000990:	f7ff ff2e 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000994:	2100      	movs	r1, #0
 8000996:	2009      	movs	r0, #9
 8000998:	f7ff ff2a 	bl	80007f0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800099c:	23e7      	movs	r3, #231	; 0xe7
 800099e:	733b      	strb	r3, [r7, #12]
 80009a0:	23e7      	movs	r3, #231	; 0xe7
 80009a2:	72fb      	strb	r3, [r7, #11]
 80009a4:	23e7      	movs	r3, #231	; 0xe7
 80009a6:	72bb      	strb	r3, [r7, #10]
 80009a8:	23e7      	movs	r3, #231	; 0xe7
 80009aa:	727b      	strb	r3, [r7, #9]
 80009ac:	23e7      	movs	r3, #231	; 0xe7
 80009ae:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2205      	movs	r2, #5
 80009b6:	4619      	mov	r1, r3
 80009b8:	200a      	movs	r0, #10
 80009ba:	f7ff ff3b 	bl	8000834 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80009be:	23c2      	movs	r3, #194	; 0xc2
 80009c0:	733b      	strb	r3, [r7, #12]
 80009c2:	23c2      	movs	r3, #194	; 0xc2
 80009c4:	72fb      	strb	r3, [r7, #11]
 80009c6:	23c2      	movs	r3, #194	; 0xc2
 80009c8:	72bb      	strb	r3, [r7, #10]
 80009ca:	23c2      	movs	r3, #194	; 0xc2
 80009cc:	727b      	strb	r3, [r7, #9]
 80009ce:	23c2      	movs	r3, #194	; 0xc2
 80009d0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2205      	movs	r2, #5
 80009d8:	4619      	mov	r1, r3
 80009da:	200b      	movs	r0, #11
 80009dc:	f7ff ff2a 	bl	8000834 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80009e0:	21c3      	movs	r1, #195	; 0xc3
 80009e2:	200c      	movs	r0, #12
 80009e4:	f7ff ff04 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80009e8:	21c4      	movs	r1, #196	; 0xc4
 80009ea:	200d      	movs	r0, #13
 80009ec:	f7ff ff00 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80009f0:	21c5      	movs	r1, #197	; 0xc5
 80009f2:	200e      	movs	r0, #14
 80009f4:	f7ff fefc 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80009f8:	21c6      	movs	r1, #198	; 0xc6
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff fef8 	bl	80007f0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000a00:	23e7      	movs	r3, #231	; 0xe7
 8000a02:	733b      	strb	r3, [r7, #12]
 8000a04:	23e7      	movs	r3, #231	; 0xe7
 8000a06:	72fb      	strb	r3, [r7, #11]
 8000a08:	23e7      	movs	r3, #231	; 0xe7
 8000a0a:	72bb      	strb	r3, [r7, #10]
 8000a0c:	23e7      	movs	r3, #231	; 0xe7
 8000a0e:	727b      	strb	r3, [r7, #9]
 8000a10:	23e7      	movs	r3, #231	; 0xe7
 8000a12:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2205      	movs	r2, #5
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2010      	movs	r0, #16
 8000a1e:	f7ff ff09 	bl	8000834 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2011      	movs	r0, #17
 8000a26:	f7ff fee3 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f7ff fedf 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2013      	movs	r0, #19
 8000a36:	f7ff fedb 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2014      	movs	r0, #20
 8000a3e:	f7ff fed7 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2015      	movs	r0, #21
 8000a46:	f7ff fed3 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2016      	movs	r0, #22
 8000a4e:	f7ff fecf 	bl	80007f0 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000a52:	f000 fae1 	bl	8001018 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000a56:	2100      	movs	r1, #0
 8000a58:	201c      	movs	r0, #28
 8000a5a:	f7ff fec9 	bl	80007f0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	201d      	movs	r0, #29
 8000a62:	f7ff fec5 	bl	80007f0 <NRF24_write_register>
	//printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000a66:	210f      	movs	r1, #15
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f000 f8ad 	bl	8000bc8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 f987 	bl	8000d82 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f000 f9bd 	bl	8000df4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f000 fa00 	bl	8000e80 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000a80:	f000 f952 	bl	8000d28 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000a84:	2020      	movs	r0, #32
 8000a86:	f000 f8cf 	bl	8000c28 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000a8a:	f000 fabc 	bl	8001006 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000a8e:	204c      	movs	r0, #76	; 0x4c
 8000a90:	f000 f8b5 	bl	8000bfe <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000a94:	f7ff ff18 	bl	80008c8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a98:	f7ff ff1e 	bl	80008d8 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000a9c:	f000 fa18 	bl	8000ed0 <NRF24_powerDown>
	
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aaa:	b002      	add	sp, #8
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000214 	.word	0x20000214
 8000ab4:	2000020c 	.word	0x2000020c
 8000ab8:	20000210 	.word	0x20000210
 8000abc:	20000212 	.word	0x20000212

08000ac0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fe23 	bl	8000710 <NRF24_ce>
	NRF24_flush_tx();
 8000aca:	f7ff fefd 	bl	80008c8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000ace:	f7ff ff03 	bl	80008d8 <NRF24_flush_rx>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000ae4:	f000 fa8f 	bl	8001006 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	4619      	mov	r1, r3
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 fa2e 	bl	8000f4e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000af2:	f003 f8ff 	bl	8003cf4 <HAL_GetTick>
 8000af6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000af8:	230a      	movs	r3, #10
 8000afa:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000afc:	f107 030d 	add.w	r3, r7, #13
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	2008      	movs	r0, #8
 8000b06:	f7ff fe4b 	bl	80007a0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000b0a:	f7ff feed 	bl	80008e8 <NRF24_get_status>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d107      	bne.n	8000b2c <NRF24_write+0x54>
 8000b1c:	f003 f8ea 	bl	8003cf4 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8e7      	bhi.n	8000afc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000b2c:	f107 010b 	add.w	r1, r7, #11
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <NRF24_write+0x90>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fa32 	bl	8000fa0 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000b3c:	7b3b      	ldrb	r3, [r7, #12]
 8000b3e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <NRF24_write+0x90>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d005      	beq.n	8000b54 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000b48:	f000 f886 	bl	8000c58 <NRF24_getDynamicPayloadSize>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <NRF24_write+0x94>)
 8000b52:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000b54:	f000 f80c 	bl	8000b70 <NRF24_available>
	NRF24_flush_tx();
 8000b58:	f7ff feb6 	bl	80008c8 <NRF24_flush_tx>
	return retStatus;
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000204 	.word	0x20000204
 8000b6c:	20000205 	.word	0x20000205

08000b70 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f9ba 	bl	8000eee <NRF24_availablePipe>
 8000b7a:	4603      	mov	r3, r0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	4619      	mov	r1, r3
 8000b90:	200a      	movs	r0, #10
 8000b92:	f7ff fe4f 	bl	8000834 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000b96:	463b      	mov	r3, r7
 8000b98:	2205      	movs	r2, #5
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2010      	movs	r0, #16
 8000b9e:	f7ff fe49 	bl	8000834 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <NRF24_openWritingPipe+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	4293      	cmp	r3, r2
 8000bae:	bf28      	it	cs
 8000bb0:	4613      	movcs	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2011      	movs	r0, #17
 8000bb8:	f7ff fe1a 	bl	80007f0 <NRF24_write_register>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000206 	.word	0x20000206

08000bc8 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	b25a      	sxtb	r2, r3
 8000bde:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f7ff fdfd 	bl	80007f0 <NRF24_write_register>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000c08:	237f      	movs	r3, #127	; 0x7f
 8000c0a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4293      	cmp	r3, r2
 8000c12:	bf28      	it	cs
 8000c14:	4613      	movcs	r3, r2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f7ff fde8 	bl	80007f0 <NRF24_write_register>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000c32:	2320      	movs	r3, #32
 8000c34:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	bf28      	it	cs
 8000c3e:	4613      	movcs	r3, r2
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <NRF24_setPayloadSize+0x2c>)
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000206 	.word	0x20000206

08000c58 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000c5c:	2060      	movs	r0, #96	; 0x60
 8000c5e:	f7ff fd77 	bl	8000750 <NRF24_read_register>
 8000c62:	4603      	mov	r3, r0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000c6c:	201d      	movs	r0, #29
 8000c6e:	f7ff fd6f 	bl	8000750 <NRF24_read_register>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f043 0306 	orr.w	r3, r3, #6
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	201d      	movs	r0, #29
 8000c7e:	f7ff fdb7 	bl	80007f0 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000c82:	201d      	movs	r0, #29
 8000c84:	f7ff fd64 	bl	8000750 <NRF24_read_register>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10c      	bne.n	8000ca8 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000c8e:	f000 f9c3 	bl	8001018 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000c92:	201d      	movs	r0, #29
 8000c94:	f7ff fd5c 	bl	8000750 <NRF24_read_register>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f043 0306 	orr.w	r3, r3, #6
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	201d      	movs	r0, #29
 8000ca4:	f7ff fda4 	bl	80007f0 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000ca8:	201c      	movs	r0, #28
 8000caa:	f7ff fd51 	bl	8000750 <NRF24_read_register>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f043 0303 	orr.w	r3, r3, #3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	201c      	movs	r0, #28
 8000cba:	f7ff fd99 	bl	80007f0 <NRF24_write_register>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000cc8:	201d      	movs	r0, #29
 8000cca:	f7ff fd41 	bl	8000750 <NRF24_read_register>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	201d      	movs	r0, #29
 8000cda:	f7ff fd89 	bl	80007f0 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000cde:	201d      	movs	r0, #29
 8000ce0:	f7ff fd36 	bl	8000750 <NRF24_read_register>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10c      	bne.n	8000d04 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000cea:	f000 f995 	bl	8001018 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000cee:	201d      	movs	r0, #29
 8000cf0:	f7ff fd2e 	bl	8000750 <NRF24_read_register>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	201d      	movs	r0, #29
 8000d00:	f7ff fd76 	bl	80007f0 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000d04:	201c      	movs	r0, #28
 8000d06:	f7ff fd23 	bl	8000750 <NRF24_read_register>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	201c      	movs	r0, #28
 8000d16:	f7ff fd6b 	bl	80007f0 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000d1a:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <NRF24_enableDynamicPayloads+0x60>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
	
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000207 	.word	0x20000207

08000d28 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d2c:	201d      	movs	r0, #29
 8000d2e:	f7ff fd0f 	bl	8000750 <NRF24_read_register>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	201d      	movs	r0, #29
 8000d3e:	f7ff fd57 	bl	80007f0 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	201c      	movs	r0, #28
 8000d46:	f7ff fd53 	bl	80007f0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d4a:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <NRF24_disableDynamicPayloads+0x2c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000207 	.word	0x20000207

08000d58 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d004      	beq.n	8000d72 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d68:	213f      	movs	r1, #63	; 0x3f
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fd40 	bl	80007f0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d70:	e003      	b.n	8000d7a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fd3b 	bl	80007f0 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d8c:	2006      	movs	r0, #6
 8000d8e:	f7ff fcdf 	bl	8000750 <NRF24_read_register>
 8000d92:	4603      	mov	r3, r0
 8000d94:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	f023 0306 	bic.w	r3, r3, #6
 8000d9c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d104      	bne.n	8000dae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	f043 0306 	orr.w	r3, r3, #6
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e019      	b.n	8000de2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d104      	bne.n	8000dbe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e011      	b.n	8000de2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d104      	bne.n	8000dce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e009      	b.n	8000de2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d103      	bne.n	8000de2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	f043 0306 	orr.w	r3, r3, #6
 8000de0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4619      	mov	r1, r3
 8000de6:	2006      	movs	r0, #6
 8000de8:	f7ff fd02 	bl	80007f0 <NRF24_write_register>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e02:	2006      	movs	r0, #6
 8000e04:	f7ff fca4 	bl	8000750 <NRF24_read_register>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <NRF24_setDataRate+0x88>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e18:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d107      	bne.n	8000e30 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <NRF24_setDataRate+0x88>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	f043 0320 	orr.w	r3, r3, #32
 8000e2c:	73bb      	strb	r3, [r7, #14]
 8000e2e:	e00d      	b.n	8000e4c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d107      	bne.n	8000e46 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <NRF24_setDataRate+0x88>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	73bb      	strb	r3, [r7, #14]
 8000e44:	e002      	b.n	8000e4c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <NRF24_setDataRate+0x88>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2006      	movs	r0, #6
 8000e52:	f7ff fccd 	bl	80007f0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e56:	2006      	movs	r0, #6
 8000e58:	f7ff fc7a 	bl	8000750 <NRF24_read_register>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d102      	bne.n	8000e6c <NRF24_setDataRate+0x78>
  {
    result = true;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e002      	b.n	8000e72 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <NRF24_setDataRate+0x88>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000208 	.word	0x20000208

08000e80 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fc60 	bl	8000750 <NRF24_read_register>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f023 030c 	bic.w	r3, r3, #12
 8000e96:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00f      	beq.n	8000ebe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d104      	bne.n	8000eae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e007      	b.n	8000ebe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fc94 	bl	80007f0 <NRF24_write_register>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff fc3b 	bl	8000750 <NRF24_read_register>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f023 0302 	bic.w	r3, r3, #2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fc83 	bl	80007f0 <NRF24_write_register>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}

08000eee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000ef6:	f7ff fcf7 	bl	80008e8 <NRF24_get_status>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf14      	ite	ne
 8000f08:	2301      	movne	r3, #1
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d017      	beq.n	8000f44 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	2007      	movs	r0, #7
 8000f2e:	f7ff fc5f 	bl	80007f0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f003 0320 	and.w	r3, r3, #32
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	2007      	movs	r0, #7
 8000f40:	f7ff fc56 	bl	80007f0 <NRF24_write_register>
    }
  }
  return result;
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fbf8 	bl	8000750 <NRF24_read_register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fc3d 	bl	80007f0 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000f76:	2096      	movs	r0, #150	; 0x96
 8000f78:	f7ff fb8a 	bl	8000690 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fc7f 	bl	8000884 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fbc2 	bl	8000710 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f7ff fb7f 	bl	8000690 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fbbc 	bl	8000710 <NRF24_ce>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000fac:	f7ff fc9c 	bl	80008e8 <NRF24_get_status>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000fba:	2170      	movs	r1, #112	; 0x70
 8000fbc:	2007      	movs	r0, #7
 8000fbe:	f7ff fc17 	bl	80007f0 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800100a:	2170      	movs	r1, #112	; 0x70
 800100c:	2007      	movs	r0, #7
 800100e:	f7ff fbef 	bl	80007f0 <NRF24_write_register>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff fb56 	bl	80006d0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001024:	2350      	movs	r3, #80	; 0x50
 8001026:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001028:	2373      	movs	r3, #115	; 0x73
 800102a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800102c:	1d39      	adds	r1, r7, #4
 800102e:	2364      	movs	r3, #100	; 0x64
 8001030:	2202      	movs	r2, #2
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <NRF24_ACTIVATE_cmd+0x30>)
 8001034:	f005 ffae 	bl	8006f94 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff fb49 	bl	80006d0 <NRF24_csn>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000214 	.word	0x20000214
 800104c:	00000000 	.word	0x00000000

08001050 <readAltitude>:
#define BMP280_REG_CALIB       0x88
#define BMP280_REG_HUM_CALIB   0x88

#define BMP280_RESET_VALUE     0xB6

float readAltitude(float seaLevel, float pressure) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0a01 	vstr	s0, [r7, #4]
 800105a:	edc7 0a00 	vstr	s1, [r7]
  float atmospheric = pressure / 100.0F;
 800105e:	ed97 7a00 	vldr	s14, [r7]
 8001062:	eddf 6a17 	vldr	s13, [pc, #92]	; 80010c0 <readAltitude+0x70>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	edc7 7a03 	vstr	s15, [r7, #12]
  return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
 800106e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001072:	ed97 7a01 	vldr	s14, [r7, #4]
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107e:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80010b0 <readAltitude+0x60>
 8001082:	eeb0 0b47 	vmov.f64	d0, d7
 8001086:	f00c f9ef 	bl	800d468 <pow>
 800108a:	eeb0 6b40 	vmov.f64	d6, d0
 800108e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8001092:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001096:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80010b8 <readAltitude+0x68>
 800109a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800109e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	f3af 8000 	nop.w
 80010b0:	1a36e2eb 	.word	0x1a36e2eb
 80010b4:	3fc85bc0 	.word	0x3fc85bc0
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40e5a540 	.word	0x40e5a540
 80010c0:	42c80000 	.word	0x42c80000

080010c4 <bmp280_init_default_params>:

void bmp280_init_default_params(bmp280_params_t *params) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2203      	movs	r2, #3
 80010d0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2203      	movs	r2, #3
 80010dc:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	715a      	strb	r2, [r3, #5]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af04      	add	r7, sp, #16
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	460b      	mov	r3, r1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	b29a      	uxth	r2, r3
 800111a:	8af9      	ldrh	r1, [r7, #22]
 800111c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2302      	movs	r3, #2
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	f004 f871 	bl	8005214 <HAL_I2C_Mem_Read>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001138:	7d7b      	ldrb	r3, [r7, #21]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	7d3b      	ldrb	r3, [r7, #20]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21b      	sxth	r3, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	801a      	strh	r2, [r3, #0]
		return true;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <read_register16+0x56>
	} else
		return false;
 8001150:	2300      	movs	r3, #0

}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800115a:	b590      	push	{r4, r7, lr}
 800115c:	b08b      	sub	sp, #44	; 0x2c
 800115e:	af04      	add	r7, sp, #16
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	72fb      	strb	r3, [r7, #11]
 800116a:	4613      	mov	r3, r2
 800116c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	b29c      	uxth	r4, r3
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	b29b      	uxth	r3, r3
 8001182:	8af9      	ldrh	r1, [r7, #22]
 8001184:	f241 3288 	movw	r2, #5000	; 0x1388
 8001188:	9202      	str	r2, [sp, #8]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	4622      	mov	r2, r4
 8001194:	f004 f83e 	bl	8005214 <HAL_I2C_Mem_Read>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <read_data+0x48>
		return 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <read_data+0x4a>
	else
		return 1;
 80011a2:	2301      	movs	r3, #1

}
 80011a4:	4618      	mov	r0, r3
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}

080011ac <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	461a      	mov	r2, r3
 80011b8:	2188      	movs	r1, #136	; 0x88
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff9e 	bl	80010fc <read_register16>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06f      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3302      	adds	r3, #2
 80011ca:	461a      	mov	r2, r3
 80011cc:	218a      	movs	r1, #138	; 0x8a
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff94 	bl	80010fc <read_register16>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d065      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3304      	adds	r3, #4
 80011de:	461a      	mov	r2, r3
 80011e0:	218c      	movs	r1, #140	; 0x8c
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff8a 	bl	80010fc <read_register16>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d05b      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3306      	adds	r3, #6
 80011f2:	461a      	mov	r2, r3
 80011f4:	218e      	movs	r1, #142	; 0x8e
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff80 	bl	80010fc <read_register16>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d051      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3308      	adds	r3, #8
 8001206:	461a      	mov	r2, r3
 8001208:	2190      	movs	r1, #144	; 0x90
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff76 	bl	80010fc <read_register16>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d047      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	330a      	adds	r3, #10
 800121a:	461a      	mov	r2, r3
 800121c:	2192      	movs	r1, #146	; 0x92
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff6c 	bl	80010fc <read_register16>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03d      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	330c      	adds	r3, #12
 800122e:	461a      	mov	r2, r3
 8001230:	2194      	movs	r1, #148	; 0x94
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff62 	bl	80010fc <read_register16>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d033      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	330e      	adds	r3, #14
 8001242:	461a      	mov	r2, r3
 8001244:	2196      	movs	r1, #150	; 0x96
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff58 	bl	80010fc <read_register16>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d029      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3310      	adds	r3, #16
 8001256:	461a      	mov	r2, r3
 8001258:	2198      	movs	r1, #152	; 0x98
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ff4e 	bl	80010fc <read_register16>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d01f      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3312      	adds	r3, #18
 800126a:	461a      	mov	r2, r3
 800126c:	219a      	movs	r1, #154	; 0x9a
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff44 	bl	80010fc <read_register16>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d015      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3314      	adds	r3, #20
 800127e:	461a      	mov	r2, r3
 8001280:	219c      	movs	r1, #156	; 0x9c
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff3a 	bl	80010fc <read_register16>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001292:	461a      	mov	r2, r3
 8001294:	219e      	movs	r1, #158	; 0x9e
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff30 	bl	80010fc <read_register16>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <read_calibration_data+0xfa>

		return true;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <read_calibration_data+0xfc>
	}

	return false;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f103 0218 	add.w	r2, r3, #24
 80012be:	2301      	movs	r3, #1
 80012c0:	21a1      	movs	r1, #161	; 0xa1
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff49 	bl	800115a <read_data>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d14b      	bne.n	8001366 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	331a      	adds	r3, #26
 80012d2:	461a      	mov	r2, r3
 80012d4:	21e1      	movs	r1, #225	; 0xe1
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff10 	bl	80010fc <read_register16>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d041      	beq.n	8001366 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f103 021c 	add.w	r2, r3, #28
 80012e8:	2301      	movs	r3, #1
 80012ea:	21e3      	movs	r1, #227	; 0xe3
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff34 	bl	800115a <read_data>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d136      	bne.n	8001366 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80012f8:	f107 030e 	add.w	r3, r7, #14
 80012fc:	461a      	mov	r2, r3
 80012fe:	21e4      	movs	r1, #228	; 0xe4
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fefb 	bl	80010fc <read_register16>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d02c      	beq.n	8001366 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	461a      	mov	r2, r3
 8001312:	21e5      	movs	r1, #229	; 0xe5
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fef1 	bl	80010fc <read_register16>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d022      	beq.n	8001366 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001326:	2301      	movs	r3, #1
 8001328:	21e7      	movs	r1, #231	; 0xe7
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff15 	bl	800115a <read_data>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d117      	bne.n	8001366 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	b21b      	sxth	r3, r3
 800133c:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001340:	b21a      	sxth	r2, r3
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	121b      	asrs	r3, r3, #8
 8001346:	b21b      	sxth	r3, r3
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001356:	89bb      	ldrh	r3, [r7, #12]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	b29b      	uxth	r3, r3
 800135c:	b21a      	sxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	841a      	strh	r2, [r3, #32]

		return true;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af04      	add	r7, sp, #16
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
 800137c:	4613      	mov	r3, r2
 800137e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	b29a      	uxth	r2, r3
 8001390:	89f9      	ldrh	r1, [r7, #14]
 8001392:	f242 7310 	movw	r3, #10000	; 0x2710
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2301      	movs	r3, #1
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	1cbb      	adds	r3, r7, #2
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	f003 fe23 	bl	8004fec <HAL_I2C_Mem_Write>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <write_register8+0x40>
		return false;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e000      	b.n	80013b2 <write_register8+0x42>
	else
		return true;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013c8:	2b76      	cmp	r3, #118	; 0x76
 80013ca:	d005      	beq.n	80013d8 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013d0:	2b77      	cmp	r3, #119	; 0x77
 80013d2:	d001      	beq.n	80013d8 <bmp280_init+0x1e>

		return false;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e099      	b.n	800150c <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013de:	2301      	movs	r3, #1
 80013e0:	21d0      	movs	r1, #208	; 0xd0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff feb9 	bl	800115a <read_data>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <bmp280_init+0x38>
		return false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e08c      	b.n	800150c <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013f8:	2b58      	cmp	r3, #88	; 0x58
 80013fa:	d006      	beq.n	800140a <bmp280_init+0x50>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001402:	2b60      	cmp	r3, #96	; 0x60
 8001404:	d001      	beq.n	800140a <bmp280_init+0x50>

		return false;
 8001406:	2300      	movs	r3, #0
 8001408:	e080      	b.n	800150c <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800140a:	22b6      	movs	r2, #182	; 0xb6
 800140c:	21e0      	movs	r1, #224	; 0xe0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffae 	bl	8001370 <write_register8>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <bmp280_init+0x64>
		return false;
 800141a:	2300      	movs	r3, #0
 800141c:	e076      	b.n	800150c <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800141e:	f107 020c 	add.w	r2, r7, #12
 8001422:	2301      	movs	r3, #1
 8001424:	21f3      	movs	r1, #243	; 0xf3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fe97 	bl	800115a <read_data>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f5      	bne.n	800141e <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001432:	7b3b      	ldrb	r3, [r7, #12]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff feb5 	bl	80011ac <read_calibration_data>
 8001442:	4603      	mov	r3, r0
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <bmp280_init+0x96>
 800144e:	e001      	b.n	8001454 <bmp280_init+0x9a>
		return false;
 8001450:	2300      	movs	r3, #0
 8001452:	e05b      	b.n	800150c <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800145a:	2b60      	cmp	r3, #96	; 0x60
 800145c:	d10a      	bne.n	8001474 <bmp280_init+0xba>
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff26 	bl	80012b0 <read_hum_calibration_data>
 8001464:	4603      	mov	r3, r0
 8001466:	f083 0301 	eor.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <bmp280_init+0xba>
		return false;
 8001470:	2300      	movs	r3, #0
 8001472:	e04b      	b.n	800150c <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	015b      	lsls	r3, r3, #5
 800147a:	b25a      	sxtb	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	785b      	ldrb	r3, [r3, #1]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	b25b      	sxtb	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b25b      	sxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	461a      	mov	r2, r3
 800148e:	21f5      	movs	r1, #245	; 0xf5
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff6d 	bl	8001370 <write_register8>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <bmp280_init+0xe6>
		return false;
 800149c:	2300      	movs	r3, #0
 800149e:	e035      	b.n	800150c <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d102      	bne.n	80014ae <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014cc:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014d4:	2b60      	cmp	r3, #96	; 0x60
 80014d6:	d10d      	bne.n	80014f4 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	461a      	mov	r2, r3
 80014e2:	21f2      	movs	r1, #242	; 0xf2
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff43 	bl	8001370 <write_register8>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <bmp280_init+0x13a>
			return false;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e00b      	b.n	800150c <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	461a      	mov	r2, r3
 80014f8:	21f4      	movs	r1, #244	; 0xf4
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff38 	bl	8001370 <write_register8>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <bmp280_init+0x150>
		return false;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <bmp280_init+0x152>
	}

	return true;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001536:	12db      	asrs	r3, r3, #11
 8001538:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	111b      	asrs	r3, r3, #4
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	1112      	asrs	r2, r2, #4
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	1a52      	subs	r2, r2, r1
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800155e:	139b      	asrs	r3, r3, #14
 8001560:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	441a      	add	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3380      	adds	r3, #128	; 0x80
 8001578:	121b      	asrs	r3, r3, #8
}
 800157a:	4618      	mov	r0, r3
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001586:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4619      	mov	r1, r3
 8001598:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800159c:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80015a0:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 80015a4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	6a3a      	ldr	r2, [r7, #32]
 80015ac:	fb02 f203 	mul.w	r2, r2, r3
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	6a39      	ldr	r1, [r7, #32]
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	441a      	add	r2, r3
 80015ba:	6a39      	ldr	r1, [r7, #32]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	fba1 3403 	umull	r3, r4, r1, r3
 80015c2:	4422      	add	r2, r4
 80015c4:	4614      	mov	r4, r2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80015cc:	b211      	sxth	r1, r2
 80015ce:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015d2:	fb01 f504 	mul.w	r5, r1, r4
 80015d6:	fb03 f002 	mul.w	r0, r3, r2
 80015da:	4428      	add	r0, r5
 80015dc:	fba3 3401 	umull	r3, r4, r3, r1
 80015e0:	1902      	adds	r2, r0, r4
 80015e2:	4614      	mov	r4, r2
 80015e4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80015e8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	fb04 f102 	mul.w	r1, r4, r2
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	fb03 f202 	mul.w	r2, r3, r2
 8001604:	1888      	adds	r0, r1, r2
 8001606:	6a3a      	ldr	r2, [r7, #32]
 8001608:	fba2 1203 	umull	r1, r2, r2, r3
 800160c:	1883      	adds	r3, r0, r2
 800160e:	461a      	mov	r2, r3
 8001610:	f04f 0500 	mov.w	r5, #0
 8001614:	f04f 0600 	mov.w	r6, #0
 8001618:	0456      	lsls	r6, r2, #17
 800161a:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800161e:	044d      	lsls	r5, r1, #17
 8001620:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001624:	186b      	adds	r3, r5, r1
 8001626:	eb46 0402 	adc.w	r4, r6, r2
 800162a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001634:	b219      	sxth	r1, r3
 8001636:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800163a:	f04f 0500 	mov.w	r5, #0
 800163e:	f04f 0600 	mov.w	r6, #0
 8001642:	00ce      	lsls	r6, r1, #3
 8001644:	2500      	movs	r5, #0
 8001646:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800164a:	186b      	adds	r3, r5, r1
 800164c:	eb46 0402 	adc.w	r4, r6, r2
 8001650:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	6a3a      	ldr	r2, [r7, #32]
 8001658:	fb02 f203 	mul.w	r2, r2, r3
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	6a39      	ldr	r1, [r7, #32]
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	441a      	add	r2, r3
 8001666:	6a39      	ldr	r1, [r7, #32]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	fba1 3403 	umull	r3, r4, r1, r3
 800166e:	4422      	add	r2, r4
 8001670:	4614      	mov	r4, r2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001678:	b211      	sxth	r1, r2
 800167a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800167e:	fb01 f504 	mul.w	r5, r1, r4
 8001682:	fb03 f002 	mul.w	r0, r3, r2
 8001686:	4428      	add	r0, r5
 8001688:	fba3 3401 	umull	r3, r4, r3, r1
 800168c:	1902      	adds	r2, r0, r4
 800168e:	4614      	mov	r4, r2
 8001690:	f04f 0100 	mov.w	r1, #0
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	0a19      	lsrs	r1, r3, #8
 800169a:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800169e:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016ac:	6a38      	ldr	r0, [r7, #32]
 80016ae:	fb04 f500 	mul.w	r5, r4, r0
 80016b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016b4:	fb03 f000 	mul.w	r0, r3, r0
 80016b8:	4428      	add	r0, r5
 80016ba:	6a3d      	ldr	r5, [r7, #32]
 80016bc:	fba5 5603 	umull	r5, r6, r5, r3
 80016c0:	1983      	adds	r3, r0, r6
 80016c2:	461e      	mov	r6, r3
 80016c4:	f04f 0b00 	mov.w	fp, #0
 80016c8:	f04f 0c00 	mov.w	ip, #0
 80016cc:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80016d0:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80016d4:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016d8:	eb1b 0301 	adds.w	r3, fp, r1
 80016dc:	eb4c 0402 	adc.w	r4, ip, r2
 80016e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80016e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016e8:	1c19      	adds	r1, r3, #0
 80016ea:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	88db      	ldrh	r3, [r3, #6]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f04f 0400 	mov.w	r4, #0
 80016f8:	fb03 f502 	mul.w	r5, r3, r2
 80016fc:	fb01 f004 	mul.w	r0, r1, r4
 8001700:	4428      	add	r0, r5
 8001702:	fba1 3403 	umull	r3, r4, r1, r3
 8001706:	1902      	adds	r2, r0, r4
 8001708:	4614      	mov	r4, r2
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	1061      	asrs	r1, r4, #1
 8001714:	17e2      	asrs	r2, r4, #31
 8001716:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800171a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800171e:	4323      	orrs	r3, r4
 8001720:	d101      	bne.n	8001726 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001722:	2300      	movs	r3, #0
 8001724:	e0d4      	b.n	80018d0 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800172c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001730:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	ea4f 0963 	mov.w	r9, r3, asr #1
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001740:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001744:	4645      	mov	r5, r8
 8001746:	464e      	mov	r6, r9
 8001748:	1aed      	subs	r5, r5, r3
 800174a:	eb66 0604 	sbc.w	r6, r6, r4
 800174e:	46a8      	mov	r8, r5
 8001750:	46b1      	mov	r9, r6
 8001752:	eb18 0308 	adds.w	r3, r8, r8
 8001756:	eb49 0409 	adc.w	r4, r9, r9
 800175a:	4698      	mov	r8, r3
 800175c:	46a1      	mov	r9, r4
 800175e:	eb18 0805 	adds.w	r8, r8, r5
 8001762:	eb49 0906 	adc.w	r9, r9, r6
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001772:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001776:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800177a:	eb18 0801 	adds.w	r8, r8, r1
 800177e:	eb49 0902 	adc.w	r9, r9, r2
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800178e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001792:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001796:	4688      	mov	r8, r1
 8001798:	4691      	mov	r9, r2
 800179a:	eb18 0805 	adds.w	r8, r8, r5
 800179e:	eb49 0906 	adc.w	r9, r9, r6
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80017ae:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80017b2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80017b6:	4688      	mov	r8, r1
 80017b8:	4691      	mov	r9, r2
 80017ba:	eb18 0005 	adds.w	r0, r8, r5
 80017be:	eb49 0106 	adc.w	r1, r9, r6
 80017c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c6:	f7fe fd93 	bl	80002f0 <__aeabi_ldivmod>
 80017ca:	4603      	mov	r3, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017d8:	b219      	sxth	r1, r3
 80017da:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017de:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	f04f 0400 	mov.w	r4, #0
 80017ea:	0b6b      	lsrs	r3, r5, #13
 80017ec:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80017f0:	1374      	asrs	r4, r6, #13
 80017f2:	fb03 f502 	mul.w	r5, r3, r2
 80017f6:	fb01 f004 	mul.w	r0, r1, r4
 80017fa:	4428      	add	r0, r5
 80017fc:	fba1 1203 	umull	r1, r2, r1, r3
 8001800:	1883      	adds	r3, r0, r2
 8001802:	461a      	mov	r2, r3
 8001804:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	0b6b      	lsrs	r3, r5, #13
 8001812:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001816:	1374      	asrs	r4, r6, #13
 8001818:	fb03 f502 	mul.w	r5, r3, r2
 800181c:	fb01 f004 	mul.w	r0, r1, r4
 8001820:	4428      	add	r0, r5
 8001822:	fba1 1203 	umull	r1, r2, r1, r3
 8001826:	1883      	adds	r3, r0, r2
 8001828:	461a      	mov	r2, r3
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	f04f 0400 	mov.w	r4, #0
 8001832:	0e4b      	lsrs	r3, r1, #25
 8001834:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001838:	1654      	asrs	r4, r2, #25
 800183a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001844:	b21b      	sxth	r3, r3
 8001846:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	fb04 f102 	mul.w	r1, r4, r2
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	fb03 f202 	mul.w	r2, r3, r2
 8001856:	1888      	adds	r0, r1, r2
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	fba2 1203 	umull	r1, r2, r2, r3
 800185e:	1883      	adds	r3, r0, r2
 8001860:	461a      	mov	r2, r3
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	0ccb      	lsrs	r3, r1, #19
 800186c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001870:	14d4      	asrs	r4, r2, #19
 8001872:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001876:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800187a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800187e:	eb11 0803 	adds.w	r8, r1, r3
 8001882:	eb42 0904 	adc.w	r9, r2, r4
 8001886:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800188a:	eb13 0508 	adds.w	r5, r3, r8
 800188e:	eb44 0609 	adc.w	r6, r4, r9
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	0a29      	lsrs	r1, r5, #8
 800189c:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80018a0:	1232      	asrs	r2, r6, #8
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018a8:	b21d      	sxth	r5, r3
 80018aa:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80018ae:	f04f 0800 	mov.w	r8, #0
 80018b2:	f04f 0900 	mov.w	r9, #0
 80018b6:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80018ba:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80018be:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80018c2:	eb18 0301 	adds.w	r3, r8, r1
 80018c6:	eb49 0402 	adc.w	r4, r9, r2
 80018ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 80018ce:	693b      	ldr	r3, [r7, #16]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

080018da <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80018da:	b480      	push	{r7}
 80018dc:	b087      	sub	sp, #28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80018ec:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	039a      	lsls	r2, r3, #14
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80018f8:	051b      	lsls	r3, r3, #20
 80018fa:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001902:	4619      	mov	r1, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fb03 f301 	mul.w	r3, r3, r1
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001910:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001918:	4611      	mov	r1, r2
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	fb02 f201 	mul.w	r2, r2, r1
 8001920:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	7f09      	ldrb	r1, [r1, #28]
 8001926:	4608      	mov	r0, r1
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	fb01 f100 	mul.w	r1, r1, r0
 800192e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001930:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001934:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001938:	1292      	asrs	r2, r2, #10
 800193a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800193e:	68f9      	ldr	r1, [r7, #12]
 8001940:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001944:	fb01 f202 	mul.w	r2, r1, r2
 8001948:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800194c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	13db      	asrs	r3, r3, #15
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	13d2      	asrs	r2, r2, #15
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	7e12      	ldrb	r2, [r2, #24]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001978:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001980:	bfa8      	it	ge
 8001982:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001986:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	131b      	asrs	r3, r3, #12
}
 800198c:	4618      	mov	r0, r3
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019ac:	2b60      	cmp	r3, #96	; 0x60
 80019ae:	d007      	beq.n	80019c0 <bmp280_read_fixed+0x28>
		if (humidity)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <bmp280_read_fixed+0x24>
			*humidity = 0;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <bmp280_read_fixed+0x32>
 80019c6:	2308      	movs	r3, #8
 80019c8:	e000      	b.n	80019cc <bmp280_read_fixed+0x34>
 80019ca:	2306      	movs	r3, #6
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f107 0218 	add.w	r2, r7, #24
 80019d6:	21f7      	movs	r1, #247	; 0xf7
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fbbe 	bl	800115a <read_data>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <bmp280_read_fixed+0x50>
		return false;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e038      	b.n	8001a5a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80019e8:	7e3b      	ldrb	r3, [r7, #24]
 80019ea:	031a      	lsls	r2, r3, #12
 80019ec:	7e7b      	ldrb	r3, [r7, #25]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4313      	orrs	r3, r2
 80019f2:	7eba      	ldrb	r2, [r7, #26]
 80019f4:	0912      	lsrs	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	4313      	orrs	r3, r2
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80019fc:	7efb      	ldrb	r3, [r7, #27]
 80019fe:	031a      	lsls	r2, r3, #12
 8001a00:	7f3b      	ldrb	r3, [r7, #28]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4313      	orrs	r3, r2
 8001a06:	7f7a      	ldrb	r2, [r7, #29]
 8001a08:	0912      	lsrs	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	461a      	mov	r2, r3
 8001a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff fd7b 	bl	8001514 <compensate_temperature>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	461a      	mov	r2, r3
 8001a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff fdab 	bl	8001586 <compensate_pressure>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00d      	beq.n	8001a58 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001a3c:	7fbb      	ldrb	r3, [r7, #30]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	7ffa      	ldrb	r2, [r7, #31]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6a39      	ldr	r1, [r7, #32]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff ff44 	bl	80018da <compensate_humidity>
 8001a52:	4602      	mov	r2, r0
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001a58:	2301      	movs	r3, #1
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3730      	adds	r7, #48	; 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <bmp280_read_float+0x1a>
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	e000      	b.n	8001a80 <bmp280_read_float+0x1c>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f107 0218 	add.w	r2, r7, #24
 8001a84:	f107 011c 	add.w	r1, r7, #28
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff ff85 	bl	8001998 <bmp280_read_fixed>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d028      	beq.n	8001ae6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001af0 <bmp280_read_float+0x8c>
 8001aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001af4 <bmp280_read_float+0x90>
 8001aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001af8 <bmp280_read_float+0x94>
 8001ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <bmp280_read_float+0x84>
	}

	return false;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	42c80000 	.word	0x42c80000
 8001af4:	43800000 	.word	0x43800000
 8001af8:	44800000 	.word	0x44800000
 8001afc:	00000000 	.word	0x00000000

08001b00 <convertDegMinToDecDeg>:
#include "gps.h"

static double convertDegMinToDecDeg (float degMin){
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	f04f 0400 	mov.w	r4, #0
 8001b12:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double decDeg = 0.0;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f04f 0400 	mov.w	r4, #0
 8001b1e:	e9c7 3402 	strd	r3, r4, [r7, #8]

  min = fmod((double)degMin, 100.0);
 8001b22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b2a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001b80 <convertDegMinToDecDeg+0x80>
 8001b2e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b32:	f00b fc45 	bl	800d3c0 <fmod>
 8001b36:	ed87 0b04 	vstr	d0, [r7, #16]

  degMin = (int) ( degMin / 100 );
 8001b3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b3e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b90 <convertDegMinToDecDeg+0x90>
 8001b42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8001b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b5a:	ed97 5b04 	vldr	d5, [r7, #16]
 8001b5e:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 8001b88 <convertDegMinToDecDeg+0x88>
 8001b62:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001b66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b6a:	ed87 7b02 	vstr	d7, [r7, #8]

  return decDeg;
 8001b6e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b72:	ec44 3b17 	vmov	d7, r3, r4
}
 8001b76:	eeb0 0b47 	vmov.f64	d0, d7
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	00000000 	.word	0x00000000
 8001b84:	40590000 	.word	0x40590000
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	404e0000 	.word	0x404e0000
 8001b90:	42c80000 	.word	0x42c80000

08001b94 <gps_init>:

void gps_init(gps* dev, gps_config* config){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
	
	dev->config = *config;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba6:	e883 0003 	stmia.w	r3, {r0, r1}

	dev->i = 0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	dev->lastTime = 0;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

	HAL_UART_Receive_IT(dev->config.uart, dev->pData, 1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f006 fb80 	bl	80082cc <HAL_UART_Receive_IT>

}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <gps_process>:

void gps_process(gps* dev){
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	b091      	sub	sp, #68	; 0x44
 8001bd8:	af0a      	add	r7, sp, #40	; 0x28
 8001bda:	60f8      	str	r0, [r7, #12]

	if( ((HAL_GetTick()-dev->lastTime) > 10) && (dev->i > 0) ){
 8001bdc:	f002 f88a 	bl	8003cf4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b0a      	cmp	r3, #10
 8001bec:	f240 80fd 	bls.w	8001dea <gps_process+0x216>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f340 80f7 	ble.w	8001dea <gps_process+0x216>

		char* string;

		memset(&dev->data, 0, sizeof(dev->data));
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3308      	adds	r3, #8
 8001c00:	2248      	movs	r2, #72	; 0x48
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f007 fa1a 	bl	800903e <memset>
		
		string = strstr(dev->buffer, "$GPRMC,");
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3350      	adds	r3, #80	; 0x50
 8001c0e:	4979      	ldr	r1, [pc, #484]	; (8001df4 <gps_process+0x220>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f008 f87f 	bl	8009d14 <strstr>
 8001c16:	6178      	str	r0, [r7, #20]

		if (string != NULL){
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02f      	beq.n	8001c7e <gps_process+0xaa>

			sscanf(string, "$GPRMC,%2d%2d%2d.%2d,%c,%f,%c,%f,%c,%*f,,%2d%2d%2d,", &dev->data.hour, &dev->data.min, &dev->data.sec, &dev->data.msec,
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f103 0c14 	add.w	ip, r3, #20
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f103 0e18 	add.w	lr, r3, #24
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	331c      	adds	r3, #28
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	3220      	adds	r2, #32
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	3128      	adds	r1, #40	; 0x28
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	302c      	adds	r0, #44	; 0x2c
 8001c3c:	68fc      	ldr	r4, [r7, #12]
 8001c3e:	3429      	adds	r4, #41	; 0x29
 8001c40:	68fd      	ldr	r5, [r7, #12]
 8001c42:	3530      	adds	r5, #48	; 0x30
 8001c44:	68fe      	ldr	r6, [r7, #12]
 8001c46:	362a      	adds	r6, #42	; 0x2a
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	330c      	adds	r3, #12
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3310      	adds	r3, #16
 8001c58:	9309      	str	r3, [sp, #36]	; 0x24
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	9308      	str	r3, [sp, #32]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	9307      	str	r3, [sp, #28]
 8001c62:	9606      	str	r6, [sp, #24]
 8001c64:	9505      	str	r5, [sp, #20]
 8001c66:	9404      	str	r4, [sp, #16]
 8001c68:	9003      	str	r0, [sp, #12]
 8001c6a:	9102      	str	r1, [sp, #8]
 8001c6c:	9201      	str	r2, [sp, #4]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4673      	mov	r3, lr
 8001c74:	4662      	mov	r2, ip
 8001c76:	4960      	ldr	r1, [pc, #384]	; (8001df8 <gps_process+0x224>)
 8001c78:	6978      	ldr	r0, [r7, #20]
 8001c7a:	f008 f81f 	bl	8009cbc <siscanf>
															      &dev->data.latitud, &dev->data.ns, &dev->data.longitud, &dev->data.ew,
																  &dev->data.day, &dev->data.month, &dev->data.year);

		}

		string = strstr(dev->buffer, "$GPVTG,");
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3350      	adds	r3, #80	; 0x50
 8001c82:	495e      	ldr	r1, [pc, #376]	; (8001dfc <gps_process+0x228>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f008 f845 	bl	8009d14 <strstr>
 8001c8a:	6178      	str	r0, [r7, #20]

		if (string != NULL){
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <gps_process+0xcc>

			sscanf(string, "$GPVTG,,%*c,,%*c,%*f,%*c,%f", &dev->data.velocity);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3334      	adds	r3, #52	; 0x34
 8001c96:	461a      	mov	r2, r3
 8001c98:	4959      	ldr	r1, [pc, #356]	; (8001e00 <gps_process+0x22c>)
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f008 f80e 	bl	8009cbc <siscanf>

		}

		string = strstr(dev->buffer, "$GPGGA,");
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3350      	adds	r3, #80	; 0x50
 8001ca4:	4957      	ldr	r1, [pc, #348]	; (8001e04 <gps_process+0x230>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f008 f834 	bl	8009d14 <strstr>
 8001cac:	6178      	str	r0, [r7, #20]

		if (string != NULL){
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <gps_process+0xee>

			sscanf(string, "$GPGGA,%*f,%*f,%*c,%*f,%*c,%*c,%*d,%*f,%f", &dev->data.altitude);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3338      	adds	r3, #56	; 0x38
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4953      	ldr	r1, [pc, #332]	; (8001e08 <gps_process+0x234>)
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f007 fffd 	bl	8009cbc <siscanf>

		}

		string = strstr(dev->buffer, "$GPGSV,");
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3350      	adds	r3, #80	; 0x50
 8001cc6:	4951      	ldr	r1, [pc, #324]	; (8001e0c <gps_process+0x238>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f008 f823 	bl	8009d14 <strstr>
 8001cce:	6178      	str	r0, [r7, #20]

		if (string != NULL){
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <gps_process+0x110>

			sscanf(string, "$GPGSV,%*d,%*d,%d", &dev->data.satellites);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3324      	adds	r3, #36	; 0x24
 8001cda:	461a      	mov	r2, r3
 8001cdc:	494c      	ldr	r1, [pc, #304]	; (8001e10 <gps_process+0x23c>)
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f007 ffec 	bl	8009cbc <siscanf>

		}

		if (dev->data.hour < fabs(dev->config.gtm)){
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cfe:	eeb0 7bc7 	vabs.f64	d7, d7
 8001d02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	d509      	bpl.n	8001d20 <gps_process+0x14c>
			dev->data.hour += (24 + dev->config.gtm);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001d16:	3318      	adds	r3, #24
 8001d18:	441a      	add	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	e007      	b.n	8001d30 <gps_process+0x15c>
		}
		else{
			dev->data.hour += dev->config.gtm;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8001d2a:	441a      	add	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	615a      	str	r2, [r3, #20]
		}
		dev->data.year += 2000;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	611a      	str	r2, [r3, #16]

		dev->data.latitudDec = convertDegMinToDecDeg(dev->data.latitud);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d42:	eeb0 0a67 	vmov.f32	s0, s15
 8001d46:	f7ff fedb 	bl	8001b00 <convertDegMinToDecDeg>
 8001d4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
		dev->data.longitudDec = convertDegMinToDecDeg(dev->data.longitud);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	f7ff fecf 	bl	8001b00 <convertDegMinToDecDeg>
 8001d62:	eeb0 7b40 	vmov.f64	d7, d0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

		if (dev->data.ns == 'S'){
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d72:	2b53      	cmp	r3, #83	; 0x53
 8001d74:	d10f      	bne.n	8001d96 <gps_process+0x1c2>
			dev->data.latitud *= -1;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d7c:	eef1 7a67 	vneg.f32	s15, s15
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			dev->data.latitudDec *= -1;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001d8c:	eeb1 7b47 	vneg.f64	d7, d7
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
		}

		if (dev->data.ew == 'W'){
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d9c:	2b57      	cmp	r3, #87	; 0x57
 8001d9e:	d10f      	bne.n	8001dc0 <gps_process+0x1ec>
			dev->data.longitud *= -1;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001da6:	eef1 7a67 	vneg.f32	s15, s15
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			dev->data.longitudDec *= -1;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001db6:	eeb1 7b47 	vneg.f64	d7, d7
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}

		
		memset(dev->buffer, 0, sizeof(dev->buffer));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3350      	adds	r3, #80	; 0x50
 8001dc4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f007 f937 	bl	800903e <memset>

		dev->i = 0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

		HAL_UART_Receive_IT(dev->config.uart, dev->pData, 1);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001de2:	2201      	movs	r2, #1
 8001de4:	4619      	mov	r1, r3
 8001de6:	f006 fa71 	bl	80082cc <HAL_UART_Receive_IT>

	}
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df2:	bf00      	nop
 8001df4:	0800e318 	.word	0x0800e318
 8001df8:	0800e320 	.word	0x0800e320
 8001dfc:	0800e354 	.word	0x0800e354
 8001e00:	0800e35c 	.word	0x0800e35c
 8001e04:	0800e378 	.word	0x0800e378
 8001e08:	0800e380 	.word	0x0800e380
 8001e0c:	0800e3ac 	.word	0x0800e3ac
 8001e10:	0800e3b4 	.word	0x0800e3b4

08001e14 <gps_callBack>:

void gps_callBack(gps* dev){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

	dev->lastTime = HAL_GetTick();
 8001e1c:	f001 ff6a 	bl	8003cf4 <HAL_GetTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

	dev->buffer[dev->i] = dev->pData[0];
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	f892 12b0 	ldrb.w	r1, [r2, #688]	; 0x2b0
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	dev->i++;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

	HAL_UART_Receive_IT(dev->config.uart, dev->pData, 1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f006 fa36 	bl	80082cc <HAL_UART_Receive_IT>

}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <delay_us>:
#include "i2c_lcd.h"

static void delay_us(uint16_t us){
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <delay_us+0x2c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8001e7a:	bf00      	nop
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <delay_us+0x2c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3f9      	bcc.n	8001e7c <delay_us+0x14>
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	200004b4 	.word	0x200004b4

08001e98 <en_high>:

static void en_high(i2c_lcd* dev){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	6078      	str	r0, [r7, #4]
	dev->universal[0] |= (1<<LCD_EN);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7c1b      	ldrb	r3, [r3, #16]
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68d8      	ldr	r0, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	b299      	uxth	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f103 0210 	add.w	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f002 fea5 	bl	8004c18 <HAL_I2C_Master_Transmit>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <en_low>:

static void en_low(i2c_lcd* dev){
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	6078      	str	r0, [r7, #4]
	dev->universal[0] &= ~(1<<LCD_EN);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7c1b      	ldrb	r3, [r3, #16]
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68d8      	ldr	r0, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f103 0210 	add.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	f002 fe86 	bl	8004c18 <HAL_I2C_Master_Transmit>

}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <rs_high>:

static void rs_high(i2c_lcd* dev){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	6078      	str	r0, [r7, #4]
	dev->universal[0] |= (1<<LCD_RS);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7c1b      	ldrb	r3, [r3, #16]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68d8      	ldr	r0, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	b299      	uxth	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0210 	add.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	f002 fe67 	bl	8004c18 <HAL_I2C_Master_Transmit>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <rs_low>:

static void rs_low(i2c_lcd* dev){
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	6078      	str	r0, [r7, #4]
	dev->universal[0] &= ~(1<<LCD_RS);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7c1b      	ldrb	r3, [r3, #16]
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68d8      	ldr	r0, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	b299      	uxth	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f103 0210 	add.w	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	f002 fe48 	bl	8004c18 <HAL_I2C_Master_Transmit>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <pulse_en>:

static void pulse_en(i2c_lcd* dev){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

	en_high(dev);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff7d 	bl	8001e98 <en_high>
	delay_us(1);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff ff62 	bl	8001e68 <delay_us>
	en_low(dev);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff96 	bl	8001ed6 <en_low>
	delay_us(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff ff5c 	bl	8001e68 <delay_us>

}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <write>:

static void write(i2c_lcd* dev, uint8_t data){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]

	uint8_t mask = 0b00001111;
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	73fb      	strb	r3, [r7, #15]
	dev->universal[0] &= mask;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7c1a      	ldrb	r2, [r3, #16]
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	741a      	strb	r2, [r3, #16]
	dev->universal[0] |= (data<<4);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7c1b      	ldrb	r3, [r3, #16]
 8001fda:	b25a      	sxtb	r2, r3
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68d8      	ldr	r0, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	b299      	uxth	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f103 0210 	add.w	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2301      	movs	r3, #1
 8002008:	f002 fe06 	bl	8004c18 <HAL_I2C_Master_Transmit>

	pulse_en(dev);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ffbf 	bl	8001f90 <pulse_en>

}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <putChar>:

static void putChar(i2c_lcd* dev, char s){
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
	
	rs_high(dev);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff74 	bl	8001f14 <rs_high>
	
	write(dev, s>>4);
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffbf 	bl	8001fb8 <write>
	write(dev, s);
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffba 	bl	8001fb8 <write>
	
	rs_low(dev);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff84 	bl	8001f52 <rs_low>
		
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <i2c_lcd_cmd>:

static void i2c_lcd_cmd(i2c_lcd* dev, uint8_t cmd){
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	70fb      	strb	r3, [r7, #3]

	write(dev, cmd>>4);
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa6 	bl	8001fb8 <write>
	write(dev, cmd);
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ffa1 	bl	8001fb8 <write>

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <i2c_lcd_init>:

LCD_STATE i2c_lcd_init(i2c_lcd* dev, i2c_lcd_config* config){
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b087      	sub	sp, #28
 8002084:	af02      	add	r7, sp, #8
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	
	dev->config = *config;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4614      	mov	r4, r2
 8002090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	LCD_STATE state = LCD_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_IsDeviceReady(dev->config.i2c, (dev->config.addres)<<1, 10, dev->config.timeout) == HAL_OK){
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68d8      	ldr	r0, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	b299      	uxth	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	220a      	movs	r2, #10
 80020ae:	f003 f9cb 	bl	8005448 <HAL_I2C_IsDeviceReady>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <i2c_lcd_init+0x3c>
		state = LCD_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
	}

	dev->universal[0] = 0x00;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	741a      	strb	r2, [r3, #16]
	dev->display_control[0] = 0x0F;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	220f      	movs	r2, #15
 80020c6:	749a      	strb	r2, [r3, #18]
	dev->entry_mode[0] = 0x05;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2205      	movs	r2, #5
 80020cc:	745a      	strb	r2, [r3, #17]
	dev->function_set[0] = 0x20;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	74da      	strb	r2, [r3, #19]

	if (dev->config.mode==0){
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	78db      	ldrb	r3, [r3, #3]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d110      	bne.n	80020fe <i2c_lcd_init+0x7e>
		dev->config.row_offsets[0] = 0x00;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	711a      	strb	r2, [r3, #4]
		dev->config.row_offsets[1] = 0x40;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	715a      	strb	r2, [r3, #5]
		dev->config.row_offsets[2] = 0x00 + dev->config.rows;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	789a      	ldrb	r2, [r3, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	719a      	strb	r2, [r3, #6]
		dev->config.row_offsets[3] = 0x40 + dev->config.rows;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	789b      	ldrb	r3, [r3, #2]
 80020f4:	3340      	adds	r3, #64	; 0x40
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	71da      	strb	r2, [r3, #7]
 80020fc:	e00b      	b.n	8002116 <i2c_lcd_init+0x96>
	}
	else{
		dev->config.row_offsets[0] = 0x00;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	711a      	strb	r2, [r3, #4]
		dev->config.row_offsets[1] = 0x90;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2290      	movs	r2, #144	; 0x90
 8002108:	715a      	strb	r2, [r3, #5]
		dev->config.row_offsets[2] = 0x88;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2288      	movs	r2, #136	; 0x88
 800210e:	719a      	strb	r2, [r3, #6]
		dev->config.row_offsets[3] = 0x98;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2298      	movs	r2, #152	; 0x98
 8002114:	71da      	strb	r2, [r3, #7]
	}


	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68d8      	ldr	r0, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	b299      	uxth	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 0210 	add.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2301      	movs	r3, #1
 8002132:	f002 fd71 	bl	8004c18 <HAL_I2C_Master_Transmit>

	HAL_TIM_Base_Start(&htim1);
 8002136:	4824      	ldr	r0, [pc, #144]	; (80021c8 <i2c_lcd_init+0x148>)
 8002138:	f005 fd6e 	bl	8007c18 <HAL_TIM_Base_Start>

	HAL_Delay(50);
 800213c:	2032      	movs	r0, #50	; 0x32
 800213e:	f001 fde5 	bl	8003d0c <HAL_Delay>

	i2c_lcd_bl(dev, true);
 8002142:	2101      	movs	r1, #1
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f85b 	bl	8002200 <i2c_lcd_bl>

	write(dev, 0x03);
 800214a:	2103      	movs	r1, #3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff33 	bl	8001fb8 <write>
	HAL_Delay(5);
 8002152:	2005      	movs	r0, #5
 8002154:	f001 fdda 	bl	8003d0c <HAL_Delay>
	write(dev, 0x03);
 8002158:	2103      	movs	r1, #3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff2c 	bl	8001fb8 <write>
	HAL_Delay(5);
 8002160:	2005      	movs	r0, #5
 8002162:	f001 fdd3 	bl	8003d0c <HAL_Delay>
	write(dev, 0x03);
 8002166:	2103      	movs	r1, #3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff25 	bl	8001fb8 <write>
	delay_us(150);
 800216e:	2096      	movs	r0, #150	; 0x96
 8002170:	f7ff fe7a 	bl	8001e68 <delay_us>
	write(dev, 0x02);
 8002174:	2102      	movs	r1, #2
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ff1e 	bl	8001fb8 <write>

	if (dev->config.rows>1){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	789b      	ldrb	r3, [r3, #2]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d90c      	bls.n	800219e <i2c_lcd_init+0x11e>
		dev->function_set[0] |= (1<<3);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7cdb      	ldrb	r3, [r3, #19]
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	b2da      	uxtb	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	74da      	strb	r2, [r3, #19]
		i2c_lcd_cmd(dev, *dev->function_set);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7cdb      	ldrb	r3, [r3, #19]
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff5a 	bl	8002052 <i2c_lcd_cmd>
	}
	i2c_lcd_display(dev, true);
 800219e:	2101      	movs	r1, #1
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f8a9 	bl	80022f8 <i2c_lcd_display>
	i2c_lcd_cursor(dev, false);
 80021a6:	2100      	movs	r1, #0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f883 	bl	80022b4 <i2c_lcd_cursor>
	i2c_lcd_bk(dev, false);
 80021ae:	2100      	movs	r1, #0
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f85d 	bl	8002270 <i2c_lcd_bk>
	i2c_lcd_home(dev);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f84e 	bl	8002258 <i2c_lcd_home>

	return state;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]

}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200004b4 	.word	0x200004b4

080021cc <i2c_lcd_print>:

void i2c_lcd_print(i2c_lcd* dev, char *s, uint8_t size){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	71fb      	strb	r3, [r7, #7]

	while(size>0){
 80021da:	e00a      	b.n	80021f2 <i2c_lcd_print+0x26>
		putChar(dev, *s++);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	60ba      	str	r2, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff ff17 	bl	800201a <putChar>
		size--;
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	71fb      	strb	r3, [r7, #7]
	while(size>0){
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f1      	bne.n	80021dc <i2c_lcd_print+0x10>
	}

}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <i2c_lcd_bl>:

void i2c_lcd_bl(i2c_lcd* dev, bool state){
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	70fb      	strb	r3, [r7, #3]

	if (state){
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <i2c_lcd_bl+0x22>
		dev->universal[0] |= (1<<LCD_K);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7c1b      	ldrb	r3, [r3, #16]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	b2da      	uxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	741a      	strb	r2, [r3, #16]
 8002220:	e006      	b.n	8002230 <i2c_lcd_bl+0x30>
	}
	else{
		dev->universal[0] &= ~(1<<LCD_K);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7c1b      	ldrb	r3, [r3, #16]
 8002226:	f023 0308 	bic.w	r3, r3, #8
 800222a:	b2da      	uxtb	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	741a      	strb	r2, [r3, #16]
	}
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68d8      	ldr	r0, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	b299      	uxth	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f103 0210 	add.w	r2, r3, #16
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	f002 fce4 	bl	8004c18 <HAL_I2C_Master_Transmit>

}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <i2c_lcd_home>:

void i2c_lcd_home(i2c_lcd* dev){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	i2c_lcd_cmd(dev, 1);
 8002260:	2101      	movs	r1, #1
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fef5 	bl	8002052 <i2c_lcd_cmd>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <i2c_lcd_bk>:
void i2c_lcd_return(i2c_lcd* dev){
	uint8_t cmd = 0x02;
	i2c_lcd_cmd(dev, cmd);
}

void i2c_lcd_bk(i2c_lcd* dev, bool state){
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
	if (state){
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <i2c_lcd_bk+0x22>
		dev->display_control[0] |= 1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7c9b      	ldrb	r3, [r3, #18]
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	749a      	strb	r2, [r3, #18]
 8002290:	e006      	b.n	80022a0 <i2c_lcd_bk+0x30>
	}
	else{
		dev->display_control[0] &= ~1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7c9b      	ldrb	r3, [r3, #18]
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	b2da      	uxtb	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	749a      	strb	r2, [r3, #18]
	}
	i2c_lcd_cmd(dev, *dev->display_control);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7c9b      	ldrb	r3, [r3, #18]
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fed3 	bl	8002052 <i2c_lcd_cmd>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <i2c_lcd_cursor>:

void i2c_lcd_cursor(i2c_lcd* dev, bool state){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
	if (state){
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <i2c_lcd_cursor+0x22>
		dev->display_control[0] |= (1<<1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7c9b      	ldrb	r3, [r3, #18]
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	749a      	strb	r2, [r3, #18]
 80022d4:	e006      	b.n	80022e4 <i2c_lcd_cursor+0x30>
	}
	else{
		dev->display_control[0] &= ~(1<<1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7c9b      	ldrb	r3, [r3, #18]
 80022da:	f023 0302 	bic.w	r3, r3, #2
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	749a      	strb	r2, [r3, #18]
	}
	i2c_lcd_cmd(dev, *dev->display_control);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7c9b      	ldrb	r3, [r3, #18]
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff feb1 	bl	8002052 <i2c_lcd_cmd>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <i2c_lcd_display>:

void i2c_lcd_display(i2c_lcd* dev, bool state){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
	if (state){
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <i2c_lcd_display+0x22>
		dev->display_control[0] |= (1<<2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7c9b      	ldrb	r3, [r3, #18]
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	b2da      	uxtb	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	749a      	strb	r2, [r3, #18]
 8002318:	e006      	b.n	8002328 <i2c_lcd_display+0x30>
	}
	else{
		dev->display_control[0] &= ~(1<<2);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7c9b      	ldrb	r3, [r3, #18]
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	b2da      	uxtb	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	749a      	strb	r2, [r3, #18]
	}
	i2c_lcd_cmd(dev, *dev->display_control);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7c9b      	ldrb	r3, [r3, #18]
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fe8f 	bl	8002052 <i2c_lcd_cmd>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <i2c_lcd_setCursor>:
		dev->entry_mode[0] &= ~(1<<0);
	}
	i2c_lcd_cmd(dev, *dev->entry_mode);
}

void i2c_lcd_setCursor(i2c_lcd* dev, uint8_t col, uint8_t row){
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
 8002348:	4613      	mov	r3, r2
 800234a:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(dev->config.row_offsets) / sizeof(*dev->config.row_offsets);
 800234c:	2304      	movs	r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
	if (row >= max_lines) {
 8002350:	78bb      	ldrb	r3, [r7, #2]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d803      	bhi.n	8002360 <i2c_lcd_setCursor+0x24>
	row = max_lines - 1;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= dev->config.rows) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	789b      	ldrb	r3, [r3, #2]
 8002364:	78ba      	ldrb	r2, [r7, #2]
 8002366:	429a      	cmp	r2, r3
 8002368:	d303      	bcc.n	8002372 <i2c_lcd_setCursor+0x36>
	row = dev->config.rows - 1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	789b      	ldrb	r3, [r3, #2]
 800236e:	3b01      	subs	r3, #1
 8002370:	70bb      	strb	r3, [r7, #2]
	}
	i2c_lcd_cmd(dev, 0x80 | (col + dev->config.row_offsets[row]));
 8002372:	78bb      	ldrb	r3, [r7, #2]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	791a      	ldrb	r2, [r3, #4]
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	4413      	add	r3, r2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	b25b      	sxtb	r3, r3
 8002382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002386:	b25b      	sxtb	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fe60 	bl	8002052 <i2c_lcd_cmd>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	gps_callBack(&gpsTx);
 80023a4:	4803      	ldr	r0, [pc, #12]	; (80023b4 <HAL_UART_RxCpltCallback+0x18>)
 80023a6:	f7ff fd35 	bl	8001e14 <gps_callBack>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000638 	.word	0x20000638

080023b8 <isPressed>:

bool isPressed(){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
	bool ok = false;
 80023be:	2300      	movs	r3, #0
 80023c0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==GPIO_PIN_SET){
 80023c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c6:	480c      	ldr	r0, [pc, #48]	; (80023f8 <isPressed+0x40>)
 80023c8:	f002 fb64 	bl	8004a94 <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10c      	bne.n	80023ec <isPressed+0x34>
		HAL_Delay(20);
 80023d2:	2014      	movs	r0, #20
 80023d4:	f001 fc9a 	bl	8003d0c <HAL_Delay>
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==GPIO_PIN_SET){
 80023d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023dc:	4806      	ldr	r0, [pc, #24]	; (80023f8 <isPressed+0x40>)
 80023de:	f002 fb59 	bl	8004a94 <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <isPressed+0x34>
			ok = true;
 80023e8:	2301      	movs	r3, #1
 80023ea:	71fb      	strb	r3, [r7, #7]
		}
	}
	return ok;
 80023ec:	79fb      	ldrb	r3, [r7, #7]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40020800 	.word	0x40020800

080023fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	b09a      	sub	sp, #104	; 0x68
 8002400:	af18      	add	r7, sp, #96	; 0x60
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002402:	f001 fc26 	bl	8003c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002406:	f000 fb35 	bl	8002a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800240a:	f000 fd8f 	bl	8002f2c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800240e:	f000 fd2d 	bl	8002e6c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8002412:	f000 fbc7 	bl	8002ba4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8002416:	f000 fc17 	bl	8002c48 <MX_I2C1_Init>
  MX_I2C2_Init();
 800241a:	f000 fc55 	bl	8002cc8 <MX_I2C2_Init>
  MX_SPI1_Init();
 800241e:	f000 fc93 	bl	8002d48 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002422:	f000 fccf 	bl	8002dc4 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8002426:	f000 fd51 	bl	8002ecc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  //---------------Inicializacion de Antena--------------------//
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800242a:	4c3f      	ldr	r4, [pc, #252]	; (8002528 <main+0x12c>)
 800242c:	4668      	mov	r0, sp
 800242e:	1d23      	adds	r3, r4, #4
 8002430:	2260      	movs	r2, #96	; 0x60
 8002432:	4619      	mov	r1, r3
 8002434:	f006 fdf8 	bl	8009028 <memcpy>
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800243e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002442:	483a      	ldr	r0, [pc, #232]	; (800252c <main+0x130>)
 8002444:	f7fe fa5e 	bl	8000904 <NRF24_begin>

  NRF24_stopListening();
 8002448:	f7fe fb3a 	bl	8000ac0 <NRF24_stopListening>
  NRF24_openWritingPipe(DireccionTransmisor);
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <main+0x134>)
 800244e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002452:	4618      	mov	r0, r3
 8002454:	4621      	mov	r1, r4
 8002456:	f7fe fb93 	bl	8000b80 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 800245a:	2001      	movs	r0, #1
 800245c:	f7fe fc7c 	bl	8000d58 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8002460:	2034      	movs	r0, #52	; 0x34
 8002462:	f7fe fbcc 	bl	8000bfe <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8002466:	2020      	movs	r0, #32
 8002468:	f7fe fbde 	bl	8000c28 <NRF24_setPayloadSize>
  NRF24_setDataRate(RF24_250KBPS);
 800246c:	2002      	movs	r0, #2
 800246e:	f7fe fcc1 	bl	8000df4 <NRF24_setDataRate>

  NRF24_enableDynamicPayloads();
 8002472:	f7fe fc27 	bl	8000cc4 <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 8002476:	f7fe fbf7 	bl	8000c68 <NRF24_enableAckPayload>
  //-----------------------------------------------------------//
  //---------------Inicializacion de GPS-----------------------//
  {
	  gpsTx_config.gtm = -4;
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <main+0x138>)
 800247c:	22fc      	movs	r2, #252	; 0xfc
 800247e:	711a      	strb	r2, [r3, #4]
	  gpsTx_config.uart = &huart6;
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <main+0x138>)
 8002482:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <main+0x13c>)
 8002484:	601a      	str	r2, [r3, #0]
  }

  gps_init(&gpsTx, &gpsTx_config);
 8002486:	492b      	ldr	r1, [pc, #172]	; (8002534 <main+0x138>)
 8002488:	482c      	ldr	r0, [pc, #176]	; (800253c <main+0x140>)
 800248a:	f7ff fb83 	bl	8001b94 <gps_init>

  //-----------------------------------------------------------//
  //---------------Inicializacion de LCD-----------------------//
  {
	  lcd_config.addres = 0x27;
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <main+0x144>)
 8002490:	2227      	movs	r2, #39	; 0x27
 8002492:	701a      	strb	r2, [r3, #0]
	  lcd_config.cols = 8;
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <main+0x144>)
 8002496:	2208      	movs	r2, #8
 8002498:	705a      	strb	r2, [r3, #1]
	  lcd_config.rows = 4;
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <main+0x144>)
 800249c:	2204      	movs	r2, #4
 800249e:	709a      	strb	r2, [r3, #2]
	  lcd_config.i2c = &hi2c2;
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <main+0x144>)
 80024a2:	4a28      	ldr	r2, [pc, #160]	; (8002544 <main+0x148>)
 80024a4:	60da      	str	r2, [r3, #12]
	  lcd_config.mode = 1;
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <main+0x144>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	70da      	strb	r2, [r3, #3]
	  lcd_config.timeout = 10;
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <main+0x144>)
 80024ae:	220a      	movs	r2, #10
 80024b0:	609a      	str	r2, [r3, #8]
  }
  if (i2c_lcd_init(&lcd, &lcd_config) == LCD_OK){
 80024b2:	4923      	ldr	r1, [pc, #140]	; (8002540 <main+0x144>)
 80024b4:	4824      	ldr	r0, [pc, #144]	; (8002548 <main+0x14c>)
 80024b6:	f7ff fde3 	bl	8002080 <i2c_lcd_init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <main+0xce>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2101      	movs	r1, #1
 80024c4:	4821      	ldr	r0, [pc, #132]	; (800254c <main+0x150>)
 80024c6:	f002 fafd 	bl	8004ac4 <HAL_GPIO_WritePin>
  }
  //-----------------------------------------------------------//
  //---------------Inicializacion de Accel-----------------------//
  {
  	  accel_config.addres = 0x68;
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <main+0x154>)
 80024cc:	2268      	movs	r2, #104	; 0x68
 80024ce:	701a      	strb	r2, [r3, #0]
  	  accel_config.i2c = &hi2c2;
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <main+0x154>)
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <main+0x148>)
 80024d4:	609a      	str	r2, [r3, #8]
  	  accel_config.accel_range = AFS_SEL_2G;
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <main+0x154>)
 80024d8:	2200      	movs	r2, #0
 80024da:	735a      	strb	r2, [r3, #13]
  	  accel_config.gyro_range = FS_SEL_250;
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <main+0x154>)
 80024de:	2200      	movs	r2, #0
 80024e0:	731a      	strb	r2, [r3, #12]
  	  accel_config.clksel = CLK_PLL_XGYRO;
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <main+0x154>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	739a      	strb	r2, [r3, #14]
  	  accel_config.timeout = 100;
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <main+0x154>)
 80024ea:	2264      	movs	r2, #100	; 0x64
 80024ec:	605a      	str	r2, [r3, #4]
  	  accel_config.offset_pitch = 0;
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <main+0x154>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	821a      	strh	r2, [r3, #16]
  	  accel_config.offset_roll = 0;
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <main+0x154>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	825a      	strh	r2, [r3, #18]
  }

  if(mpu_init(&accel, &accel_config)==MPU_OK){
 80024fa:	4915      	ldr	r1, [pc, #84]	; (8002550 <main+0x154>)
 80024fc:	4815      	ldr	r0, [pc, #84]	; (8002554 <main+0x158>)
 80024fe:	f000 fe95 	bl	800322c <mpu_init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <main+0x116>
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002508:	2201      	movs	r2, #1
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <main+0x150>)
 800250e:	f002 fad9 	bl	8004ac4 <HAL_GPIO_WritePin>
  }
  //-----------------------------------------------------------//

  bmp280_init_default_params(&bmp280.params);
 8002512:	4811      	ldr	r0, [pc, #68]	; (8002558 <main+0x15c>)
 8002514:	f7fe fdd6 	bl	80010c4 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <main+0x160>)
 800251a:	2276      	movs	r2, #118	; 0x76
 800251c:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c2;
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <main+0x160>)
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <main+0x148>)
 8002522:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002524:	e025      	b.n	8002572 <main+0x176>
 8002526:	bf00      	nop
 8002528:	20000580 	.word	0x20000580
 800252c:	40020c00 	.word	0x40020c00
 8002530:	20000000 	.word	0x20000000
 8002534:	20000578 	.word	0x20000578
 8002538:	200004f8 	.word	0x200004f8
 800253c:	20000638 	.word	0x20000638
 8002540:	200005e4 	.word	0x200005e4
 8002544:	2000038c 	.word	0x2000038c
 8002548:	200002ac 	.word	0x200002ac
 800254c:	40020400 	.word	0x40020400
 8002550:	20000298 	.word	0x20000298
 8002554:	200003d8 	.word	0x200003d8
 8002558:	20000620 	.word	0x20000620
 800255c:	200005f4 	.word	0x200005f4
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	2101      	movs	r1, #1
 8002564:	4885      	ldr	r0, [pc, #532]	; (800277c <main+0x380>)
 8002566:	f002 faad 	bl	8004ac4 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800256a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800256e:	f001 fbcd 	bl	8003d0c <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002572:	4983      	ldr	r1, [pc, #524]	; (8002780 <main+0x384>)
 8002574:	4883      	ldr	r0, [pc, #524]	; (8002784 <main+0x388>)
 8002576:	f7fe ff20 	bl	80013ba <bmp280_init>
 800257a:	4603      	mov	r3, r0
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ec      	bne.n	8002560 <main+0x164>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( HAL_GetTick()-lastTimeSend>10){
 8002586:	f001 fbb5 	bl	8003cf4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	4b7e      	ldr	r3, [pc, #504]	; (8002788 <main+0x38c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b0a      	cmp	r3, #10
 8002594:	d941      	bls.n	800261a <main+0x21e>
		  //------------Empaquetando datos-----------//

		  sprintf(message, "%3i,%3.0f,%3.0f,%2.0f,%6.0f,%2.0f,%4.0f,%2.0f", heartRate, angs[Angle_Pitch], angs[Angle_Roll],
 8002596:	4b7d      	ldr	r3, [pc, #500]	; (800278c <main+0x390>)
 8002598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259c:	461a      	mov	r2, r3
 800259e:	4b7c      	ldr	r3, [pc, #496]	; (8002790 <main+0x394>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <main+0x394>)
 80025aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80025ae:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80025b2:	4b78      	ldr	r3, [pc, #480]	; (8002794 <main+0x398>)
 80025b4:	edd3 5a00 	vldr	s11, [r3]
 80025b8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80025bc:	4b76      	ldr	r3, [pc, #472]	; (8002798 <main+0x39c>)
 80025be:	edd3 4a00 	vldr	s9, [r3]
 80025c2:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80025c6:	4b75      	ldr	r3, [pc, #468]	; (800279c <main+0x3a0>)
 80025c8:	edd3 3a00 	vldr	s7, [r3]
 80025cc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80025d0:	4b73      	ldr	r3, [pc, #460]	; (80027a0 <main+0x3a4>)
 80025d2:	edd3 2a00 	vldr	s5, [r3]
 80025d6:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
																		   temperature, pressure, humidity,
																		   altitude, gpsTx.data.velocity);
 80025da:	4b72      	ldr	r3, [pc, #456]	; (80027a4 <main+0x3a8>)
 80025dc:	edd3 1a0d 	vldr	s3, [r3, #52]	; 0x34
		  sprintf(message, "%3i,%3.0f,%3.0f,%2.0f,%6.0f,%2.0f,%4.0f,%2.0f", heartRate, angs[Angle_Pitch], angs[Angle_Roll],
 80025e0:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80025e4:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 80025e8:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 80025ec:	ed8d 3b08 	vstr	d3, [sp, #32]
 80025f0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80025f4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80025f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80025fc:	ed8d 7b00 	vstr	d7, [sp]
 8002600:	4969      	ldr	r1, [pc, #420]	; (80027a8 <main+0x3ac>)
 8002602:	486a      	ldr	r0, [pc, #424]	; (80027ac <main+0x3b0>)
 8002604:	f007 fb3a 	bl	8009c7c <siprintf>
		  NRF24_write(message, 32);
 8002608:	2120      	movs	r1, #32
 800260a:	4868      	ldr	r0, [pc, #416]	; (80027ac <main+0x3b0>)
 800260c:	f7fe fa64 	bl	8000ad8 <NRF24_write>
		  lastTimeSend = HAL_GetTick();
 8002610:	f001 fb70 	bl	8003cf4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <main+0x38c>)
 8002618:	601a      	str	r2, [r3, #0]

		  //-----------------------------------------//
	  }

	  if ( HAL_GetTick()-lastTimeLoop > 100 ){
 800261a:	f001 fb6b 	bl	8003cf4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <main+0x3b4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	f240 8160 	bls.w	80028ec <main+0x4f0>
		  gps_process(&gpsTx);
 800262c:	485d      	ldr	r0, [pc, #372]	; (80027a4 <main+0x3a8>)
 800262e:	f7ff fad1 	bl	8001bd4 <gps_process>

		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002638:	4850      	ldr	r0, [pc, #320]	; (800277c <main+0x380>)
 800263a:	f002 fa43 	bl	8004ac4 <HAL_GPIO_WritePin>

		  //-----Mostrar datos por pantalla LCD------//
		  if (HAL_GetTick()-lastTimeShow > 0 && HAL_GetTick()-lastTimeShow < 10000){
 800263e:	f001 fb59 	bl	8003cf4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	4b5b      	ldr	r3, [pc, #364]	; (80027b4 <main+0x3b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	f000 80c1 	beq.w	80027d0 <main+0x3d4>
 800264e:	f001 fb51 	bl	8003cf4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <main+0x3b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f242 720f 	movw	r2, #9999	; 0x270f
 800265e:	4293      	cmp	r3, r2
 8002660:	f200 80b6 	bhi.w	80027d0 <main+0x3d4>

			  i2c_lcd_setCursor(&lcd, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2100      	movs	r1, #0
 8002668:	4853      	ldr	r0, [pc, #332]	; (80027b8 <main+0x3bc>)
 800266a:	f7ff fe67 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, "%2i:%2i:%2i  A:%4.0f", gpsTx.data.hour, gpsTx.data.min, gpsTx.data.sec, altitude);
 800266e:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <main+0x3a8>)
 8002670:	6959      	ldr	r1, [r3, #20]
 8002672:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <main+0x3a8>)
 8002674:	6998      	ldr	r0, [r3, #24]
 8002676:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <main+0x3a8>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a49      	ldr	r2, [pc, #292]	; (80027a0 <main+0x3a4>)
 800267c:	edd2 7a00 	vldr	s15, [r2]
 8002680:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002684:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	4603      	mov	r3, r0
 800268c:	460a      	mov	r2, r1
 800268e:	494b      	ldr	r1, [pc, #300]	; (80027bc <main+0x3c0>)
 8002690:	4846      	ldr	r0, [pc, #280]	; (80027ac <main+0x3b0>)
 8002692:	f007 faf3 	bl	8009c7c <siprintf>
 8002696:	4603      	mov	r3, r0
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <main+0x3c4>)
 800269c:	701a      	strb	r2, [r3, #0]
			  i2c_lcd_print(&lcd, message, size);
 800269e:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <main+0x3c4>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4941      	ldr	r1, [pc, #260]	; (80027ac <main+0x3b0>)
 80026a6:	4844      	ldr	r0, [pc, #272]	; (80027b8 <main+0x3bc>)
 80026a8:	f7ff fd90 	bl	80021cc <i2c_lcd_print>

			  i2c_lcd_setCursor(&lcd, 0, 1);
 80026ac:	2201      	movs	r2, #1
 80026ae:	2100      	movs	r1, #0
 80026b0:	4841      	ldr	r0, [pc, #260]	; (80027b8 <main+0x3bc>)
 80026b2:	f7ff fe43 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, "Pr:%6.0f Hum:%2.0f", pressure, humidity);
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <main+0x39c>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <main+0x3a0>)
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ca:	ed8d 7b00 	vstr	d7, [sp]
 80026ce:	ec53 2b16 	vmov	r2, r3, d6
 80026d2:	493c      	ldr	r1, [pc, #240]	; (80027c4 <main+0x3c8>)
 80026d4:	4835      	ldr	r0, [pc, #212]	; (80027ac <main+0x3b0>)
 80026d6:	f007 fad1 	bl	8009c7c <siprintf>
 80026da:	4603      	mov	r3, r0
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <main+0x3c4>)
 80026e0:	701a      	strb	r2, [r3, #0]
			  i2c_lcd_print(&lcd, message, size);
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <main+0x3c4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4930      	ldr	r1, [pc, #192]	; (80027ac <main+0x3b0>)
 80026ea:	4833      	ldr	r0, [pc, #204]	; (80027b8 <main+0x3bc>)
 80026ec:	f7ff fd6e 	bl	80021cc <i2c_lcd_print>

			  i2c_lcd_setCursor(&lcd, 0, 2);
 80026f0:	2202      	movs	r2, #2
 80026f2:	2100      	movs	r1, #0
 80026f4:	4830      	ldr	r0, [pc, #192]	; (80027b8 <main+0x3bc>)
 80026f6:	f7ff fe21 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, "Vel:%2.0f  Temp: %2.0f", gpsTx.data.velocity, temperature);
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <main+0x3a8>)
 80026fc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002700:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <main+0x398>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800270e:	ed8d 7b00 	vstr	d7, [sp]
 8002712:	ec53 2b16 	vmov	r2, r3, d6
 8002716:	492c      	ldr	r1, [pc, #176]	; (80027c8 <main+0x3cc>)
 8002718:	4824      	ldr	r0, [pc, #144]	; (80027ac <main+0x3b0>)
 800271a:	f007 faaf 	bl	8009c7c <siprintf>
 800271e:	4603      	mov	r3, r0
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <main+0x3c4>)
 8002724:	701a      	strb	r2, [r3, #0]
			  i2c_lcd_print(&lcd, message, size);
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <main+0x3c4>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	491f      	ldr	r1, [pc, #124]	; (80027ac <main+0x3b0>)
 800272e:	4822      	ldr	r0, [pc, #136]	; (80027b8 <main+0x3bc>)
 8002730:	f7ff fd4c 	bl	80021cc <i2c_lcd_print>

			  i2c_lcd_setCursor(&lcd, 0, 3);
 8002734:	2203      	movs	r2, #3
 8002736:	2100      	movs	r1, #0
 8002738:	481f      	ldr	r0, [pc, #124]	; (80027b8 <main+0x3bc>)
 800273a:	f7ff fdff 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, "  P:%3.0f R:%3.0f   ", angs[Angle_Pitch], angs[Angle_Roll]);
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <main+0x394>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <main+0x394>)
 800274a:	edd3 7a01 	vldr	s15, [r3, #4]
 800274e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002752:	ed8d 7b00 	vstr	d7, [sp]
 8002756:	ec53 2b16 	vmov	r2, r3, d6
 800275a:	491c      	ldr	r1, [pc, #112]	; (80027cc <main+0x3d0>)
 800275c:	4813      	ldr	r0, [pc, #76]	; (80027ac <main+0x3b0>)
 800275e:	f007 fa8d 	bl	8009c7c <siprintf>
 8002762:	4603      	mov	r3, r0
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <main+0x3c4>)
 8002768:	701a      	strb	r2, [r3, #0]
			  i2c_lcd_print(&lcd, message, size);
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <main+0x3c4>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <main+0x3b0>)
 8002772:	4811      	ldr	r0, [pc, #68]	; (80027b8 <main+0x3bc>)
 8002774:	f7ff fd2a 	bl	80021cc <i2c_lcd_print>
 8002778:	e0ad      	b.n	80028d6 <main+0x4da>
 800277a:	bf00      	nop
 800277c:	40020400 	.word	0x40020400
 8002780:	20000620 	.word	0x20000620
 8002784:	200005f4 	.word	0x200005f4
 8002788:	20000284 	.word	0x20000284
 800278c:	2000028a 	.word	0x2000028a
 8002790:	20000628 	.word	0x20000628
 8002794:	200003ec 	.word	0x200003ec
 8002798:	20000454 	.word	0x20000454
 800279c:	20000464 	.word	0x20000464
 80027a0:	200004b0 	.word	0x200004b0
 80027a4:	20000638 	.word	0x20000638
 80027a8:	0800e3c8 	.word	0x0800e3c8
 80027ac:	200003f0 	.word	0x200003f0
 80027b0:	20000278 	.word	0x20000278
 80027b4:	2000027c 	.word	0x2000027c
 80027b8:	200002ac 	.word	0x200002ac
 80027bc:	0800e3f8 	.word	0x0800e3f8
 80027c0:	200004f4 	.word	0x200004f4
 80027c4:	0800e410 	.word	0x0800e410
 80027c8:	0800e424 	.word	0x0800e424
 80027cc:	0800e43c 	.word	0x0800e43c

			  //i2c_lcd_setCursor(&lcd, 0, 3);
			  //size = sprintf(message, "Lon:%f", gpsTx.data.longitudDec);
			  //i2c_lcd_print(&lcd, message, size);
		  }
		  else if (HAL_GetTick()-lastTimeShow > 10000 && HAL_GetTick()-lastTimeShow < 15000){
 80027d0:	f001 fa90 	bl	8003cf4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <main+0x610>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d973      	bls.n	80028cc <main+0x4d0>
 80027e4:	f001 fa86 	bl	8003cf4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <main+0x610>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f643 2297 	movw	r2, #14999	; 0x3a97
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d869      	bhi.n	80028cc <main+0x4d0>
			  i2c_lcd_setCursor(&lcd, 0, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	4884      	ldr	r0, [pc, #528]	; (8002a10 <main+0x614>)
 80027fe:	f7ff fd9d 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, " %2d - %2d - %4d ", gpsTx.data.day, gpsTx.data.month, gpsTx.data.year);
 8002802:	4b84      	ldr	r3, [pc, #528]	; (8002a14 <main+0x618>)
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b83      	ldr	r3, [pc, #524]	; (8002a14 <main+0x618>)
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <main+0x618>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	4981      	ldr	r1, [pc, #516]	; (8002a18 <main+0x61c>)
 8002814:	4881      	ldr	r0, [pc, #516]	; (8002a1c <main+0x620>)
 8002816:	f007 fa31 	bl	8009c7c <siprintf>
 800281a:	4603      	mov	r3, r0
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b80      	ldr	r3, [pc, #512]	; (8002a20 <main+0x624>)
 8002820:	701a      	strb	r2, [r3, #0]

			  i2c_lcd_print(&lcd, message, size);
 8002822:	4b7f      	ldr	r3, [pc, #508]	; (8002a20 <main+0x624>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	497c      	ldr	r1, [pc, #496]	; (8002a1c <main+0x620>)
 800282a:	4879      	ldr	r0, [pc, #484]	; (8002a10 <main+0x614>)
 800282c:	f7ff fcce 	bl	80021cc <i2c_lcd_print>

			  i2c_lcd_setCursor(&lcd, 0, 1);
 8002830:	2201      	movs	r2, #1
 8002832:	2100      	movs	r1, #0
 8002834:	4876      	ldr	r0, [pc, #472]	; (8002a10 <main+0x614>)
 8002836:	f7ff fd81 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, "                ");
 800283a:	4a78      	ldr	r2, [pc, #480]	; (8002a1c <main+0x620>)
 800283c:	4b79      	ldr	r3, [pc, #484]	; (8002a24 <main+0x628>)
 800283e:	4615      	mov	r5, r2
 8002840:	461c      	mov	r4, r3
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	6028      	str	r0, [r5, #0]
 8002846:	6069      	str	r1, [r5, #4]
 8002848:	60aa      	str	r2, [r5, #8]
 800284a:	60eb      	str	r3, [r5, #12]
 800284c:	7823      	ldrb	r3, [r4, #0]
 800284e:	742b      	strb	r3, [r5, #16]
 8002850:	2310      	movs	r3, #16
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <main+0x624>)
 8002856:	701a      	strb	r2, [r3, #0]
			  i2c_lcd_print(&lcd, message, size);
 8002858:	4b71      	ldr	r3, [pc, #452]	; (8002a20 <main+0x624>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	496f      	ldr	r1, [pc, #444]	; (8002a1c <main+0x620>)
 8002860:	486b      	ldr	r0, [pc, #428]	; (8002a10 <main+0x614>)
 8002862:	f7ff fcb3 	bl	80021cc <i2c_lcd_print>

			  i2c_lcd_setCursor(&lcd, 0, 2);
 8002866:	2202      	movs	r2, #2
 8002868:	2100      	movs	r1, #0
 800286a:	4869      	ldr	r0, [pc, #420]	; (8002a10 <main+0x614>)
 800286c:	f7ff fd66 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, "%3.12f", gpsTx.data.latitudDec);
 8002870:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <main+0x618>)
 8002872:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8002876:	461a      	mov	r2, r3
 8002878:	4623      	mov	r3, r4
 800287a:	496b      	ldr	r1, [pc, #428]	; (8002a28 <main+0x62c>)
 800287c:	4867      	ldr	r0, [pc, #412]	; (8002a1c <main+0x620>)
 800287e:	f007 f9fd 	bl	8009c7c <siprintf>
 8002882:	4603      	mov	r3, r0
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b66      	ldr	r3, [pc, #408]	; (8002a20 <main+0x624>)
 8002888:	701a      	strb	r2, [r3, #0]
			  i2c_lcd_print(&lcd, message, size);
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <main+0x624>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4962      	ldr	r1, [pc, #392]	; (8002a1c <main+0x620>)
 8002892:	485f      	ldr	r0, [pc, #380]	; (8002a10 <main+0x614>)
 8002894:	f7ff fc9a 	bl	80021cc <i2c_lcd_print>

			  i2c_lcd_setCursor(&lcd, 0, 3);
 8002898:	2203      	movs	r2, #3
 800289a:	2100      	movs	r1, #0
 800289c:	485c      	ldr	r0, [pc, #368]	; (8002a10 <main+0x614>)
 800289e:	f7ff fd4d 	bl	800233c <i2c_lcd_setCursor>
			  size = sprintf(message, "%3.12f", gpsTx.data.longitudDec);
 80028a2:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <main+0x618>)
 80028a4:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80028a8:	461a      	mov	r2, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	495e      	ldr	r1, [pc, #376]	; (8002a28 <main+0x62c>)
 80028ae:	485b      	ldr	r0, [pc, #364]	; (8002a1c <main+0x620>)
 80028b0:	f007 f9e4 	bl	8009c7c <siprintf>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <main+0x624>)
 80028ba:	701a      	strb	r2, [r3, #0]
			  i2c_lcd_print(&lcd, message, size);
 80028bc:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <main+0x624>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4956      	ldr	r1, [pc, #344]	; (8002a1c <main+0x620>)
 80028c4:	4852      	ldr	r0, [pc, #328]	; (8002a10 <main+0x614>)
 80028c6:	f7ff fc81 	bl	80021cc <i2c_lcd_print>
 80028ca:	e004      	b.n	80028d6 <main+0x4da>
		  }
		  else{
			  lastTimeShow = HAL_GetTick();
 80028cc:	f001 fa12 	bl	8003cf4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <main+0x610>)
 80028d4:	601a      	str	r2, [r3, #0]
		  }
		  //-----------------------------------------//


		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028dc:	4853      	ldr	r0, [pc, #332]	; (8002a2c <main+0x630>)
 80028de:	f002 f8f1 	bl	8004ac4 <HAL_GPIO_WritePin>

		  lastTimeLoop = HAL_GetTick();
 80028e2:	f001 fa07 	bl	8003cf4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <main+0x634>)
 80028ea:	601a      	str	r2, [r3, #0]

	  }

	  if(isPressed()){
 80028ec:	f7ff fd64 	bl	80023b8 <isPressed>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d02e      	beq.n	8002954 <main+0x558>
		  uint32_t lastTime = HAL_GetTick();
 80028f6:	f001 f9fd 	bl	8003cf4 <HAL_GetTick>
 80028fa:	6078      	str	r0, [r7, #4]
		  while(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==GPIO_PIN_SET);
 80028fc:	bf00      	nop
 80028fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002902:	484c      	ldr	r0, [pc, #304]	; (8002a34 <main+0x638>)
 8002904:	f002 f8c6 	bl	8004a94 <HAL_GPIO_ReadPin>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d0f7      	beq.n	80028fe <main+0x502>
		  if (HAL_GetTick()-lastTime < 1000 ){
 800290e:	f001 f9f1 	bl	8003cf4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291c:	d214      	bcs.n	8002948 <main+0x54c>
			  accel.config.offset_pitch = angs[Angle_Pitch];
 800291e:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <main+0x63c>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002928:	ee17 3a90 	vmov	r3, s15
 800292c:	b21a      	sxth	r2, r3
 800292e:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <main+0x640>)
 8002930:	821a      	strh	r2, [r3, #16]
			  accel.config.offset_roll = angs[Angle_Roll];
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <main+0x63c>)
 8002934:	edd3 7a01 	vldr	s15, [r3, #4]
 8002938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293c:	ee17 3a90 	vmov	r3, s15
 8002940:	b21a      	sxth	r2, r3
 8002942:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <main+0x640>)
 8002944:	825a      	strh	r2, [r3, #18]
 8002946:	e005      	b.n	8002954 <main+0x558>
		  }
		  else{
			  accel.config.offset_pitch = 0;
 8002948:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <main+0x640>)
 800294a:	2200      	movs	r2, #0
 800294c:	821a      	strh	r2, [r3, #16]
			  accel.config.offset_roll = 0;
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <main+0x640>)
 8002950:	2200      	movs	r2, #0
 8002952:	825a      	strh	r2, [r3, #18]
		  }
	  }

	  if ( HAL_GetTick()-lastTimeHeart > 1 ){
 8002954:	f001 f9ce 	bl	8003cf4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <main+0x644>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	f67f ae10 	bls.w	8002586 <main+0x18a>
		  mpu_get_angles(&accel, lastAngs, angs, (HAL_GetTick()-lastTimeHeart)/1000);
 8002966:	f001 f9c5 	bl	8003cf4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <main+0x644>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <main+0x648>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	eeb0 0a67 	vmov.f32	s0, s15
 8002986:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <main+0x63c>)
 8002988:	492f      	ldr	r1, [pc, #188]	; (8002a48 <main+0x64c>)
 800298a:	482c      	ldr	r0, [pc, #176]	; (8002a3c <main+0x640>)
 800298c:	f000 fda0 	bl	80034d0 <mpu_get_angles>
		  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <main+0x650>)
 8002992:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <main+0x654>)
 8002994:	492f      	ldr	r1, [pc, #188]	; (8002a54 <main+0x658>)
 8002996:	4830      	ldr	r0, [pc, #192]	; (8002a58 <main+0x65c>)
 8002998:	f7ff f864 	bl	8001a64 <bmp280_read_float>
		  altitude = readAltitude(SEALEVELPRESSURE_HPA, pressure);
 800299c:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <main+0x654>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eef0 0a67 	vmov.f32	s1, s15
 80029a6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8002a5c <main+0x660>
 80029aa:	f7fe fb51 	bl	8001050 <readAltitude>
 80029ae:	eef0 7a40 	vmov.f32	s15, s0
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <main+0x664>)
 80029b4:	edc3 7a00 	vstr	s15, [r3]
		  HAL_ADC_Start(&hadc3);
 80029b8:	482a      	ldr	r0, [pc, #168]	; (8002a64 <main+0x668>)
 80029ba:	f001 fa0d 	bl	8003dd8 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK){
 80029be:	210a      	movs	r1, #10
 80029c0:	4828      	ldr	r0, [pc, #160]	; (8002a64 <main+0x668>)
 80029c2:	f001 fac9 	bl	8003f58 <HAL_ADC_PollForConversion>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d119      	bne.n	8002a00 <main+0x604>
			  heart = HAL_ADC_GetValue(&hadc3);
 80029cc:	4825      	ldr	r0, [pc, #148]	; (8002a64 <main+0x668>)
 80029ce:	f001 fb47 	bl	8004060 <HAL_ADC_GetValue>
 80029d2:	4603      	mov	r3, r0
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <main+0x66c>)
 80029d8:	801a      	strh	r2, [r3, #0]
		      size = sprintf(message, "%i\r\n", heart);
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <main+0x66c>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	4922      	ldr	r1, [pc, #136]	; (8002a6c <main+0x670>)
 80029e2:	480e      	ldr	r0, [pc, #56]	; (8002a1c <main+0x620>)
 80029e4:	f007 f94a 	bl	8009c7c <siprintf>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <main+0x624>)
 80029ee:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart3, message, size, 100);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <main+0x624>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	2364      	movs	r3, #100	; 0x64
 80029f8:	4908      	ldr	r1, [pc, #32]	; (8002a1c <main+0x620>)
 80029fa:	481d      	ldr	r0, [pc, #116]	; (8002a70 <main+0x674>)
 80029fc:	f005 fbd4 	bl	80081a8 <HAL_UART_Transmit>
		  }
		  lastTimeHeart = HAL_GetTick();
 8002a00:	f001 f978 	bl	8003cf4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <main+0x644>)
 8002a08:	601a      	str	r2, [r3, #0]
	  if( HAL_GetTick()-lastTimeSend>10){
 8002a0a:	e5bc      	b.n	8002586 <main+0x18a>
 8002a0c:	2000027c 	.word	0x2000027c
 8002a10:	200002ac 	.word	0x200002ac
 8002a14:	20000638 	.word	0x20000638
 8002a18:	0800e454 	.word	0x0800e454
 8002a1c:	200003f0 	.word	0x200003f0
 8002a20:	200004f4 	.word	0x200004f4
 8002a24:	0800e468 	.word	0x0800e468
 8002a28:	0800e47c 	.word	0x0800e47c
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	20000278 	.word	0x20000278
 8002a34:	40020800 	.word	0x40020800
 8002a38:	20000628 	.word	0x20000628
 8002a3c:	200003d8 	.word	0x200003d8
 8002a40:	20000280 	.word	0x20000280
 8002a44:	10624dd3 	.word	0x10624dd3
 8002a48:	20000458 	.word	0x20000458
 8002a4c:	20000464 	.word	0x20000464
 8002a50:	20000454 	.word	0x20000454
 8002a54:	200003ec 	.word	0x200003ec
 8002a58:	200005f4 	.word	0x200005f4
 8002a5c:	447d5000 	.word	0x447d5000
 8002a60:	200004b0 	.word	0x200004b0
 8002a64:	20000468 	.word	0x20000468
 8002a68:	20000288 	.word	0x20000288
 8002a6c:	0800e484 	.word	0x0800e484
 8002a70:	200002c0 	.word	0x200002c0

08002a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b0b8      	sub	sp, #224	; 0xe0
 8002a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a7e:	2234      	movs	r2, #52	; 0x34
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f006 fadb 	bl	800903e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a88:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	2290      	movs	r2, #144	; 0x90
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f006 facc 	bl	800903e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002aa6:	f003 f8f7 	bl	8005c98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <SystemClock_Config+0x128>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a3b      	ldr	r2, [pc, #236]	; (8002b9c <SystemClock_Config+0x128>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <SystemClock_Config+0x128>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <SystemClock_Config+0x12c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002aca:	4a35      	ldr	r2, [pc, #212]	; (8002ba0 <SystemClock_Config+0x12c>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <SystemClock_Config+0x12c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ae4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002afa:	2304      	movs	r3, #4
 8002afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002b00:	2360      	movs	r3, #96	; 0x60
 8002b02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 f91e 	bl	8005d58 <HAL_RCC_OscConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002b22:	f000 fb2b 	bl	800317c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b26:	f003 f8c7 	bl	8005cb8 <HAL_PWREx_EnableOverDrive>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b30:	f000 fb24 	bl	800317c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b34:	230f      	movs	r3, #15
 8002b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b58:	2103      	movs	r1, #3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fb6e 	bl	800623c <HAL_RCC_ClockConfig>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002b66:	f000 fb09 	bl	800317c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 8002b6a:	f44f 4349 	mov.w	r3, #51456	; 0xc900
 8002b6e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002b74:	2300      	movs	r3, #0
 8002b76:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b80:	f107 0308 	add.w	r3, r7, #8
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fd4d 	bl	8006624 <HAL_RCCEx_PeriphCLKConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002b90:	f000 faf4 	bl	800317c <Error_Handler>
  }
}
 8002b94:	bf00      	nop
 8002b96:	37e0      	adds	r7, #224	; 0xe0
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000

08002ba4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002baa:	463b      	mov	r3, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <MX_ADC3_Init+0x9c>)
 8002bba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002be4:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <MX_ADC3_Init+0xa0>)
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002c04:	480d      	ldr	r0, [pc, #52]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002c06:	f001 f8a3 	bl	8003d50 <HAL_ADC_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002c10:	f000 fab4 	bl	800317c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c14:	2308      	movs	r3, #8
 8002c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c20:	463b      	mov	r3, r7
 8002c22:	4619      	mov	r1, r3
 8002c24:	4805      	ldr	r0, [pc, #20]	; (8002c3c <MX_ADC3_Init+0x98>)
 8002c26:	f001 fa29 	bl	800407c <HAL_ADC_ConfigChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002c30:	f000 faa4 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000468 	.word	0x20000468
 8002c40:	40012200 	.word	0x40012200
 8002c44:	0f000001 	.word	0x0f000001

08002c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <MX_I2C1_Init+0x78>)
 8002c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <MX_I2C1_Init+0x7c>)
 8002c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c82:	480e      	ldr	r0, [pc, #56]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c84:	f001 ff38 	bl	8004af8 <HAL_I2C_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c8e:	f000 fa75 	bl	800317c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c92:	2100      	movs	r1, #0
 8002c94:	4809      	ldr	r0, [pc, #36]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002c96:	f002 ff67 	bl	8005b68 <HAL_I2CEx_ConfigAnalogFilter>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ca0:	f000 fa6c 	bl	800317c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <MX_I2C1_Init+0x74>)
 8002ca8:	f002 ffa9 	bl	8005bfe <HAL_I2CEx_ConfigDigitalFilter>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cb2:	f000 fa63 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000340 	.word	0x20000340
 8002cc0:	40005400 	.word	0x40005400
 8002cc4:	2010091a 	.word	0x2010091a

08002cc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <MX_I2C2_Init+0x78>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <MX_I2C2_Init+0x7c>)
 8002cd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002cd8:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d02:	480e      	ldr	r0, [pc, #56]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002d04:	f001 fef8 	bl	8004af8 <HAL_I2C_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002d0e:	f000 fa35 	bl	800317c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d12:	2100      	movs	r1, #0
 8002d14:	4809      	ldr	r0, [pc, #36]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002d16:	f002 ff27 	bl	8005b68 <HAL_I2CEx_ConfigAnalogFilter>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002d20:	f000 fa2c 	bl	800317c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d24:	2100      	movs	r1, #0
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_I2C2_Init+0x74>)
 8002d28:	f002 ff69 	bl	8005bfe <HAL_I2CEx_ConfigDigitalFilter>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002d32:	f000 fa23 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000038c 	.word	0x2000038c
 8002d40:	40005800 	.word	0x40005800
 8002d44:	2010091a 	.word	0x2010091a

08002d48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <MX_SPI1_Init+0x78>)
 8002d50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d7e:	2218      	movs	r2, #24
 8002d80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d96:	2207      	movs	r2, #7
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002da2:	2208      	movs	r2, #8
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <MX_SPI1_Init+0x74>)
 8002da8:	f004 f862 	bl	8006e70 <HAL_SPI_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002db2:	f000 f9e3 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000580 	.word	0x20000580
 8002dc0:	40013000 	.word	0x40013000

08002dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002de4:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <MX_TIM1_Init+0xa4>)
 8002de6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002dea:	225f      	movs	r2, #95	; 0x5f
 8002dec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002df6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002dfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e0e:	4815      	ldr	r0, [pc, #84]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002e10:	f004 fed6 	bl	8007bc0 <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002e1a:	f000 f9af 	bl	800317c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480e      	ldr	r0, [pc, #56]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002e2c:	f004 ff1e 	bl	8007c6c <HAL_TIM_ConfigClockSource>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002e36:	f000 f9a1 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4806      	ldr	r0, [pc, #24]	; (8002e64 <MX_TIM1_Init+0xa0>)
 8002e4c:	f005 f902 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e56:	f000 f991 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200004b4 	.word	0x200004b4
 8002e68:	40010000 	.word	0x40010000

08002e6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e72:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <MX_USART3_UART_Init+0x5c>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_USART3_UART_Init+0x58>)
 8002eb0:	f005 f92c 	bl	800810c <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002eba:	f000 f95f 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200002c0 	.word	0x200002c0
 8002ec8:	40004800 	.word	0x40004800

08002ecc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <MX_USART6_UART_Init+0x5c>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_USART6_UART_Init+0x58>)
 8002f10:	f005 f8fc 	bl	800810c <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002f1a:	f000 f92f 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200004f8 	.word	0x200004f8
 8002f28:	40011400 	.word	0x40011400

08002f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f42:	4b87      	ldr	r3, [pc, #540]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a86      	ldr	r2, [pc, #536]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b84      	ldr	r3, [pc, #528]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f5a:	4b81      	ldr	r3, [pc, #516]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a80      	ldr	r2, [pc, #512]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f60:	f043 0320 	orr.w	r3, r3, #32
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b7e      	ldr	r3, [pc, #504]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f72:	4b7b      	ldr	r3, [pc, #492]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a7a      	ldr	r2, [pc, #488]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b78      	ldr	r3, [pc, #480]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8a:	4b75      	ldr	r3, [pc, #468]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a74      	ldr	r2, [pc, #464]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b72      	ldr	r3, [pc, #456]	; (8003160 <MX_GPIO_Init+0x234>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	4b6f      	ldr	r3, [pc, #444]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a6e      	ldr	r2, [pc, #440]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b6c      	ldr	r3, [pc, #432]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fba:	4b69      	ldr	r3, [pc, #420]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a68      	ldr	r2, [pc, #416]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fc0:	f043 0308 	orr.w	r3, r3, #8
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a62      	ldr	r2, [pc, #392]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b60      	ldr	r3, [pc, #384]	; (8003160 <MX_GPIO_Init+0x234>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f244 0181 	movw	r1, #16513	; 0x4081
 8002ff0:	485c      	ldr	r0, [pc, #368]	; (8003164 <MX_GPIO_Init+0x238>)
 8002ff2:	f001 fd67 	bl	8004ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002ffc:	485a      	ldr	r0, [pc, #360]	; (8003168 <MX_GPIO_Init+0x23c>)
 8002ffe:	f001 fd61 	bl	8004ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003002:	2200      	movs	r2, #0
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	4859      	ldr	r0, [pc, #356]	; (800316c <MX_GPIO_Init+0x240>)
 8003008:	f001 fd5c 	bl	8004ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800300c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003012:	4b57      	ldr	r3, [pc, #348]	; (8003170 <MX_GPIO_Init+0x244>)
 8003014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	4619      	mov	r1, r3
 8003020:	4854      	ldr	r0, [pc, #336]	; (8003174 <MX_GPIO_Init+0x248>)
 8003022:	f001 fb8d 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003026:	2332      	movs	r3, #50	; 0x32
 8003028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003032:	2303      	movs	r3, #3
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003036:	230b      	movs	r3, #11
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4619      	mov	r1, r3
 8003040:	484c      	ldr	r0, [pc, #304]	; (8003174 <MX_GPIO_Init+0x248>)
 8003042:	f001 fb7d 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8003046:	2306      	movs	r3, #6
 8003048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003056:	230b      	movs	r3, #11
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	4619      	mov	r1, r3
 8003060:	4845      	ldr	r0, [pc, #276]	; (8003178 <MX_GPIO_Init+0x24c>)
 8003062:	f001 fb6d 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003066:	f244 0381 	movw	r3, #16513	; 0x4081
 800306a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306c:	2301      	movs	r3, #1
 800306e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	2300      	movs	r3, #0
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	4619      	mov	r1, r3
 800307e:	4839      	ldr	r0, [pc, #228]	; (8003164 <MX_GPIO_Init+0x238>)
 8003080:	f001 fb5e 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308a:	2302      	movs	r3, #2
 800308c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003092:	2303      	movs	r3, #3
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003096:	230b      	movs	r3, #11
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	4830      	ldr	r0, [pc, #192]	; (8003164 <MX_GPIO_Init+0x238>)
 80030a2:	f001 fb4d 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80030a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80030aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ac:	2301      	movs	r3, #1
 80030ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	4619      	mov	r1, r3
 80030be:	482a      	ldr	r0, [pc, #168]	; (8003168 <MX_GPIO_Init+0x23c>)
 80030c0:	f001 fb3e 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	4824      	ldr	r0, [pc, #144]	; (800316c <MX_GPIO_Init+0x240>)
 80030dc:	f001 fb30 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e4:	2300      	movs	r3, #0
 80030e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	4619      	mov	r1, r3
 80030f2:	481e      	ldr	r0, [pc, #120]	; (800316c <MX_GPIO_Init+0x240>)
 80030f4:	f001 fb24 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80030f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80030fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800310a:	230a      	movs	r3, #10
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	f107 031c 	add.w	r3, r7, #28
 8003112:	4619      	mov	r1, r3
 8003114:	4818      	ldr	r0, [pc, #96]	; (8003178 <MX_GPIO_Init+0x24c>)
 8003116:	f001 fb13 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800311a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800311e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	4812      	ldr	r0, [pc, #72]	; (8003178 <MX_GPIO_Init+0x24c>)
 8003130:	f001 fb06 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003134:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003146:	230b      	movs	r3, #11
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800314a:	f107 031c 	add.w	r3, r7, #28
 800314e:	4619      	mov	r1, r3
 8003150:	4806      	ldr	r0, [pc, #24]	; (800316c <MX_GPIO_Init+0x240>)
 8003152:	f001 faf5 	bl	8004740 <HAL_GPIO_Init>

}
 8003156:	bf00      	nop
 8003158:	3730      	adds	r7, #48	; 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40020400 	.word	0x40020400
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40021800 	.word	0x40021800
 8003170:	10110000 	.word	0x10110000
 8003174:	40020800 	.word	0x40020800
 8003178:	40020000 	.word	0x40020000

0800317c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <mpu_read_register>:
#include "mpu6050.h"

//-----------------------Functions read and write registers-------------------

static uint16_t mpu_read_register(mpu* dev, MPU_REGISTER reg){
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af02      	add	r7, sp, #8
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	70fb      	strb	r3, [r7, #3]

	uint8_t buffer[1];
	buffer[0] = reg;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, buffer, 1, dev->config.timeout);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6898      	ldr	r0, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	b299      	uxth	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f107 020c 	add.w	r2, r7, #12
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	f001 fd30 	bl	8004c18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->config.i2c, (dev->config.addres)<<1, buffer, 1, dev->config.timeout);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6898      	ldr	r0, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	b299      	uxth	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f107 020c 	add.w	r2, r7, #12
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2301      	movs	r3, #1
 80031d2:	f001 fe15 	bl	8004e00 <HAL_I2C_Master_Receive>
	return buffer[0];
 80031d6:	7b3b      	ldrb	r3, [r7, #12]
 80031d8:	b29b      	uxth	r3, r3

}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <mpu_write_register>:

static MPU_RESULT mpu_write_register(mpu* dev, MPU_REGISTER reg, uint8_t data){
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af02      	add	r7, sp, #8
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
 80031ee:	4613      	mov	r3, r2
 80031f0:	70bb      	strb	r3, [r7, #2]

	uint8_t buffer[2];
	buffer[0] = reg;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 80031f6:	78bb      	ldrb	r3, [r7, #2]
 80031f8:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, buffer, 2, dev->config.timeout)==HAL_OK){
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6898      	ldr	r0, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	b299      	uxth	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f107 020c 	add.w	r2, r7, #12
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2302      	movs	r3, #2
 8003214:	f001 fd00 	bl	8004c18 <HAL_I2C_Master_Transmit>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <mpu_write_register+0x40>
		return MPU_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <mpu_write_register+0x42>
	}
	else{
		return MPU_ERROR;
 8003222:	2301      	movs	r3, #1
	}

}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <mpu_init>:

//----------------------------------------------------------------------------

MPU_RESULT mpu_init(mpu* dev, mpu_config* config){
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	dev->config = *config;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4614      	mov	r4, r2
 800323c:	461d      	mov	r5, r3
 800323e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003242:	682b      	ldr	r3, [r5, #0]
 8003244:	6023      	str	r3, [r4, #0]
	if (HAL_I2C_IsDeviceReady(dev->config.i2c, dev->config.addres<<1, 10, dev->config.timeout)==HAL_OK){
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6898      	ldr	r0, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	b299      	uxth	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	220a      	movs	r2, #10
 800325a:	f002 f8f5 	bl	8005448 <HAL_I2C_IsDeviceReady>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d117      	bne.n	8003294 <mpu_init+0x68>
		mpu_set_clksel(dev, dev->config.clksel);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7b9b      	ldrb	r3, [r3, #14]
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f880 	bl	8003370 <mpu_set_clksel>
		mpu_set_gyro_range(dev, dev->config.gyro_range);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7b1b      	ldrb	r3, [r3, #12]
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f834 	bl	80032e4 <mpu_set_gyro_range>
		mpu_set_accel_range(dev, dev->config.accel_range);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7b5b      	ldrb	r3, [r3, #13]
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f851 	bl	800332a <mpu_set_accel_range>
		mpu_sleep(dev, false);
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f807 	bl	800329e <mpu_sleep>
		return MPU_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <mpu_init+0x6a>
	}
	return MPU_ERROR;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bdb0      	pop	{r4, r5, r7, pc}

0800329e <mpu_sleep>:

MPU_RESULT mpu_sleep(mpu* dev, bool state){
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	70fb      	strb	r3, [r7, #3]
	uint8_t value = mpu_read_register(dev, PWR_MGMT_1);
 80032aa:	216b      	movs	r1, #107	; 0x6b
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff6c 	bl	800318a <mpu_read_register>
 80032b2:	4603      	mov	r3, r0
 80032b4:	73fb      	strb	r3, [r7, #15]
	if (state){
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <mpu_sleep+0x28>
		value |= (1<<6);
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e003      	b.n	80032ce <mpu_sleep+0x30>
	}
	else{
		value &= ~(1<<6);
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032cc:	73fb      	strb	r3, [r7, #15]
	}
	return mpu_write_register(dev, PWR_MGMT_1, value);
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	461a      	mov	r2, r3
 80032d2:	216b      	movs	r1, #107	; 0x6b
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ff84 	bl	80031e2 <mpu_write_register>
 80032da:	4603      	mov	r3, r0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <mpu_set_gyro_range>:

MPU_RESULT mpu_set_gyro_range(mpu* dev, MPU_GYRO_RANGE range){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
	uint8_t value = mpu_read_register(dev, GYRO_CONFIG);
 80032f0:	211b      	movs	r1, #27
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff49 	bl	800318a <mpu_read_register>
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]
	value &= ~(0x03<<3);
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	f023 0318 	bic.w	r3, r3, #24
 8003302:	73fb      	strb	r3, [r7, #15]
	value |= (range<<3);
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	b25a      	sxtb	r2, r3
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4313      	orrs	r3, r2
 8003310:	b25b      	sxtb	r3, r3
 8003312:	73fb      	strb	r3, [r7, #15]
	return mpu_write_register(dev, GYRO_CONFIG, value);
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	461a      	mov	r2, r3
 8003318:	211b      	movs	r1, #27
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff61 	bl	80031e2 <mpu_write_register>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <mpu_set_accel_range>:

MPU_RESULT mpu_set_accel_range(mpu* dev, MPU_ACCEL_RANGE range){
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
	uint8_t value = mpu_read_register(dev, ACCEL_CONFIG);
 8003336:	211c      	movs	r1, #28
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff26 	bl	800318a <mpu_read_register>
 800333e:	4603      	mov	r3, r0
 8003340:	73fb      	strb	r3, [r7, #15]
	value &= ~(0x03<<3);
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	f023 0318 	bic.w	r3, r3, #24
 8003348:	73fb      	strb	r3, [r7, #15]
	value |= (range<<3);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	b25a      	sxtb	r2, r3
 8003350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003354:	4313      	orrs	r3, r2
 8003356:	b25b      	sxtb	r3, r3
 8003358:	73fb      	strb	r3, [r7, #15]
	return mpu_write_register(dev, ACCEL_CONFIG, value);
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	461a      	mov	r2, r3
 800335e:	211c      	movs	r1, #28
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff3e 	bl	80031e2 <mpu_write_register>
 8003366:	4603      	mov	r3, r0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <mpu_set_clksel>:

MPU_RESULT mpu_set_clksel(mpu* dev, MPU_CLKSEL clk){
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
	uint8_t value = mpu_read_register(dev, PWR_MGMT_1);
 800337c:	216b      	movs	r1, #107	; 0x6b
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff03 	bl	800318a <mpu_read_register>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]
	value &= ~(0x07);
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	f023 0307 	bic.w	r3, r3, #7
 800338e:	73fb      	strb	r3, [r7, #15]
	value |= (clk);
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	4313      	orrs	r3, r2
 8003396:	73fb      	strb	r3, [r7, #15]
	return mpu_write_register(dev, PWR_MGMT_1, value);
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	461a      	mov	r2, r3
 800339c:	216b      	movs	r1, #107	; 0x6b
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff1f 	bl	80031e2 <mpu_write_register>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <mpu_get_gyro>:

MPU_RESULT mpu_get_gyro(mpu* dev, int16_t* x, int16_t *y, int16_t *z){
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b088      	sub	sp, #32
 80033b2:	af02      	add	r7, sp, #8
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
	uint8_t buffer[6];
	buffer[0] = GYRO_XOUT_H;
 80033bc:	2343      	movs	r3, #67	; 0x43
 80033be:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, buffer, 1, dev->config.timeout);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6898      	ldr	r0, [r3, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	b299      	uxth	r1, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f107 0210 	add.w	r2, r7, #16
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2301      	movs	r3, #1
 80033da:	f001 fc1d 	bl	8004c18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->config.i2c, (dev->config.addres)<<1, buffer, 6, dev->config.timeout);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6898      	ldr	r0, [r3, #8]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	b299      	uxth	r1, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f107 0210 	add.w	r2, r7, #16
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2306      	movs	r3, #6
 80033f8:	f001 fd02 	bl	8004e00 <HAL_I2C_Master_Receive>
	*x = (((int16_t)buffer[0])<<8) | buffer[1];
 80033fc:	7c3b      	ldrb	r3, [r7, #16]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	b21a      	sxth	r2, r3
 8003402:	7c7b      	ldrb	r3, [r7, #17]
 8003404:	b21b      	sxth	r3, r3
 8003406:	4313      	orrs	r3, r2
 8003408:	b21a      	sxth	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)buffer[2])<<8) | buffer[3];
 800340e:	7cbb      	ldrb	r3, [r7, #18]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	b21a      	sxth	r2, r3
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	b21b      	sxth	r3, r3
 8003418:	4313      	orrs	r3, r2
 800341a:	b21a      	sxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)buffer[4])<<8) | buffer[5];
 8003420:	7d3b      	ldrb	r3, [r7, #20]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	b21a      	sxth	r2, r3
 8003426:	7d7b      	ldrb	r3, [r7, #21]
 8003428:	b21b      	sxth	r3, r3
 800342a:	4313      	orrs	r3, r2
 800342c:	b21a      	sxth	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	801a      	strh	r2, [r3, #0]
	return MPU_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <mpu_get_accel>:

MPU_RESULT mpu_get_accel(mpu* dev, int16_t* x, int16_t *y, int16_t *z){
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
	uint8_t buffer[6];
	buffer[0] = ACCEL_XOUT_H;
 800344a:	233b      	movs	r3, #59	; 0x3b
 800344c:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, buffer, 1, dev->config.timeout);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6898      	ldr	r0, [r3, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	b299      	uxth	r1, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f107 0210 	add.w	r2, r7, #16
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2301      	movs	r3, #1
 8003468:	f001 fbd6 	bl	8004c18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->config.i2c, (dev->config.addres)<<1, buffer, 6, dev->config.timeout);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6898      	ldr	r0, [r3, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	b299      	uxth	r1, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f107 0210 	add.w	r2, r7, #16
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2306      	movs	r3, #6
 8003486:	f001 fcbb 	bl	8004e00 <HAL_I2C_Master_Receive>
	*x = (((int16_t)buffer[0])<<8) | buffer[1];
 800348a:	7c3b      	ldrb	r3, [r7, #16]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	b21a      	sxth	r2, r3
 8003490:	7c7b      	ldrb	r3, [r7, #17]
 8003492:	b21b      	sxth	r3, r3
 8003494:	4313      	orrs	r3, r2
 8003496:	b21a      	sxth	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)buffer[2])<<8) | buffer[3];
 800349c:	7cbb      	ldrb	r3, [r7, #18]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	4313      	orrs	r3, r2
 80034a8:	b21a      	sxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)buffer[4])<<8) | buffer[5];
 80034ae:	7d3b      	ldrb	r3, [r7, #20]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	b21a      	sxth	r2, r3
 80034b4:	7d7b      	ldrb	r3, [r7, #21]
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b21a      	sxth	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	801a      	strh	r2, [r3, #0]
	return MPU_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	0000      	movs	r0, r0
 80034cc:	0000      	movs	r0, r0
	...

080034d0 <mpu_get_angles>:

void mpu_get_angles(mpu* dev, float* lastAngs, float* angs, float dif){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	ed2d 8b04 	vpush	{d8-d9}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	ed87 0a00 	vstr	s0, [r7]
	int16_t ax, ay, az, gx, gy, gz;
	float ang_p, ang_r;
	for (uint8_t i = 0; i < 3; i++){
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034ea:	e010      	b.n	800350e <mpu_get_angles+0x3e>
		lastAngs[i] = angs[i];
 80034ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	441a      	add	r2, r3
 80034f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	440b      	add	r3, r1
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++){
 8003504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003508:	3301      	adds	r3, #1
 800350a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800350e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003512:	2b02      	cmp	r3, #2
 8003514:	d9ea      	bls.n	80034ec <mpu_get_angles+0x1c>
	}
	mpu_get_accel(dev, &ax, &ay, &az);
 8003516:	f107 0316 	add.w	r3, r7, #22
 800351a:	f107 0218 	add.w	r2, r7, #24
 800351e:	f107 011a 	add.w	r1, r7, #26
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff ff8a 	bl	800343c <mpu_get_accel>
	mpu_get_gyro(dev, &gx, &gy, &gz);
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	f107 0212 	add.w	r2, r7, #18
 8003530:	f107 0114 	add.w	r1, r7, #20
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff ff3a 	bl	80033ae <mpu_get_gyro>
	ang_p = ((atan(ax/sqrt( pow(az,2) + pow(ay,2) ))*(180.0/3.141592)) - dev->config.offset_pitch);
 800353a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8003546:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003552:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003556:	eeb0 0b47 	vmov.f64	d0, d7
 800355a:	f009 ff85 	bl	800d468 <pow>
 800355e:	eeb0 9b40 	vmov.f64	d9, d0
 8003562:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800356e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003572:	eeb0 0b47 	vmov.f64	d0, d7
 8003576:	f009 ff77 	bl	800d468 <pow>
 800357a:	eeb0 7b40 	vmov.f64	d7, d0
 800357e:	ee39 7b07 	vadd.f64	d7, d9, d7
 8003582:	eeb0 0b47 	vmov.f64	d0, d7
 8003586:	f00a f89f 	bl	800d6c8 <sqrt>
 800358a:	eeb0 6b40 	vmov.f64	d6, d0
 800358e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8003592:	eeb0 0b47 	vmov.f64	d0, d7
 8003596:	f009 fe0f 	bl	800d1b8 <atan>
 800359a:	eeb0 6b40 	vmov.f64	d6, d0
 800359e:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8003730 <mpu_get_angles+0x260>
 80035a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80035b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035bc:	edc7 7a08 	vstr	s15, [r7, #32]
	ang_r = ((atan(ay/sqrt( pow(az,2) + pow(ax,2) ))*(180.0/3.141592)) - dev->config.offset_roll);
 80035c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80035cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80035dc:	eeb0 0b47 	vmov.f64	d0, d7
 80035e0:	f009 ff42 	bl	800d468 <pow>
 80035e4:	eeb0 9b40 	vmov.f64	d9, d0
 80035e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80035f8:	eeb0 0b47 	vmov.f64	d0, d7
 80035fc:	f009 ff34 	bl	800d468 <pow>
 8003600:	eeb0 7b40 	vmov.f64	d7, d0
 8003604:	ee39 7b07 	vadd.f64	d7, d9, d7
 8003608:	eeb0 0b47 	vmov.f64	d0, d7
 800360c:	f00a f85c 	bl	800d6c8 <sqrt>
 8003610:	eeb0 6b40 	vmov.f64	d6, d0
 8003614:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8003618:	eeb0 0b47 	vmov.f64	d0, d7
 800361c:	f009 fdcc 	bl	800d1b8 <atan>
 8003620:	eeb0 6b40 	vmov.f64	d6, d0
 8003624:	ed9f 7b42 	vldr	d7, [pc, #264]	; 8003730 <mpu_get_angles+0x260>
 8003628:	ee26 6b07 	vmul.f64	d6, d6, d7
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800363a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800363e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003642:	edc7 7a07 	vstr	s15, [r7, #28]
	*angs++ = 0.98*( *lastAngs++ + gx*dif ) + 0.02*ang_p;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	60ba      	str	r2, [r7, #8]
 800364c:	ed93 7a00 	vldr	s14, [r3]
 8003650:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800365c:	edd7 7a00 	vldr	s15, [r7]
 8003660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800366c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003738 <mpu_get_angles+0x268>
 8003670:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003674:	edd7 7a08 	vldr	s15, [r7, #32]
 8003678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800367c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8003740 <mpu_get_angles+0x270>
 8003680:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003684:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1d1a      	adds	r2, r3, #4
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003692:	edc3 7a00 	vstr	s15, [r3]
	*angs++ = 0.98*( *lastAngs++ + gy*dif ) + 0.02*ang_r;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1d1a      	adds	r2, r3, #4
 800369a:	60ba      	str	r2, [r7, #8]
 800369c:	ed93 7a00 	vldr	s14, [r3]
 80036a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036ac:	edd7 7a00 	vldr	s15, [r7]
 80036b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036bc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8003738 <mpu_get_angles+0x268>
 80036c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80036c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80036c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036cc:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8003740 <mpu_get_angles+0x270>
 80036d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80036d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036e2:	edc3 7a00 	vstr	s15, [r3]
	*angs = *lastAngs + ((float)gy/131.0)*dif;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80036f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003700:	ed9f 4b11 	vldr	d4, [pc, #68]	; 8003748 <mpu_get_angles+0x278>
 8003704:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8003708:	edd7 7a00 	vldr	s15, [r7]
 800370c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003710:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003714:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003718:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	edc3 7a00 	vstr	s15, [r3]
}
 8003722:	bf00      	nop
 8003724:	3728      	adds	r7, #40	; 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	ecbd 8b04 	vpop	{d8-d9}
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	7e61df46 	.word	0x7e61df46
 8003734:	404ca5dc 	.word	0x404ca5dc
 8003738:	f5c28f5c 	.word	0xf5c28f5c
 800373c:	3fef5c28 	.word	0x3fef5c28
 8003740:	47ae147b 	.word	0x47ae147b
 8003744:	3f947ae1 	.word	0x3f947ae1
 8003748:	00000000 	.word	0x00000000
 800374c:	40606000 	.word	0x40606000

08003750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_MspInit+0x44>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <HAL_MspInit+0x44>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_MspInit+0x44>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_MspInit+0x44>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_MspInit+0x44>)
 8003774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003778:	6453      	str	r3, [r2, #68]	; 0x44
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_MspInit+0x44>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a15      	ldr	r2, [pc, #84]	; (800380c <HAL_ADC_MspInit+0x74>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d124      	bne.n	8003804 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <HAL_ADC_MspInit+0x78>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	4a14      	ldr	r2, [pc, #80]	; (8003810 <HAL_ADC_MspInit+0x78>)
 80037c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c4:	6453      	str	r3, [r2, #68]	; 0x44
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_ADC_MspInit+0x78>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <HAL_ADC_MspInit+0x78>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_ADC_MspInit+0x78>)
 80037d8:	f043 0320 	orr.w	r3, r3, #32
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <HAL_ADC_MspInit+0x78>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PF10     ------> ADC3_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f0:	2303      	movs	r3, #3
 80037f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4619      	mov	r1, r3
 80037fe:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_ADC_MspInit+0x7c>)
 8003800:	f000 ff9e 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40012200 	.word	0x40012200
 8003810:	40023800 	.word	0x40023800
 8003814:	40021400 	.word	0x40021400

08003818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	; 0x30
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 031c 	add.w	r3, r7, #28
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <HAL_I2C_MspInit+0xdc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d129      	bne.n	800388e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383a:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
 8003846:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003852:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003858:	2312      	movs	r3, #18
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800385c:	2301      	movs	r3, #1
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003860:	2303      	movs	r3, #3
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003864:	2304      	movs	r3, #4
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	4619      	mov	r1, r3
 800386e:	4823      	ldr	r0, [pc, #140]	; (80038fc <HAL_I2C_MspInit+0xe4>)
 8003870:	f000 ff66 	bl	8004740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 800387a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800388c:	e02d      	b.n	80038ea <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <HAL_I2C_MspInit+0xe8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d128      	bne.n	80038ea <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 800389e:	f043 0302 	orr.w	r3, r3, #2
 80038a2:	6313      	str	r3, [r2, #48]	; 0x30
 80038a4:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b6:	2312      	movs	r3, #18
 80038b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038be:	2303      	movs	r3, #3
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80038c2:	2304      	movs	r3, #4
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4619      	mov	r1, r3
 80038cc:	480b      	ldr	r0, [pc, #44]	; (80038fc <HAL_I2C_MspInit+0xe4>)
 80038ce:	f000 ff37 	bl	8004740 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 80038d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_I2C_MspInit+0xe0>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	bf00      	nop
 80038ec:	3730      	adds	r7, #48	; 0x30
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40005400 	.word	0x40005400
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40020400 	.word	0x40020400
 8003900:	40005800 	.word	0x40005800

08003904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a17      	ldr	r2, [pc, #92]	; (8003980 <HAL_SPI_MspInit+0x7c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d127      	bne.n	8003976 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_SPI_MspInit+0x80>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_SPI_MspInit+0x80>)
 800392c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003930:	6453      	str	r3, [r2, #68]	; 0x44
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_SPI_MspInit+0x80>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_SPI_MspInit+0x80>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <HAL_SPI_MspInit+0x80>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_SPI_MspInit+0x80>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003956:	23e0      	movs	r3, #224	; 0xe0
 8003958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003962:	2303      	movs	r3, #3
 8003964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003966:	2305      	movs	r3, #5
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	4619      	mov	r1, r3
 8003970:	4805      	ldr	r0, [pc, #20]	; (8003988 <HAL_SPI_MspInit+0x84>)
 8003972:	f000 fee5 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003976:	bf00      	nop
 8003978:	3728      	adds	r7, #40	; 0x28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40013000 	.word	0x40013000
 8003984:	40023800 	.word	0x40023800
 8003988:	40020000 	.word	0x40020000

0800398c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_TIM_Base_MspInit+0x38>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d10b      	bne.n	80039b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_TIM_Base_MspInit+0x3c>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <HAL_TIM_Base_MspInit+0x3c>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6453      	str	r3, [r2, #68]	; 0x44
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_TIM_Base_MspInit+0x3c>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40023800 	.word	0x40023800

080039cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	; 0x30
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 031c 	add.w	r3, r7, #28
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <HAL_UART_MspInit+0xec>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d129      	bne.n	8003a42 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80039ee:	4b33      	ldr	r3, [pc, #204]	; (8003abc <HAL_UART_MspInit+0xf0>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a32      	ldr	r2, [pc, #200]	; (8003abc <HAL_UART_MspInit+0xf0>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
 80039fa:	4b30      	ldr	r3, [pc, #192]	; (8003abc <HAL_UART_MspInit+0xf0>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a06:	4b2d      	ldr	r3, [pc, #180]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a30:	2307      	movs	r3, #7
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4821      	ldr	r0, [pc, #132]	; (8003ac0 <HAL_UART_MspInit+0xf4>)
 8003a3c:	f000 fe80 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a40:	e035      	b.n	8003aae <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_UART_MspInit+0xf8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d130      	bne.n	8003aae <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a52:	f043 0320 	orr.w	r3, r3, #32
 8003a56:	6453      	str	r3, [r2, #68]	; 0x44
 8003a58:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a70:	4b12      	ldr	r3, [pc, #72]	; (8003abc <HAL_UART_MspInit+0xf0>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8003a7c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a82:	2302      	movs	r3, #2
 8003a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a8e:	2308      	movs	r3, #8
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a92:	f107 031c 	add.w	r3, r7, #28
 8003a96:	4619      	mov	r1, r3
 8003a98:	480b      	ldr	r0, [pc, #44]	; (8003ac8 <HAL_UART_MspInit+0xfc>)
 8003a9a:	f000 fe51 	bl	8004740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	2047      	movs	r0, #71	; 0x47
 8003aa4:	f000 fdf3 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003aa8:	2047      	movs	r0, #71	; 0x47
 8003aaa:	f000 fe0c 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 8003aae:	bf00      	nop
 8003ab0:	3730      	adds	r7, #48	; 0x30
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40004800 	.word	0x40004800
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40020c00 	.word	0x40020c00
 8003ac4:	40011400 	.word	0x40011400
 8003ac8:	40021800 	.word	0x40021800

08003acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ade:	e7fe      	b.n	8003ade <HardFault_Handler+0x4>

08003ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <MemManage_Handler+0x4>

08003ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aea:	e7fe      	b.n	8003aea <BusFault_Handler+0x4>

08003aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <UsageFault_Handler+0x4>

08003af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b20:	f000 f8d4 	bl	8003ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <USART6_IRQHandler+0x10>)
 8003b2e:	f004 fc6f 	bl	8008410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200004f8 	.word	0x200004f8

08003b3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <_sbrk+0x50>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <_sbrk+0x16>
		heap_end = &end;
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <_sbrk+0x50>)
 8003b4e:	4a10      	ldr	r2, [pc, #64]	; (8003b90 <_sbrk+0x54>)
 8003b50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <_sbrk+0x50>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <_sbrk+0x50>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	466a      	mov	r2, sp
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d907      	bls.n	8003b76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b66:	f005 fa35 	bl	8008fd4 <__errno>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	230c      	movs	r3, #12
 8003b6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b74:	e006      	b.n	8003b84 <_sbrk+0x48>
	}

	heap_end += incr;
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <_sbrk+0x50>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <_sbrk+0x50>)
 8003b80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2000028c 	.word	0x2000028c
 8003b90:	200008f8 	.word	0x200008f8

08003b94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <SystemInit+0x5c>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <SystemInit+0x5c>)
 8003ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <SystemInit+0x60>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <SystemInit+0x60>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <SystemInit+0x60>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <SystemInit+0x60>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	490d      	ldr	r1, [pc, #52]	; (8003bf4 <SystemInit+0x60>)
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <SystemInit+0x64>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <SystemInit+0x60>)
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <SystemInit+0x68>)
 8003bca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <SystemInit+0x60>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <SystemInit+0x60>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <SystemInit+0x60>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <SystemInit+0x5c>)
 8003be0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003be4:	609a      	str	r2, [r3, #8]
#endif
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	fef6ffff 	.word	0xfef6ffff
 8003bfc:	24003010 	.word	0x24003010

08003c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c06:	e003      	b.n	8003c10 <LoopCopyDataInit>

08003c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c0e:	3104      	adds	r1, #4

08003c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c10:	480b      	ldr	r0, [pc, #44]	; (8003c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c18:	d3f6      	bcc.n	8003c08 <CopyDataInit>
  ldr  r2, =_sbss
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c1c:	e002      	b.n	8003c24 <LoopFillZerobss>

08003c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c20:	f842 3b04 	str.w	r3, [r2], #4

08003c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c28:	d3f9      	bcc.n	8003c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c2a:	f7ff ffb3 	bl	8003b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c2e:	f005 f9d7 	bl	8008fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c32:	f7fe fbe3 	bl	80023fc <main>
  bx  lr    
 8003c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c38:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003c3c:	0800e890 	.word	0x0800e890
  ldr  r0, =_sdata
 8003c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c44:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8003c48:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8003c4c:	200008f8 	.word	0x200008f8

08003c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c50:	e7fe      	b.n	8003c50 <ADC_IRQHandler>

08003c52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c56:	2003      	movs	r0, #3
 8003c58:	f000 fd0e 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f000 f805 	bl	8003c6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003c62:	f7ff fd75 	bl	8003750 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_InitTick+0x54>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_InitTick+0x58>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fd29 	bl	80046e2 <HAL_SYSTICK_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00e      	b.n	8003cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b0f      	cmp	r3, #15
 8003c9e:	d80a      	bhi.n	8003cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca8:	f000 fcf1 	bl	800468e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cac:	4a06      	ldr	r2, [pc, #24]	; (8003cc8 <HAL_InitTick+0x5c>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000008 	.word	0x20000008
 8003cc4:	20000010 	.word	0x20000010
 8003cc8:	2000000c 	.word	0x2000000c

08003ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_IncTick+0x20>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_IncTick+0x24>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_IncTick+0x24>)
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000010 	.word	0x20000010
 8003cf0:	200008f0 	.word	0x200008f0

08003cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_GetTick+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	200008f0 	.word	0x200008f0

08003d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d14:	f7ff ffee 	bl	8003cf4 <HAL_GetTick>
 8003d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d24:	d005      	beq.n	8003d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_Delay+0x40>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d32:	bf00      	nop
 8003d34:	f7ff ffde 	bl	8003cf4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d8f7      	bhi.n	8003d34 <HAL_Delay+0x28>
  {
  }
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000010 	.word	0x20000010

08003d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e031      	b.n	8003dca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fd12 	bl	8003798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_ADC_Init+0x84>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 faa0 	bl	80042e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
 8003dba:	e001      	b.n	8003dc0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	ffffeefd 	.word	0xffffeefd

08003dd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_ADC_Start+0x1a>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0a0      	b.n	8003f34 <HAL_ADC_Start+0x15c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d018      	beq.n	8003e3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <HAL_ADC_Start+0x168>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a49      	ldr	r2, [pc, #292]	; (8003f44 <HAL_ADC_Start+0x16c>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0c9a      	lsrs	r2, r3, #18
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003e2c:	e002      	b.n	8003e34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f9      	bne.n	8003e2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d174      	bne.n	8003f32 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_ADC_Start+0x170>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e82:	d106      	bne.n	8003e92 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	f023 0206 	bic.w	r2, r3, #6
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
 8003e90:	e002      	b.n	8003e98 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ea8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003eaa:	4b28      	ldr	r3, [pc, #160]	; (8003f4c <HAL_ADC_Start+0x174>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d136      	bne.n	8003f32 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	e02d      	b.n	8003f32 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_ADC_Start+0x178>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10e      	bne.n	8003efe <HAL_ADC_Start+0x126>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003efc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_ADC_Start+0x174>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d113      	bne.n	8003f32 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <HAL_ADC_Start+0x17c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10e      	bne.n	8003f32 <HAL_ADC_Start+0x15a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f30:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	20000008 	.word	0x20000008
 8003f44:	431bde83 	.word	0x431bde83
 8003f48:	fffff8fe 	.word	0xfffff8fe
 8003f4c:	40012300 	.word	0x40012300
 8003f50:	40012000 	.word	0x40012000
 8003f54:	40012200 	.word	0x40012200

08003f58 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f74:	d113      	bne.n	8003f9e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f84:	d10b      	bne.n	8003f9e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e05c      	b.n	8004058 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f9e:	f7ff fea9 	bl	8003cf4 <HAL_GetTick>
 8003fa2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fa4:	e01a      	b.n	8003fdc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fac:	d016      	beq.n	8003fdc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <HAL_ADC_PollForConversion+0x6c>
 8003fb4:	f7ff fe9e 	bl	8003cf4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d20b      	bcs.n	8003fdc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f043 0204 	orr.w	r2, r3, #4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e03d      	b.n	8004058 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d1dd      	bne.n	8003fa6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0212 	mvn.w	r2, #18
 8003ff2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d123      	bne.n	8004056 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11f      	bne.n	8004056 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800402e:	2b00      	cmp	r3, #0
 8004030:	d111      	bne.n	8004056 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x1c>
 8004094:	2302      	movs	r3, #2
 8004096:	e115      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x248>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d935      	bls.n	8004114 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	3b1e      	subs	r3, #30
 80040be:	2207      	movs	r2, #7
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43da      	mvns	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	400a      	ands	r2, r1
 80040cc:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7f      	ldr	r2, [pc, #508]	; (80042d0 <HAL_ADC_ConfigChannel+0x254>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10a      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d9      	ldr	r1, [r3, #12]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	061a      	lsls	r2, r3, #24
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	e035      	b.n	800415a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68d9      	ldr	r1, [r3, #12]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4618      	mov	r0, r3
 8004100:	4603      	mov	r3, r0
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4403      	add	r3, r0
 8004106:	3b1e      	subs	r3, #30
 8004108:	409a      	lsls	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	e022      	b.n	800415a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6919      	ldr	r1, [r3, #16]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	2207      	movs	r2, #7
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	400a      	ands	r2, r1
 8004136:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6919      	ldr	r1, [r3, #16]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	4618      	mov	r0, r3
 800414a:	4603      	mov	r3, r0
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4403      	add	r3, r0
 8004150:	409a      	lsls	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b06      	cmp	r3, #6
 8004160:	d824      	bhi.n	80041ac <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	3b05      	subs	r3, #5
 8004174:	221f      	movs	r2, #31
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	400a      	ands	r2, r1
 8004182:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	4618      	mov	r0, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	3b05      	subs	r3, #5
 800419e:	fa00 f203 	lsl.w	r2, r0, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34
 80041aa:	e04c      	b.n	8004246 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d824      	bhi.n	80041fe <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	3b23      	subs	r3, #35	; 0x23
 80041c6:	221f      	movs	r2, #31
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43da      	mvns	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	400a      	ands	r2, r1
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4618      	mov	r0, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	3b23      	subs	r3, #35	; 0x23
 80041f0:	fa00 f203 	lsl.w	r2, r0, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
 80041fc:	e023      	b.n	8004246 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	3b41      	subs	r3, #65	; 0x41
 8004210:	221f      	movs	r2, #31
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43da      	mvns	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	400a      	ands	r2, r1
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	4618      	mov	r0, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	3b41      	subs	r3, #65	; 0x41
 800423a:	fa00 f203 	lsl.w	r2, r0, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <HAL_ADC_ConfigChannel+0x258>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d109      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x1e8>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b12      	cmp	r3, #18
 8004256:	d105      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_ADC_ConfigChannel+0x25c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_ADC_ConfigChannel+0x25c>)
 800425e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004262:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <HAL_ADC_ConfigChannel+0x258>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d125      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x23e>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <HAL_ADC_ConfigChannel+0x254>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <HAL_ADC_ConfigChannel+0x204>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b11      	cmp	r3, #17
 800427e:	d11c      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_ADC_ConfigChannel+0x25c>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_ADC_ConfigChannel+0x25c>)
 8004286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800428a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <HAL_ADC_ConfigChannel+0x254>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d111      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_ADC_ConfigChannel+0x260>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_ADC_ConfigChannel+0x264>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	0c9a      	lsrs	r2, r3, #18
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80042ac:	e002      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f9      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	10000012 	.word	0x10000012
 80042d4:	40012000 	.word	0x40012000
 80042d8:	40012300 	.word	0x40012300
 80042dc:	20000008 	.word	0x20000008
 80042e0:	431bde83 	.word	0x431bde83

080042e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042ec:	4b78      	ldr	r3, [pc, #480]	; (80044d0 <ADC_Init+0x1ec>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a77      	ldr	r2, [pc, #476]	; (80044d0 <ADC_Init+0x1ec>)
 80042f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042f8:	4b75      	ldr	r3, [pc, #468]	; (80044d0 <ADC_Init+0x1ec>)
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4973      	ldr	r1, [pc, #460]	; (80044d0 <ADC_Init+0x1ec>)
 8004302:	4313      	orrs	r3, r2
 8004304:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	021a      	lsls	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <ADC_Init+0x1f0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	e00f      	b.n	80043de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0202 	bic.w	r2, r2, #2
 80043ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	005a      	lsls	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01b      	beq.n	8004444 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800442a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	3b01      	subs	r3, #1
 8004438:	035a      	lsls	r2, r3, #13
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	e007      	b.n	8004454 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004452:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	3b01      	subs	r3, #1
 8004470:	051a      	lsls	r2, r3, #20
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6899      	ldr	r1, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004496:	025a      	lsls	r2, r3, #9
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	029a      	lsls	r2, r3, #10
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40012300 	.word	0x40012300
 80044d4:	0f000001 	.word	0x0f000001

080044d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <__NVIC_SetPriorityGrouping+0x40>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 8004502:	4313      	orrs	r3, r2
 8004504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <__NVIC_SetPriorityGrouping+0x40>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	60d3      	str	r3, [r2, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00
 800451c:	05fa0000 	.word	0x05fa0000

08004520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <__NVIC_EnableIRQ+0x38>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	; (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f1c3 0307 	rsb	r3, r3, #7
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf28      	it	cs
 80045ea:	2304      	movcs	r3, #4
 80045ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d902      	bls.n	80045fc <NVIC_EncodePriority+0x30>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3b03      	subs	r3, #3
 80045fa:	e000      	b.n	80045fe <NVIC_EncodePriority+0x32>
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	401a      	ands	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43d9      	mvns	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	4313      	orrs	r3, r2
         );
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004644:	d301      	bcc.n	800464a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004646:	2301      	movs	r3, #1
 8004648:	e00f      	b.n	800466a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <SysTick_Config+0x40>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004652:	210f      	movs	r1, #15
 8004654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004658:	f7ff ff8e 	bl	8004578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <SysTick_Config+0x40>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <SysTick_Config+0x40>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000e010 	.word	0xe000e010

08004678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff29 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a0:	f7ff ff3e 	bl	8004520 <__NVIC_GetPriorityGrouping>
 80046a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff8e 	bl	80045cc <NVIC_EncodePriority>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff5d 	bl	8004578 <__NVIC_SetPriority>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff31 	bl	800453c <__NVIC_EnableIRQ>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ffa2 	bl	8004634 <SysTick_Config>
 80046f0:	4603      	mov	r3, r0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d004      	beq.n	8004718 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e00c      	b.n	8004732 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2205      	movs	r2, #5
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e175      	b.n	8004a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	f040 8164 	bne.w	8004a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x4e>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b12      	cmp	r3, #18
 800478c:	d123      	bne.n	80047d6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	08da      	lsrs	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3208      	adds	r2, #8
 8004796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	220f      	movs	r2, #15
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	08da      	lsrs	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3208      	adds	r2, #8
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	2203      	movs	r2, #3
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0203 	and.w	r2, r3, #3
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d00b      	beq.n	800482a <HAL_GPIO_Init+0xea>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d007      	beq.n	800482a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800481e:	2b11      	cmp	r3, #17
 8004820:	d003      	beq.n	800482a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b12      	cmp	r3, #18
 8004828:	d130      	bne.n	800488c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004860:	2201      	movs	r2, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 0201 	and.w	r2, r3, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80be 	beq.w	8004a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ca:	4b65      	ldr	r3, [pc, #404]	; (8004a60 <HAL_GPIO_Init+0x320>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	4a64      	ldr	r2, [pc, #400]	; (8004a60 <HAL_GPIO_Init+0x320>)
 80048d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d4:	6453      	str	r3, [r2, #68]	; 0x44
 80048d6:	4b62      	ldr	r3, [pc, #392]	; (8004a60 <HAL_GPIO_Init+0x320>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80048e2:	4a60      	ldr	r2, [pc, #384]	; (8004a64 <HAL_GPIO_Init+0x324>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	220f      	movs	r2, #15
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <HAL_GPIO_Init+0x328>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d037      	beq.n	800497e <HAL_GPIO_Init+0x23e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a56      	ldr	r2, [pc, #344]	; (8004a6c <HAL_GPIO_Init+0x32c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d031      	beq.n	800497a <HAL_GPIO_Init+0x23a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a55      	ldr	r2, [pc, #340]	; (8004a70 <HAL_GPIO_Init+0x330>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d02b      	beq.n	8004976 <HAL_GPIO_Init+0x236>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a54      	ldr	r2, [pc, #336]	; (8004a74 <HAL_GPIO_Init+0x334>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d025      	beq.n	8004972 <HAL_GPIO_Init+0x232>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a53      	ldr	r2, [pc, #332]	; (8004a78 <HAL_GPIO_Init+0x338>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01f      	beq.n	800496e <HAL_GPIO_Init+0x22e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a52      	ldr	r2, [pc, #328]	; (8004a7c <HAL_GPIO_Init+0x33c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d019      	beq.n	800496a <HAL_GPIO_Init+0x22a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a51      	ldr	r2, [pc, #324]	; (8004a80 <HAL_GPIO_Init+0x340>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_GPIO_Init+0x226>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a50      	ldr	r2, [pc, #320]	; (8004a84 <HAL_GPIO_Init+0x344>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00d      	beq.n	8004962 <HAL_GPIO_Init+0x222>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a4f      	ldr	r2, [pc, #316]	; (8004a88 <HAL_GPIO_Init+0x348>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <HAL_GPIO_Init+0x21e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a4e      	ldr	r2, [pc, #312]	; (8004a8c <HAL_GPIO_Init+0x34c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <HAL_GPIO_Init+0x21a>
 8004956:	2309      	movs	r3, #9
 8004958:	e012      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800495a:	230a      	movs	r3, #10
 800495c:	e010      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800495e:	2308      	movs	r3, #8
 8004960:	e00e      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004962:	2307      	movs	r3, #7
 8004964:	e00c      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004966:	2306      	movs	r3, #6
 8004968:	e00a      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800496a:	2305      	movs	r3, #5
 800496c:	e008      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800496e:	2304      	movs	r3, #4
 8004970:	e006      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004972:	2303      	movs	r3, #3
 8004974:	e004      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004976:	2302      	movs	r3, #2
 8004978:	e002      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800497e:	2300      	movs	r3, #0
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	f002 0203 	and.w	r2, r2, #3
 8004986:	0092      	lsls	r2, r2, #2
 8004988:	4093      	lsls	r3, r2
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004990:	4934      	ldr	r1, [pc, #208]	; (8004a64 <HAL_GPIO_Init+0x324>)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	3302      	adds	r3, #2
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800499e:	4b3c      	ldr	r3, [pc, #240]	; (8004a90 <HAL_GPIO_Init+0x350>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049c2:	4a33      	ldr	r2, [pc, #204]	; (8004a90 <HAL_GPIO_Init+0x350>)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <HAL_GPIO_Init+0x350>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049ec:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <HAL_GPIO_Init+0x350>)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <HAL_GPIO_Init+0x350>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a16:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <HAL_GPIO_Init+0x350>)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <HAL_GPIO_Init+0x350>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a40:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <HAL_GPIO_Init+0x350>)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	f67f ae86 	bls.w	8004760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a54:	bf00      	nop
 8004a56:	3724      	adds	r7, #36	; 0x24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40013800 	.word	0x40013800
 8004a68:	40020000 	.word	0x40020000
 8004a6c:	40020400 	.word	0x40020400
 8004a70:	40020800 	.word	0x40020800
 8004a74:	40020c00 	.word	0x40020c00
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40021400 	.word	0x40021400
 8004a80:	40021800 	.word	0x40021800
 8004a84:	40021c00 	.word	0x40021c00
 8004a88:	40022000 	.word	0x40022000
 8004a8c:	40022400 	.word	0x40022400
 8004a90:	40013c00 	.word	0x40013c00

08004a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	e001      	b.n	8004ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ad4:	787b      	ldrb	r3, [r7, #1]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ae0:	e003      	b.n	8004aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ae2:	887b      	ldrh	r3, [r7, #2]
 8004ae4:	041a      	lsls	r2, r3, #16
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	619a      	str	r2, [r3, #24]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fe fe7a 	bl	8003818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2224      	movs	r2, #36	; 0x24
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d107      	bne.n	8004b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	e006      	b.n	8004b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d104      	bne.n	8004b92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_I2C_Init+0x11c>)
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	ea42 0103 	orr.w	r1, r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	021a      	lsls	r2, r3, #8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	02008000 	.word	0x02008000

08004c18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	461a      	mov	r2, r3
 8004c24:	460b      	mov	r3, r1
 8004c26:	817b      	strh	r3, [r7, #10]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	f040 80da 	bne.w	8004dee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_I2C_Master_Transmit+0x30>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0d3      	b.n	8004df0 <HAL_I2C_Master_Transmit+0x1d8>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c50:	f7ff f850 	bl	8003cf4 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2319      	movs	r3, #25
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fdc4 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0be      	b.n	8004df0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2221      	movs	r2, #33	; 0x21
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	893a      	ldrh	r2, [r7, #8]
 8004c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2bff      	cmp	r3, #255	; 0xff
 8004ca2:	d90e      	bls.n	8004cc2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	4b51      	ldr	r3, [pc, #324]	; (8004df8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 ff26 	bl	8005b0c <I2C_TransferConfig>
 8004cc0:	e06c      	b.n	8004d9c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	8979      	ldrh	r1, [r7, #10]
 8004cd4:	4b48      	ldr	r3, [pc, #288]	; (8004df8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 ff15 	bl	8005b0c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004ce2:	e05b      	b.n	8004d9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	6a39      	ldr	r1, [r7, #32]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fdc1 	bl	8005870 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e07b      	b.n	8004df0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d034      	beq.n	8004d9c <HAL_I2C_Master_Transmit+0x184>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d130      	bne.n	8004d9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fd53 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04d      	b.n	8004df0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2bff      	cmp	r3, #255	; 0xff
 8004d5c:	d90e      	bls.n	8004d7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	8979      	ldrh	r1, [r7, #10]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fec9 	bl	8005b0c <I2C_TransferConfig>
 8004d7a:	e00f      	b.n	8004d9c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	8979      	ldrh	r1, [r7, #10]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 feb8 	bl	8005b0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d19e      	bne.n	8004ce4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6a39      	ldr	r1, [r7, #32]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fda0 	bl	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e01a      	b.n	8004df0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_I2C_Master_Transmit+0x1e4>)
 8004dce:	400b      	ands	r3, r1
 8004dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	80002000 	.word	0x80002000
 8004dfc:	fe00e800 	.word	0xfe00e800

08004e00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	817b      	strh	r3, [r7, #10]
 8004e10:	4613      	mov	r3, r2
 8004e12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	f040 80db 	bne.w	8004fd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_I2C_Master_Receive+0x30>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e0d4      	b.n	8004fda <HAL_I2C_Master_Receive+0x1da>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e38:	f7fe ff5c 	bl	8003cf4 <HAL_GetTick>
 8004e3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2319      	movs	r3, #25
 8004e44:	2201      	movs	r2, #1
 8004e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fcd0 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0bf      	b.n	8004fda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2222      	movs	r2, #34	; 0x22
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2210      	movs	r2, #16
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	893a      	ldrh	r2, [r7, #8]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2bff      	cmp	r3, #255	; 0xff
 8004e8a:	d90e      	bls.n	8004eaa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	8979      	ldrh	r1, [r7, #10]
 8004e9a:	4b52      	ldr	r3, [pc, #328]	; (8004fe4 <HAL_I2C_Master_Receive+0x1e4>)
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fe32 	bl	8005b0c <I2C_TransferConfig>
 8004ea8:	e06d      	b.n	8004f86 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	8979      	ldrh	r1, [r7, #10]
 8004ebc:	4b49      	ldr	r3, [pc, #292]	; (8004fe4 <HAL_I2C_Master_Receive+0x1e4>)
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fe21 	bl	8005b0c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004eca:	e05c      	b.n	8004f86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	6a39      	ldr	r1, [r7, #32]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fd49 	bl	8005968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e07c      	b.n	8004fda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d034      	beq.n	8004f86 <HAL_I2C_Master_Receive+0x186>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d130      	bne.n	8004f86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2180      	movs	r1, #128	; 0x80
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fc5e 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e04d      	b.n	8004fda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2bff      	cmp	r3, #255	; 0xff
 8004f46:	d90e      	bls.n	8004f66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	22ff      	movs	r2, #255	; 0xff
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	8979      	ldrh	r1, [r7, #10]
 8004f56:	2300      	movs	r3, #0
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fdd4 	bl	8005b0c <I2C_TransferConfig>
 8004f64:	e00f      	b.n	8004f86 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fdc3 	bl	8005b0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d19d      	bne.n	8004ecc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	6a39      	ldr	r1, [r7, #32]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fcab 	bl	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e01a      	b.n	8004fda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6859      	ldr	r1, [r3, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_I2C_Master_Receive+0x1e8>)
 8004fb8:	400b      	ands	r3, r1
 8004fba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	80002400 	.word	0x80002400
 8004fe8:	fe00e800 	.word	0xfe00e800

08004fec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	460b      	mov	r3, r1
 8005000:	813b      	strh	r3, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b20      	cmp	r3, #32
 8005010:	f040 80f9 	bne.w	8005206 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_I2C_Mem_Write+0x34>
 800501a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0ed      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_I2C_Mem_Write+0x4e>
 8005036:	2302      	movs	r3, #2
 8005038:	e0e6      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005042:	f7fe fe57 	bl	8003cf4 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2319      	movs	r3, #25
 800504e:	2201      	movs	r2, #1
 8005050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fbcb 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0d1      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2221      	movs	r2, #33	; 0x21
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2240      	movs	r2, #64	; 0x40
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800508c:	88f8      	ldrh	r0, [r7, #6]
 800508e:	893a      	ldrh	r2, [r7, #8]
 8005090:	8979      	ldrh	r1, [r7, #10]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4603      	mov	r3, r0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fadb 	bl	8005658 <I2C_RequestMemoryWrite>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0a9      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2bff      	cmp	r3, #255	; 0xff
 80050bc:	d90e      	bls.n	80050dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	22ff      	movs	r2, #255	; 0xff
 80050c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	8979      	ldrh	r1, [r7, #10]
 80050cc:	2300      	movs	r3, #0
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fd19 	bl	8005b0c <I2C_TransferConfig>
 80050da:	e00f      	b.n	80050fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	8979      	ldrh	r1, [r7, #10]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fd08 	bl	8005b0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fbb5 	bl	8005870 <I2C_WaitOnTXISFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e07b      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d034      	beq.n	80051b4 <HAL_I2C_Mem_Write+0x1c8>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	d130      	bne.n	80051b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fb47 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04d      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2bff      	cmp	r3, #255	; 0xff
 8005174:	d90e      	bls.n	8005194 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	b2da      	uxtb	r2, r3
 8005182:	8979      	ldrh	r1, [r7, #10]
 8005184:	2300      	movs	r3, #0
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fcbd 	bl	8005b0c <I2C_TransferConfig>
 8005192:	e00f      	b.n	80051b4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	8979      	ldrh	r1, [r7, #10]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fcac 	bl	8005b0c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d19e      	bne.n	80050fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fb94 	bl	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e01a      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2220      	movs	r2, #32
 80051d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <HAL_I2C_Mem_Write+0x224>)
 80051e6:	400b      	ands	r3, r1
 80051e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e000      	b.n	8005208 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
  }
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	fe00e800 	.word	0xfe00e800

08005214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	461a      	mov	r2, r3
 8005222:	4603      	mov	r3, r0
 8005224:	817b      	strh	r3, [r7, #10]
 8005226:	460b      	mov	r3, r1
 8005228:	813b      	strh	r3, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b20      	cmp	r3, #32
 8005238:	f040 80fd 	bne.w	8005436 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_I2C_Mem_Read+0x34>
 8005242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0f1      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_I2C_Mem_Read+0x4e>
 800525e:	2302      	movs	r3, #2
 8005260:	e0ea      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800526a:	f7fe fd43 	bl	8003cf4 <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2319      	movs	r3, #25
 8005276:	2201      	movs	r2, #1
 8005278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fab7 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0d5      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2222      	movs	r2, #34	; 0x22
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2240      	movs	r2, #64	; 0x40
 8005298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a3a      	ldr	r2, [r7, #32]
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052b4:	88f8      	ldrh	r0, [r7, #6]
 80052b6:	893a      	ldrh	r2, [r7, #8]
 80052b8:	8979      	ldrh	r1, [r7, #10]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	4603      	mov	r3, r0
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 fa1b 	bl	8005700 <I2C_RequestMemoryRead>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0ad      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2bff      	cmp	r3, #255	; 0xff
 80052e4:	d90e      	bls.n	8005304 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	22ff      	movs	r2, #255	; 0xff
 80052ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	8979      	ldrh	r1, [r7, #10]
 80052f4:	4b52      	ldr	r3, [pc, #328]	; (8005440 <HAL_I2C_Mem_Read+0x22c>)
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fc05 	bl	8005b0c <I2C_TransferConfig>
 8005302:	e00f      	b.n	8005324 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005312:	b2da      	uxtb	r2, r3
 8005314:	8979      	ldrh	r1, [r7, #10]
 8005316:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <HAL_I2C_Mem_Read+0x22c>)
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fbf4 	bl	8005b0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2200      	movs	r2, #0
 800532c:	2104      	movs	r1, #4
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 fa5e 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07c      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d034      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x1d0>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d130      	bne.n	80053e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	2200      	movs	r2, #0
 800538a:	2180      	movs	r1, #128	; 0x80
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 fa2f 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e04d      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2bff      	cmp	r3, #255	; 0xff
 80053a4:	d90e      	bls.n	80053c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	22ff      	movs	r2, #255	; 0xff
 80053aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	8979      	ldrh	r1, [r7, #10]
 80053b4:	2300      	movs	r3, #0
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fba5 	bl	8005b0c <I2C_TransferConfig>
 80053c2:	e00f      	b.n	80053e4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	8979      	ldrh	r1, [r7, #10]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fb94 	bl	8005b0c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d19a      	bne.n	8005324 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fa7c 	bl	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e01a      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2220      	movs	r2, #32
 8005408:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_I2C_Mem_Read+0x230>)
 8005416:	400b      	ands	r3, r1
 8005418:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	80002400 	.word	0x80002400
 8005444:	fe00e800 	.word	0xfe00e800

08005448 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08a      	sub	sp, #40	; 0x28
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b20      	cmp	r3, #32
 8005466:	f040 80ef 	bne.w	8005648 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005478:	d101      	bne.n	800547e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
 800547c:	e0e5      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_I2C_IsDeviceReady+0x44>
 8005488:	2302      	movs	r3, #2
 800548a:	e0de      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2224      	movs	r2, #36	; 0x24
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_I2C_IsDeviceReady+0x6e>
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054b0:	4b68      	ldr	r3, [pc, #416]	; (8005654 <HAL_I2C_IsDeviceReady+0x20c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	e004      	b.n	80054c0 <HAL_I2C_IsDeviceReady+0x78>
 80054b6:	897b      	ldrh	r3, [r7, #10]
 80054b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054bc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80054c6:	f7fe fc15 	bl	8003cf4 <HAL_GetTick>
 80054ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80054f8:	e034      	b.n	8005564 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005500:	d01a      	beq.n	8005538 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005502:	f7fe fbf7 	bl	8003cf4 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d302      	bcc.n	8005518 <HAL_I2C_IsDeviceReady+0xd0>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e088      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b10      	cmp	r3, #16
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005564:	7ffb      	ldrb	r3, [r7, #31]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <HAL_I2C_IsDeviceReady+0x128>
 800556a:	7fbb      	ldrb	r3, [r7, #30]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0c4      	beq.n	80054fa <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b10      	cmp	r3, #16
 800557c:	d01a      	beq.n	80055b4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2200      	movs	r2, #0
 8005586:	2120      	movs	r1, #32
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f931 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e058      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2220      	movs	r2, #32
 800559e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e04a      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	2120      	movs	r1, #32
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f916 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e03d      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2210      	movs	r2, #16
 80055d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2220      	movs	r2, #32
 80055dc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d118      	bne.n	8005618 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2200      	movs	r2, #0
 80055fe:	2120      	movs	r1, #32
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f8f5 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e01c      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2220      	movs	r2, #32
 8005616:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3301      	adds	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	f63f af3d 	bhi.w	80054a2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005648:	2302      	movs	r3, #2
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	02002000 	.word	0x02002000

08005658 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	461a      	mov	r2, r3
 8005666:	4603      	mov	r3, r0
 8005668:	817b      	strh	r3, [r7, #10]
 800566a:	460b      	mov	r3, r1
 800566c:	813b      	strh	r3, [r7, #8]
 800566e:	4613      	mov	r3, r2
 8005670:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	8979      	ldrh	r1, [r7, #10]
 8005678:	4b20      	ldr	r3, [pc, #128]	; (80056fc <I2C_RequestMemoryWrite+0xa4>)
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa43 	bl	8005b0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	69b9      	ldr	r1, [r7, #24]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f8f0 	bl	8005870 <I2C_WaitOnTXISFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e02c      	b.n	80056f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d105      	bne.n	80056ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056a0:	893b      	ldrh	r3, [r7, #8]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	629a      	str	r2, [r3, #40]	; 0x28
 80056aa:	e015      	b.n	80056d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056ac:	893b      	ldrh	r3, [r7, #8]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	69b9      	ldr	r1, [r7, #24]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f8d6 	bl	8005870 <I2C_WaitOnTXISFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e012      	b.n	80056f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ce:	893b      	ldrh	r3, [r7, #8]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2200      	movs	r2, #0
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f884 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	80002000 	.word	0x80002000

08005700 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	461a      	mov	r2, r3
 800570e:	4603      	mov	r3, r0
 8005710:	817b      	strh	r3, [r7, #10]
 8005712:	460b      	mov	r3, r1
 8005714:	813b      	strh	r3, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	8979      	ldrh	r1, [r7, #10]
 8005720:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <I2C_RequestMemoryRead+0xa4>)
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f9f0 	bl	8005b0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	69b9      	ldr	r1, [r7, #24]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f89d 	bl	8005870 <I2C_WaitOnTXISFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e02c      	b.n	800579a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d105      	bne.n	8005752 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28
 8005750:	e015      	b.n	800577e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005752:	893b      	ldrh	r3, [r7, #8]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b29b      	uxth	r3, r3
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f883 	bl	8005870 <I2C_WaitOnTXISFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e012      	b.n	800579a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2200      	movs	r2, #0
 8005786:	2140      	movs	r1, #64	; 0x40
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f831 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	80002000 	.word	0x80002000

080057a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d103      	bne.n	80057c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d007      	beq.n	80057e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	619a      	str	r2, [r3, #24]
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005800:	e022      	b.n	8005848 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005808:	d01e      	beq.n	8005848 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fe fa73 	bl	8003cf4 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d113      	bne.n	8005848 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e00f      	b.n	8005868 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	429a      	cmp	r2, r3
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	429a      	cmp	r2, r3
 8005864:	d0cd      	beq.n	8005802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800587c:	e02c      	b.n	80058d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f8dc 	bl	8005a40 <I2C_IsAcknowledgeFailed>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e02a      	b.n	80058e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005898:	d01e      	beq.n	80058d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589a:	f7fe fa2b 	bl	8003cf4 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d113      	bne.n	80058d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e007      	b.n	80058e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d1cb      	bne.n	800587e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058fc:	e028      	b.n	8005950 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f89c 	bl	8005a40 <I2C_IsAcknowledgeFailed>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e026      	b.n	8005960 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fe f9ef 	bl	8003cf4 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d113      	bne.n	8005950 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e007      	b.n	8005960 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d1cf      	bne.n	80058fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005974:	e055      	b.n	8005a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f860 	bl	8005a40 <I2C_IsAcknowledgeFailed>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e053      	b.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b20      	cmp	r3, #32
 8005996:	d129      	bne.n	80059ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d105      	bne.n	80059b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e03f      	b.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2220      	movs	r2, #32
 80059b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80059c6:	400b      	ands	r3, r1
 80059c8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e022      	b.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7fe f982 	bl	8003cf4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10f      	bne.n	8005a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e007      	b.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d1a2      	bne.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	fe00e800 	.word	0xfe00e800

08005a40 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d151      	bne.n	8005afe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a5a:	e022      	b.n	8005aa2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a62:	d01e      	beq.n	8005aa2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a64:	f7fe f946 	bl	8003cf4 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <I2C_IsAcknowledgeFailed+0x3a>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d113      	bne.n	8005aa2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e02e      	b.n	8005b00 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d1d5      	bne.n	8005a5c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2220      	movs	r2, #32
 8005abe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fe71 	bl	80057a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <I2C_IsAcknowledgeFailed+0xc8>)
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	f043 0204 	orr.w	r2, r3, #4
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	fe00e800 	.word	0xfe00e800

08005b0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	817b      	strh	r3, [r7, #10]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	0d5b      	lsrs	r3, r3, #21
 8005b28:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <I2C_TransferConfig+0x58>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	43db      	mvns	r3, r3
 8005b32:	ea02 0103 	and.w	r1, r2, r3
 8005b36:	897b      	ldrh	r3, [r7, #10]
 8005b38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b3c:	7a7b      	ldrb	r3, [r7, #9]
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	03ff63ff 	.word	0x03ff63ff

08005b68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d138      	bne.n	8005bf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e032      	b.n	8005bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6819      	ldr	r1, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e000      	b.n	8005bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d139      	bne.n	8005c88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e033      	b.n	8005c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2224      	movs	r2, #36	; 0x24
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a04      	ldr	r2, [pc, #16]	; (8005cb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca6:	6013      	str	r3, [r2, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40007000 	.word	0x40007000

08005cb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cce:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cda:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ce6:	f7fe f805 	bl	8003cf4 <HAL_GetTick>
 8005cea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cec:	e009      	b.n	8005d02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cee:	f7fe f801 	bl	8003cf4 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cfc:	d901      	bls.n	8005d02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e022      	b.n	8005d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d02:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0e:	d1ee      	bne.n	8005cee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d10:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0f      	ldr	r2, [pc, #60]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d1c:	f7fd ffea 	bl	8003cf4 <HAL_GetTick>
 8005d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d22:	e009      	b.n	8005d38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d24:	f7fd ffe6 	bl	8003cf4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d32:	d901      	bls.n	8005d38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e007      	b.n	8005d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d44:	d1ee      	bne.n	8005d24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40007000 	.word	0x40007000

08005d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005d60:	2300      	movs	r3, #0
 8005d62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e25e      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8087 	beq.w	8005e8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d7c:	4b96      	ldr	r3, [pc, #600]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d00c      	beq.n	8005da2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d88:	4b93      	ldr	r3, [pc, #588]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d112      	bne.n	8005dba <HAL_RCC_OscConfig+0x62>
 8005d94:	4b90      	ldr	r3, [pc, #576]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da0:	d10b      	bne.n	8005dba <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da2:	4b8d      	ldr	r3, [pc, #564]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d06c      	beq.n	8005e88 <HAL_RCC_OscConfig+0x130>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d168      	bne.n	8005e88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e238      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x7a>
 8005dc4:	4b84      	ldr	r3, [pc, #528]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a83      	ldr	r2, [pc, #524]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e02e      	b.n	8005e30 <HAL_RCC_OscConfig+0xd8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x9c>
 8005dda:	4b7f      	ldr	r3, [pc, #508]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a7e      	ldr	r2, [pc, #504]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	4b7c      	ldr	r3, [pc, #496]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a7b      	ldr	r2, [pc, #492]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e01d      	b.n	8005e30 <HAL_RCC_OscConfig+0xd8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0xc0>
 8005dfe:	4b76      	ldr	r3, [pc, #472]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a75      	ldr	r2, [pc, #468]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	4b73      	ldr	r3, [pc, #460]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a72      	ldr	r2, [pc, #456]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e00b      	b.n	8005e30 <HAL_RCC_OscConfig+0xd8>
 8005e18:	4b6f      	ldr	r3, [pc, #444]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6e      	ldr	r2, [pc, #440]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4b6c      	ldr	r3, [pc, #432]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a6b      	ldr	r2, [pc, #428]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d013      	beq.n	8005e60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fd ff5c 	bl	8003cf4 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e40:	f7fd ff58 	bl	8003cf4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	; 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e1ec      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e52:	4b61      	ldr	r3, [pc, #388]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0xe8>
 8005e5e:	e014      	b.n	8005e8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fd ff48 	bl	8003cf4 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e68:	f7fd ff44 	bl	8003cf4 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	; 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1d8      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7a:	4b57      	ldr	r3, [pc, #348]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x110>
 8005e86:	e000      	b.n	8005e8a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d069      	beq.n	8005f6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e96:	4b50      	ldr	r3, [pc, #320]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea2:	4b4d      	ldr	r3, [pc, #308]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d11c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x190>
 8005eae:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d116      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x17a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d001      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e1ac      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed2:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	493d      	ldr	r1, [pc, #244]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee6:	e040      	b.n	8005f6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d023      	beq.n	8005f38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ef0:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a38      	ldr	r2, [pc, #224]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fd fefa 	bl	8003cf4 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f04:	f7fd fef6 	bl	8003cf4 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e18a      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f16:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f22:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4929      	ldr	r1, [pc, #164]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
 8005f36:	e018      	b.n	8005f6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f38:	4b27      	ldr	r3, [pc, #156]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a26      	ldr	r2, [pc, #152]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fd fed6 	bl	8003cf4 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f4c:	f7fd fed2 	bl	8003cf4 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e166      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d038      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d019      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f7e:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8a:	f7fd feb3 	bl	8003cf4 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f92:	f7fd feaf 	bl	8003cf4 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e143      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <HAL_RCC_OscConfig+0x23a>
 8005fb0:	e01a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <HAL_RCC_OscConfig+0x280>)
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbe:	f7fd fe99 	bl	8003cf4 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc4:	e00a      	b.n	8005fdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fd fe95 	bl	8003cf4 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d903      	bls.n	8005fdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e129      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
 8005fd8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fdc:	4b95      	ldr	r3, [pc, #596]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8005fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ee      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80a4 	beq.w	800613e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff6:	4b8f      	ldr	r3, [pc, #572]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10d      	bne.n	800601e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006002:	4b8c      	ldr	r3, [pc, #560]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	4a8b      	ldr	r2, [pc, #556]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600c:	6413      	str	r3, [r2, #64]	; 0x40
 800600e:	4b89      	ldr	r3, [pc, #548]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800601a:	2301      	movs	r3, #1
 800601c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800601e:	4b86      	ldr	r3, [pc, #536]	; (8006238 <HAL_RCC_OscConfig+0x4e0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d118      	bne.n	800605c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800602a:	4b83      	ldr	r3, [pc, #524]	; (8006238 <HAL_RCC_OscConfig+0x4e0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a82      	ldr	r2, [pc, #520]	; (8006238 <HAL_RCC_OscConfig+0x4e0>)
 8006030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006036:	f7fd fe5d 	bl	8003cf4 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800603e:	f7fd fe59 	bl	8003cf4 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b64      	cmp	r3, #100	; 0x64
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e0ed      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006050:	4b79      	ldr	r3, [pc, #484]	; (8006238 <HAL_RCC_OscConfig+0x4e0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0f0      	beq.n	800603e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d106      	bne.n	8006072 <HAL_RCC_OscConfig+0x31a>
 8006064:	4b73      	ldr	r3, [pc, #460]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	4a72      	ldr	r2, [pc, #456]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	6713      	str	r3, [r2, #112]	; 0x70
 8006070:	e02d      	b.n	80060ce <HAL_RCC_OscConfig+0x376>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10c      	bne.n	8006094 <HAL_RCC_OscConfig+0x33c>
 800607a:	4b6e      	ldr	r3, [pc, #440]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	4a6d      	ldr	r2, [pc, #436]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	6713      	str	r3, [r2, #112]	; 0x70
 8006086:	4b6b      	ldr	r3, [pc, #428]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	4a6a      	ldr	r2, [pc, #424]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 800608c:	f023 0304 	bic.w	r3, r3, #4
 8006090:	6713      	str	r3, [r2, #112]	; 0x70
 8006092:	e01c      	b.n	80060ce <HAL_RCC_OscConfig+0x376>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b05      	cmp	r3, #5
 800609a:	d10c      	bne.n	80060b6 <HAL_RCC_OscConfig+0x35e>
 800609c:	4b65      	ldr	r3, [pc, #404]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4a64      	ldr	r2, [pc, #400]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060a2:	f043 0304 	orr.w	r3, r3, #4
 80060a6:	6713      	str	r3, [r2, #112]	; 0x70
 80060a8:	4b62      	ldr	r3, [pc, #392]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	4a61      	ldr	r2, [pc, #388]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	6713      	str	r3, [r2, #112]	; 0x70
 80060b4:	e00b      	b.n	80060ce <HAL_RCC_OscConfig+0x376>
 80060b6:	4b5f      	ldr	r3, [pc, #380]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a5e      	ldr	r2, [pc, #376]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	6713      	str	r3, [r2, #112]	; 0x70
 80060c2:	4b5c      	ldr	r3, [pc, #368]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a5b      	ldr	r2, [pc, #364]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060c8:	f023 0304 	bic.w	r3, r3, #4
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d015      	beq.n	8006102 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d6:	f7fd fe0d 	bl	8003cf4 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060dc:	e00a      	b.n	80060f4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060de:	f7fd fe09 	bl	8003cf4 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e09b      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f4:	4b4f      	ldr	r3, [pc, #316]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0ee      	beq.n	80060de <HAL_RCC_OscConfig+0x386>
 8006100:	e014      	b.n	800612c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006102:	f7fd fdf7 	bl	8003cf4 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006108:	e00a      	b.n	8006120 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800610a:	f7fd fdf3 	bl	8003cf4 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f241 3288 	movw	r2, #5000	; 0x1388
 8006118:	4293      	cmp	r3, r2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e085      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006120:	4b44      	ldr	r3, [pc, #272]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ee      	bne.n	800610a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d105      	bne.n	800613e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006132:	4b40      	ldr	r3, [pc, #256]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	4a3f      	ldr	r2, [pc, #252]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800613c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d071      	beq.n	800622a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006146:	4b3b      	ldr	r3, [pc, #236]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 030c 	and.w	r3, r3, #12
 800614e:	2b08      	cmp	r3, #8
 8006150:	d069      	beq.n	8006226 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d14b      	bne.n	80061f2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615a:	4b36      	ldr	r3, [pc, #216]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a35      	ldr	r2, [pc, #212]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006166:	f7fd fdc5 	bl	8003cf4 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800616e:	f7fd fdc1 	bl	8003cf4 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e055      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006180:	4b2c      	ldr	r3, [pc, #176]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	019b      	lsls	r3, r3, #6
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	3b01      	subs	r3, #1
 80061a6:	041b      	lsls	r3, r3, #16
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	061b      	lsls	r3, r3, #24
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	071b      	lsls	r3, r3, #28
 80061b8:	491e      	ldr	r1, [pc, #120]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061be:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80061c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fd fd93 	bl	8003cf4 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d2:	f7fd fd8f 	bl	8003cf4 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e023      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e4:	4b13      	ldr	r3, [pc, #76]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCC_OscConfig+0x47a>
 80061f0:	e01b      	b.n	800622a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f2:	4b10      	ldr	r3, [pc, #64]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a0f      	ldr	r2, [pc, #60]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 80061f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fe:	f7fd fd79 	bl	8003cf4 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006206:	f7fd fd75 	bl	8003cf4 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e009      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006218:	4b06      	ldr	r3, [pc, #24]	; (8006234 <HAL_RCC_OscConfig+0x4dc>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f0      	bne.n	8006206 <HAL_RCC_OscConfig+0x4ae>
 8006224:	e001      	b.n	800622a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40023800 	.word	0x40023800
 8006238:	40007000 	.word	0x40007000

0800623c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0ce      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006254:	4b69      	ldr	r3, [pc, #420]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d910      	bls.n	8006284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006262:	4b66      	ldr	r3, [pc, #408]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 020f 	bic.w	r2, r3, #15
 800626a:	4964      	ldr	r1, [pc, #400]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	4b62      	ldr	r3, [pc, #392]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0b6      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d020      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800629c:	4b58      	ldr	r3, [pc, #352]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	4a57      	ldr	r2, [pc, #348]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80062a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062b4:	4b52      	ldr	r3, [pc, #328]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4a51      	ldr	r2, [pc, #324]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80062ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062c0:	4b4f      	ldr	r3, [pc, #316]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	494c      	ldr	r1, [pc, #304]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d040      	beq.n	8006360 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e6:	4b46      	ldr	r3, [pc, #280]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d115      	bne.n	800631e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e07d      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d107      	bne.n	800630e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fe:	4b40      	ldr	r3, [pc, #256]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e071      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630e:	4b3c      	ldr	r3, [pc, #240]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e069      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800631e:	4b38      	ldr	r3, [pc, #224]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f023 0203 	bic.w	r2, r3, #3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4935      	ldr	r1, [pc, #212]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 800632c:	4313      	orrs	r3, r2
 800632e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006330:	f7fd fce0 	bl	8003cf4 <HAL_GetTick>
 8006334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006336:	e00a      	b.n	800634e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006338:	f7fd fcdc 	bl	8003cf4 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f241 3288 	movw	r2, #5000	; 0x1388
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e051      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 020c 	and.w	r2, r3, #12
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	429a      	cmp	r2, r3
 800635e:	d1eb      	bne.n	8006338 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006360:	4b26      	ldr	r3, [pc, #152]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d210      	bcs.n	8006390 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636e:	4b23      	ldr	r3, [pc, #140]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 020f 	bic.w	r2, r3, #15
 8006376:	4921      	ldr	r1, [pc, #132]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800637e:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <HAL_RCC_ClockConfig+0x1c0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d001      	beq.n	8006390 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e030      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800639c:	4b18      	ldr	r3, [pc, #96]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4915      	ldr	r1, [pc, #84]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	490d      	ldr	r1, [pc, #52]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ce:	f000 f81d 	bl	800640c <HAL_RCC_GetSysClockFreq>
 80063d2:	4601      	mov	r1, r0
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <HAL_RCC_ClockConfig+0x1c4>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <HAL_RCC_ClockConfig+0x1c8>)
 80063e0:	5cd3      	ldrb	r3, [r2, r3]
 80063e2:	fa21 f303 	lsr.w	r3, r1, r3
 80063e6:	4a08      	ldr	r2, [pc, #32]	; (8006408 <HAL_RCC_ClockConfig+0x1cc>)
 80063e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80063ea:	2000      	movs	r0, #0
 80063ec:	f7fd fc3e 	bl	8003c6c <HAL_InitTick>

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40023c00 	.word	0x40023c00
 8006400:	40023800 	.word	0x40023800
 8006404:	0800e498 	.word	0x0800e498
 8006408:	20000008 	.word	0x20000008

0800640c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800640c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	607b      	str	r3, [r7, #4]
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	2300      	movs	r3, #0
 800641c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006422:	4b63      	ldr	r3, [pc, #396]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 030c 	and.w	r3, r3, #12
 800642a:	2b04      	cmp	r3, #4
 800642c:	d007      	beq.n	800643e <HAL_RCC_GetSysClockFreq+0x32>
 800642e:	2b08      	cmp	r3, #8
 8006430:	d008      	beq.n	8006444 <HAL_RCC_GetSysClockFreq+0x38>
 8006432:	2b00      	cmp	r3, #0
 8006434:	f040 80b4 	bne.w	80065a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006438:	4b5e      	ldr	r3, [pc, #376]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800643a:	60bb      	str	r3, [r7, #8]
       break;
 800643c:	e0b3      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800643e:	4b5e      	ldr	r3, [pc, #376]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006440:	60bb      	str	r3, [r7, #8]
      break;
 8006442:	e0b0      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006444:	4b5a      	ldr	r3, [pc, #360]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800644c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800644e:	4b58      	ldr	r3, [pc, #352]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d04a      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800645a:	4b55      	ldr	r3, [pc, #340]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	099b      	lsrs	r3, r3, #6
 8006460:	f04f 0400 	mov.w	r4, #0
 8006464:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	ea03 0501 	and.w	r5, r3, r1
 8006470:	ea04 0602 	and.w	r6, r4, r2
 8006474:	4629      	mov	r1, r5
 8006476:	4632      	mov	r2, r6
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	f04f 0400 	mov.w	r4, #0
 8006480:	0154      	lsls	r4, r2, #5
 8006482:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006486:	014b      	lsls	r3, r1, #5
 8006488:	4619      	mov	r1, r3
 800648a:	4622      	mov	r2, r4
 800648c:	1b49      	subs	r1, r1, r5
 800648e:	eb62 0206 	sbc.w	r2, r2, r6
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	f04f 0400 	mov.w	r4, #0
 800649a:	0194      	lsls	r4, r2, #6
 800649c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80064a0:	018b      	lsls	r3, r1, #6
 80064a2:	1a5b      	subs	r3, r3, r1
 80064a4:	eb64 0402 	sbc.w	r4, r4, r2
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	00e2      	lsls	r2, r4, #3
 80064b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064b6:	00d9      	lsls	r1, r3, #3
 80064b8:	460b      	mov	r3, r1
 80064ba:	4614      	mov	r4, r2
 80064bc:	195b      	adds	r3, r3, r5
 80064be:	eb44 0406 	adc.w	r4, r4, r6
 80064c2:	f04f 0100 	mov.w	r1, #0
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	0262      	lsls	r2, r4, #9
 80064cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80064d0:	0259      	lsls	r1, r3, #9
 80064d2:	460b      	mov	r3, r1
 80064d4:	4614      	mov	r4, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	4621      	mov	r1, r4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f04f 0400 	mov.w	r4, #0
 80064e0:	461a      	mov	r2, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	f7f9 ff54 	bl	8000390 <__aeabi_uldivmod>
 80064e8:	4603      	mov	r3, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e049      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f0:	4b2f      	ldr	r3, [pc, #188]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	099b      	lsrs	r3, r3, #6
 80064f6:	f04f 0400 	mov.w	r4, #0
 80064fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	ea03 0501 	and.w	r5, r3, r1
 8006506:	ea04 0602 	and.w	r6, r4, r2
 800650a:	4629      	mov	r1, r5
 800650c:	4632      	mov	r2, r6
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	f04f 0400 	mov.w	r4, #0
 8006516:	0154      	lsls	r4, r2, #5
 8006518:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800651c:	014b      	lsls	r3, r1, #5
 800651e:	4619      	mov	r1, r3
 8006520:	4622      	mov	r2, r4
 8006522:	1b49      	subs	r1, r1, r5
 8006524:	eb62 0206 	sbc.w	r2, r2, r6
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	f04f 0400 	mov.w	r4, #0
 8006530:	0194      	lsls	r4, r2, #6
 8006532:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006536:	018b      	lsls	r3, r1, #6
 8006538:	1a5b      	subs	r3, r3, r1
 800653a:	eb64 0402 	sbc.w	r4, r4, r2
 800653e:	f04f 0100 	mov.w	r1, #0
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	00e2      	lsls	r2, r4, #3
 8006548:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800654c:	00d9      	lsls	r1, r3, #3
 800654e:	460b      	mov	r3, r1
 8006550:	4614      	mov	r4, r2
 8006552:	195b      	adds	r3, r3, r5
 8006554:	eb44 0406 	adc.w	r4, r4, r6
 8006558:	f04f 0100 	mov.w	r1, #0
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	02a2      	lsls	r2, r4, #10
 8006562:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006566:	0299      	lsls	r1, r3, #10
 8006568:	460b      	mov	r3, r1
 800656a:	4614      	mov	r4, r2
 800656c:	4618      	mov	r0, r3
 800656e:	4621      	mov	r1, r4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f04f 0400 	mov.w	r4, #0
 8006576:	461a      	mov	r2, r3
 8006578:	4623      	mov	r3, r4
 800657a:	f7f9 ff09 	bl	8000390 <__aeabi_uldivmod>
 800657e:	4603      	mov	r3, r0
 8006580:	460c      	mov	r4, r1
 8006582:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	0c1b      	lsrs	r3, r3, #16
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	3301      	adds	r3, #1
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	60bb      	str	r3, [r7, #8]
      break;
 800659e:	e002      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80065a2:	60bb      	str	r3, [r7, #8]
      break;
 80065a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a6:	68bb      	ldr	r3, [r7, #8]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b0:	40023800 	.word	0x40023800
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	007a1200 	.word	0x007a1200

080065bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c0:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000008 	.word	0x20000008

080065d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065d8:	f7ff fff0 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 80065dc:	4601      	mov	r1, r0
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0a9b      	lsrs	r3, r3, #10
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4a03      	ldr	r2, [pc, #12]	; (80065f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ea:	5cd3      	ldrb	r3, [r2, r3]
 80065ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40023800 	.word	0x40023800
 80065f8:	0800e4a8 	.word	0x0800e4a8

080065fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006600:	f7ff ffdc 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8006604:	4601      	mov	r1, r0
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	0b5b      	lsrs	r3, r3, #13
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	4a03      	ldr	r2, [pc, #12]	; (8006620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006612:	5cd3      	ldrb	r3, [r2, r3]
 8006614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	0800e4a8 	.word	0x0800e4a8

08006624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d012      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800664c:	4b69      	ldr	r3, [pc, #420]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	4a68      	ldr	r2, [pc, #416]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006656:	6093      	str	r3, [r2, #8]
 8006658:	4b66      	ldr	r3, [pc, #408]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	4964      	ldr	r1, [pc, #400]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800666e:	2301      	movs	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d017      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800667e:	4b5d      	ldr	r3, [pc, #372]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	4959      	ldr	r1, [pc, #356]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669c:	d101      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800669e:	2301      	movs	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80066aa:	2301      	movs	r3, #1
 80066ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d017      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066ba:	4b4e      	ldr	r3, [pc, #312]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	494a      	ldr	r1, [pc, #296]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d8:	d101      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80066da:	2301      	movs	r3, #1
 80066dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80066e6:	2301      	movs	r3, #1
 80066e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066f6:	2301      	movs	r3, #1
 80066f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 808b 	beq.w	800681e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006708:	4b3a      	ldr	r3, [pc, #232]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	4a39      	ldr	r2, [pc, #228]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006712:	6413      	str	r3, [r2, #64]	; 0x40
 8006714:	4b37      	ldr	r3, [pc, #220]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006720:	4b35      	ldr	r3, [pc, #212]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a34      	ldr	r2, [pc, #208]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672c:	f7fd fae2 	bl	8003cf4 <HAL_GetTick>
 8006730:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006734:	f7fd fade 	bl	8003cf4 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	; 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e38d      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006746:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006752:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d035      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	429a      	cmp	r2, r3
 800676e:	d02e      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006770:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006778:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800677a:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006784:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006790:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006792:	4a18      	ldr	r2, [pc, #96]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006798:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d114      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fd faa6 	bl	8003cf4 <HAL_GetTick>
 80067a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067aa:	e00a      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ac:	f7fd faa2 	bl	8003cf4 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e34f      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0ee      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067da:	d111      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067e8:	4b04      	ldr	r3, [pc, #16]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067ea:	400b      	ands	r3, r1
 80067ec:	4901      	ldr	r1, [pc, #4]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
 80067f2:	e00b      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	40007000 	.word	0x40007000
 80067fc:	0ffffcff 	.word	0x0ffffcff
 8006800:	4bb3      	ldr	r3, [pc, #716]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	4ab2      	ldr	r2, [pc, #712]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006806:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800680a:	6093      	str	r3, [r2, #8]
 800680c:	4bb0      	ldr	r3, [pc, #704]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800680e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006818:	49ad      	ldr	r1, [pc, #692]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800681a:	4313      	orrs	r3, r2
 800681c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b00      	cmp	r3, #0
 8006828:	d010      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800682a:	4ba9      	ldr	r3, [pc, #676]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006830:	4aa7      	ldr	r2, [pc, #668]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006836:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800683a:	4ba5      	ldr	r3, [pc, #660]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800683c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	49a2      	ldr	r1, [pc, #648]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006858:	4b9d      	ldr	r3, [pc, #628]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006866:	499a      	ldr	r1, [pc, #616]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800687a:	4b95      	ldr	r3, [pc, #596]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006888:	4991      	ldr	r1, [pc, #580]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800689c:	4b8c      	ldr	r3, [pc, #560]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068aa:	4989      	ldr	r1, [pc, #548]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068be:	4b84      	ldr	r3, [pc, #528]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4980      	ldr	r1, [pc, #512]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068e0:	4b7b      	ldr	r3, [pc, #492]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	4978      	ldr	r1, [pc, #480]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006902:	4b73      	ldr	r3, [pc, #460]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006908:	f023 020c 	bic.w	r2, r3, #12
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006910:	496f      	ldr	r1, [pc, #444]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006924:	4b6a      	ldr	r3, [pc, #424]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006932:	4967      	ldr	r1, [pc, #412]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006946:	4b62      	ldr	r3, [pc, #392]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006954:	495e      	ldr	r1, [pc, #376]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006968:	4b59      	ldr	r3, [pc, #356]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006976:	4956      	ldr	r1, [pc, #344]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800698a:	4b51      	ldr	r3, [pc, #324]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006990:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006998:	494d      	ldr	r1, [pc, #308]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80069ac:	4b48      	ldr	r3, [pc, #288]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ba:	4945      	ldr	r1, [pc, #276]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069ce:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069dc:	493c      	ldr	r1, [pc, #240]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069f0:	4b37      	ldr	r3, [pc, #220]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069fe:	4934      	ldr	r1, [pc, #208]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a12:	4b2f      	ldr	r3, [pc, #188]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a20:	492b      	ldr	r1, [pc, #172]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a30:	d101      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a42:	2301      	movs	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a52:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a60:	491b      	ldr	r1, [pc, #108]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a74:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a84:	4912      	ldr	r1, [pc, #72]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006a98:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa8:	4909      	ldr	r1, [pc, #36]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00f      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	e002      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	4985      	ldr	r1, [pc, #532]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006ae8:	4b80      	ldr	r3, [pc, #512]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af8:	497c      	ldr	r1, [pc, #496]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d005      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b0e:	f040 80d6 	bne.w	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b12:	4b76      	ldr	r3, [pc, #472]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a75      	ldr	r2, [pc, #468]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1e:	f7fd f8e9 	bl	8003cf4 <HAL_GetTick>
 8006b22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b24:	e008      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b26:	f7fd f8e5 	bl	8003cf4 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b64      	cmp	r3, #100	; 0x64
 8006b32:	d901      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e194      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b38:	4b6c      	ldr	r3, [pc, #432]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f0      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d021      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11d      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b58:	4b64      	ldr	r3, [pc, #400]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5e:	0c1b      	lsrs	r3, r3, #16
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b66:	4b61      	ldr	r3, [pc, #388]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6c:	0e1b      	lsrs	r3, r3, #24
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	019a      	lsls	r2, r3, #6
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	041b      	lsls	r3, r3, #16
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	061b      	lsls	r3, r3, #24
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	071b      	lsls	r3, r3, #28
 8006b8c:	4957      	ldr	r1, [pc, #348]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba8:	d00a      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d02e      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bbe:	d129      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006bc0:	4b4a      	ldr	r3, [pc, #296]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	f003 0303 	and.w	r3, r3, #3
 8006bcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bce:	4b47      	ldr	r3, [pc, #284]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd4:	0f1b      	lsrs	r3, r3, #28
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	019a      	lsls	r2, r3, #6
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	061b      	lsls	r3, r3, #24
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	071b      	lsls	r3, r3, #28
 8006bf4:	493d      	ldr	r1, [pc, #244]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bfc:	4b3b      	ldr	r3, [pc, #236]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c02:	f023 021f 	bic.w	r2, r3, #31
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	4937      	ldr	r1, [pc, #220]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01d      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c20:	4b32      	ldr	r3, [pc, #200]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c26:	0e1b      	lsrs	r3, r3, #24
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c34:	0f1b      	lsrs	r3, r3, #28
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	019a      	lsls	r2, r3, #6
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	071b      	lsls	r3, r3, #28
 8006c54:	4925      	ldr	r1, [pc, #148]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	019a      	lsls	r2, r3, #6
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	041b      	lsls	r3, r3, #16
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	061b      	lsls	r3, r3, #24
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	071b      	lsls	r3, r3, #28
 8006c84:	4919      	ldr	r1, [pc, #100]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c8c:	4b17      	ldr	r3, [pc, #92]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a16      	ldr	r2, [pc, #88]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c98:	f7fd f82c 	bl	8003cf4 <HAL_GetTick>
 8006c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ca0:	f7fd f828 	bl	8003cf4 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b64      	cmp	r3, #100	; 0x64
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e0d7      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cb2:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	f040 80cd 	bne.w	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a08      	ldr	r2, [pc, #32]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd2:	f7fd f80f 	bl	8003cf4 <HAL_GetTick>
 8006cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cd8:	e00a      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cda:	f7fd f80b 	bl	8003cf4 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b64      	cmp	r3, #100	; 0x64
 8006ce6:	d903      	bls.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e0ba      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006cec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cf0:	4b5e      	ldr	r3, [pc, #376]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cfc:	d0ed      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d02e      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d12a      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d26:	4b51      	ldr	r3, [pc, #324]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2c:	0c1b      	lsrs	r3, r3, #16
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d34:	4b4d      	ldr	r3, [pc, #308]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	0f1b      	lsrs	r3, r3, #28
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	019a      	lsls	r2, r3, #6
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	071b      	lsls	r3, r3, #28
 8006d5a:	4944      	ldr	r1, [pc, #272]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d62:	4b42      	ldr	r3, [pc, #264]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d70:	3b01      	subs	r3, #1
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	493d      	ldr	r1, [pc, #244]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d022      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d90:	d11d      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d92:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	0e1b      	lsrs	r3, r3, #24
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006da0:	4b32      	ldr	r3, [pc, #200]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da6:	0f1b      	lsrs	r3, r3, #28
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	019a      	lsls	r2, r3, #6
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	061b      	lsls	r3, r3, #24
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	071b      	lsls	r3, r3, #28
 8006dc6:	4929      	ldr	r1, [pc, #164]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dda:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	019a      	lsls	r2, r3, #6
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	431a      	orrs	r2, r3
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	061b      	lsls	r3, r3, #24
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	071b      	lsls	r3, r3, #28
 8006e0e:	4917      	ldr	r1, [pc, #92]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4911      	ldr	r1, [pc, #68]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0e      	ldr	r2, [pc, #56]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e38:	f7fc ff5c 	bl	8003cf4 <HAL_GetTick>
 8006e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e40:	f7fc ff58 	bl	8003cf4 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b64      	cmp	r3, #100	; 0x64
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e007      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5e:	d1ef      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40023800 	.word	0x40023800

08006e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e084      	b.n	8006f8c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fc fd31 	bl	8003904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ec2:	d902      	bls.n	8006eca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e002      	b.n	8006ed0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ece:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ed8:	d007      	beq.n	8006eea <HAL_SPI_Init+0x7a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ee2:	d002      	beq.n	8006eea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006efa:	d903      	bls.n	8006f04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
 8006f02:	e002      	b.n	8006f0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	ea42 0103 	orr.w	r1, r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	f003 0204 	and.w	r2, r3, #4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	ea42 0103 	orr.w	r1, r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69da      	ldr	r2, [r3, #28]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_SPI_Transmit+0x22>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e150      	b.n	8007258 <HAL_SPI_Transmit+0x2c4>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fbe:	f7fc fe99 	bl	8003cf4 <HAL_GetTick>
 8006fc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d002      	beq.n	8006fda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fd8:	e135      	b.n	8007246 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_SPI_Transmit+0x52>
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fea:	e12c      	b.n	8007246 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2203      	movs	r2, #3
 8006ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	88fa      	ldrh	r2, [r7, #6]
 800700a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007036:	d107      	bne.n	8007048 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007046:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d007      	beq.n	8007066 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007064:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800706e:	d94b      	bls.n	8007108 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_Transmit+0xea>
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d13e      	bne.n	80070fc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	881a      	ldrh	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	1c9a      	adds	r2, r3, #2
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070a2:	e02b      	b.n	80070fc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d112      	bne.n	80070d8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	881a      	ldrh	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	1c9a      	adds	r2, r3, #2
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070d6:	e011      	b.n	80070fc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070d8:	f7fc fe0c 	bl	8003cf4 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d803      	bhi.n	80070f0 <HAL_SPI_Transmit+0x15c>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ee:	d102      	bne.n	80070f6 <HAL_SPI_Transmit+0x162>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070fa:	e0a4      	b.n	8007246 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ce      	bne.n	80070a4 <HAL_SPI_Transmit+0x110>
 8007106:	e07c      	b.n	8007202 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_SPI_Transmit+0x182>
 8007110:	8afb      	ldrh	r3, [r7, #22]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d170      	bne.n	80071f8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b01      	cmp	r3, #1
 800711e:	d912      	bls.n	8007146 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	881a      	ldrh	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	1c9a      	adds	r2, r3, #2
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b02      	subs	r3, #2
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007144:	e058      	b.n	80071f8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	7812      	ldrb	r2, [r2, #0]
 8007152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800716c:	e044      	b.n	80071f8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b02      	cmp	r3, #2
 800717a:	d12b      	bne.n	80071d4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b01      	cmp	r3, #1
 8007184:	d912      	bls.n	80071ac <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	881a      	ldrh	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	1c9a      	adds	r2, r3, #2
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b02      	subs	r3, #2
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071aa:	e025      	b.n	80071f8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	330c      	adds	r3, #12
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071d2:	e011      	b.n	80071f8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d4:	f7fc fd8e 	bl	8003cf4 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d803      	bhi.n	80071ec <HAL_SPI_Transmit+0x258>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ea:	d102      	bne.n	80071f2 <HAL_SPI_Transmit+0x25e>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d102      	bne.n	80071f8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071f6:	e026      	b.n	8007246 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1b5      	bne.n	800716e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fc94 	bl	8007b34 <SPI_EndRxTxTransaction>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2220      	movs	r2, #32
 8007216:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	77fb      	strb	r3, [r7, #31]
 8007242:	e000      	b.n	8007246 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007244:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007256:	7ffb      	ldrb	r3, [r7, #31]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af02      	add	r7, sp, #8
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727c:	d112      	bne.n	80072a4 <HAL_SPI_Receive+0x44>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10e      	bne.n	80072a4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2204      	movs	r2, #4
 800728a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f908 	bl	80074b0 <HAL_SPI_TransmitReceive>
 80072a0:	4603      	mov	r3, r0
 80072a2:	e101      	b.n	80074a8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_SPI_Receive+0x52>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e0fa      	b.n	80074a8 <HAL_SPI_Receive+0x248>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072ba:	f7fc fd1b 	bl	8003cf4 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d002      	beq.n	80072d2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072cc:	2302      	movs	r3, #2
 80072ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072d0:	e0e1      	b.n	8007496 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_SPI_Receive+0x7e>
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072e2:	e0d8      	b.n	8007496 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2204      	movs	r2, #4
 80072e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800732e:	d908      	bls.n	8007342 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	e007      	b.n	8007352 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800735a:	d107      	bne.n	800736c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800736a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007376:	2b40      	cmp	r3, #64	; 0x40
 8007378:	d007      	beq.n	800738a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007388:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007392:	d867      	bhi.n	8007464 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007394:	e030      	b.n	80073f8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d117      	bne.n	80073d4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f103 020c 	add.w	r2, r3, #12
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80073d2:	e011      	b.n	80073f8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d4:	f7fc fc8e 	bl	8003cf4 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d803      	bhi.n	80073ec <HAL_SPI_Receive+0x18c>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ea:	d102      	bne.n	80073f2 <HAL_SPI_Receive+0x192>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073f6:	e04e      	b.n	8007496 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1c8      	bne.n	8007396 <HAL_SPI_Receive+0x136>
 8007404:	e034      	b.n	8007470 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d115      	bne.n	8007440 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	b292      	uxth	r2, r2
 8007420:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	1c9a      	adds	r2, r3, #2
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800743e:	e011      	b.n	8007464 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007440:	f7fc fc58 	bl	8003cf4 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d803      	bhi.n	8007458 <HAL_SPI_Receive+0x1f8>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007456:	d102      	bne.n	800745e <HAL_SPI_Receive+0x1fe>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007462:	e018      	b.n	8007496 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ca      	bne.n	8007406 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fb05 	bl	8007a84 <SPI_EndRxTransaction>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]
 8007492:	e000      	b.n	8007496 <HAL_SPI_Receive+0x236>
  }

error :
 8007494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08a      	sub	sp, #40	; 0x28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074be:	2301      	movs	r3, #1
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x26>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e1fb      	b.n	80078ce <HAL_SPI_TransmitReceive+0x41e>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074de:	f7fc fc09 	bl	8003cf4 <HAL_GetTick>
 80074e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074f2:	887b      	ldrh	r3, [r7, #2]
 80074f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074fa:	7efb      	ldrb	r3, [r7, #27]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d00e      	beq.n	800751e <HAL_SPI_TransmitReceive+0x6e>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007506:	d106      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x66>
 8007510:	7efb      	ldrb	r3, [r7, #27]
 8007512:	2b04      	cmp	r3, #4
 8007514:	d003      	beq.n	800751e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007516:	2302      	movs	r3, #2
 8007518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800751c:	e1cd      	b.n	80078ba <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x80>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x80>
 800752a:	887b      	ldrh	r3, [r7, #2]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007536:	e1c0      	b.n	80078ba <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b04      	cmp	r3, #4
 8007542:	d003      	beq.n	800754c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2205      	movs	r2, #5
 8007548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	887a      	ldrh	r2, [r7, #2]
 800755c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	887a      	ldrh	r2, [r7, #2]
 8007564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	887a      	ldrh	r2, [r7, #2]
 8007572:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800758e:	d802      	bhi.n	8007596 <HAL_SPI_TransmitReceive+0xe6>
 8007590:	8a3b      	ldrh	r3, [r7, #16]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d908      	bls.n	80075a8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	e007      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d007      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075de:	d97c      	bls.n	80076da <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_SPI_TransmitReceive+0x13e>
 80075e8:	8a7b      	ldrh	r3, [r7, #18]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d169      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f2:	881a      	ldrh	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	1c9a      	adds	r2, r3, #2
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007612:	e056      	b.n	80076c2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b02      	cmp	r3, #2
 8007620:	d11b      	bne.n	800765a <HAL_SPI_TransmitReceive+0x1aa>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d016      	beq.n	800765a <HAL_SPI_TransmitReceive+0x1aa>
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	2b01      	cmp	r3, #1
 8007630:	d113      	bne.n	800765a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	881a      	ldrh	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	1c9a      	adds	r2, r3, #2
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b01      	cmp	r3, #1
 8007666:	d11c      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x1f2>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d016      	beq.n	80076a2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	b292      	uxth	r2, r2
 8007680:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	1c9a      	adds	r2, r3, #2
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800769e:	2301      	movs	r3, #1
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076a2:	f7fc fb27 	bl	8003cf4 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d807      	bhi.n	80076c2 <HAL_SPI_TransmitReceive+0x212>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b8:	d003      	beq.n	80076c2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076c0:	e0fb      	b.n	80078ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1a3      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x164>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d19d      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x164>
 80076d8:	e0df      	b.n	800789a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x23a>
 80076e2:	8a7b      	ldrh	r3, [r7, #18]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	f040 80cb 	bne.w	8007880 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d912      	bls.n	800771a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	881a      	ldrh	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	1c9a      	adds	r2, r3, #2
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	3b02      	subs	r3, #2
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007718:	e0b2      	b.n	8007880 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	7812      	ldrb	r2, [r2, #0]
 8007726:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007740:	e09e      	b.n	8007880 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b02      	cmp	r3, #2
 800774e:	d134      	bne.n	80077ba <HAL_SPI_TransmitReceive+0x30a>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d02f      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x30a>
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	2b01      	cmp	r3, #1
 800775e:	d12c      	bne.n	80077ba <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b01      	cmp	r3, #1
 8007768:	d912      	bls.n	8007790 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	881a      	ldrh	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b02      	subs	r3, #2
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800778e:	e012      	b.n	80077b6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	7812      	ldrb	r2, [r2, #0]
 800779c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d148      	bne.n	800785a <HAL_SPI_TransmitReceive+0x3aa>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d042      	beq.n	800785a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d923      	bls.n	8007828 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	b292      	uxth	r2, r2
 80077ec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b02      	subs	r3, #2
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b01      	cmp	r3, #1
 8007814:	d81f      	bhi.n	8007856 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	e016      	b.n	8007856 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f103 020c 	add.w	r2, r3, #12
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	7812      	ldrb	r2, [r2, #0]
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007856:	2301      	movs	r3, #1
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800785a:	f7fc fa4b 	bl	8003cf4 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007866:	429a      	cmp	r2, r3
 8007868:	d803      	bhi.n	8007872 <HAL_SPI_TransmitReceive+0x3c2>
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007870:	d102      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x3c8>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800787e:	e01c      	b.n	80078ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	f47f af5b 	bne.w	8007742 <HAL_SPI_TransmitReceive+0x292>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	f47f af54 	bne.w	8007742 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f948 	bl	8007b34 <SPI_EndRxTxTransaction>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d006      	beq.n	80078b8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	661a      	str	r2, [r3, #96]	; 0x60
 80078b6:	e000      	b.n	80078ba <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80078b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3728      	adds	r7, #40	; 0x28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	603b      	str	r3, [r7, #0]
 80078e2:	4613      	mov	r3, r2
 80078e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078e6:	e04c      	b.n	8007982 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ee:	d048      	beq.n	8007982 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80078f0:	f7fc fa00 	bl	8003cf4 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d902      	bls.n	8007906 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d13d      	bne.n	8007982 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800791e:	d111      	bne.n	8007944 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007928:	d004      	beq.n	8007934 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007932:	d107      	bne.n	8007944 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794c:	d10f      	bne.n	800796e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800796c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e00f      	b.n	80079a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4013      	ands	r3, r2
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	bf0c      	ite	eq
 8007992:	2301      	moveq	r3, #1
 8007994:	2300      	movne	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	429a      	cmp	r2, r3
 800799e:	d1a3      	bne.n	80078e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	607a      	str	r2, [r7, #4]
 80079b6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80079b8:	e057      	b.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80079c0:	d106      	bne.n	80079d0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d103      	bne.n	80079d0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	330c      	adds	r3, #12
 80079ce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d6:	d048      	beq.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079d8:	f7fc f98c 	bl	8003cf4 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d902      	bls.n	80079ee <SPI_WaitFifoStateUntilTimeout+0x44>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d13d      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a06:	d111      	bne.n	8007a2c <SPI_WaitFifoStateUntilTimeout+0x82>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a10:	d004      	beq.n	8007a1c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1a:	d107      	bne.n	8007a2c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a34:	d10f      	bne.n	8007a56 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e008      	b.n	8007a7c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4013      	ands	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d19f      	bne.n	80079ba <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a98:	d111      	bne.n	8007abe <SPI_EndRxTransaction+0x3a>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aa2:	d004      	beq.n	8007aae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aac:	d107      	bne.n	8007abe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007abc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2180      	movs	r1, #128	; 0x80
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff ff04 	bl	80078d6 <SPI_WaitFlagStateUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e023      	b.n	8007b2c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aec:	d11d      	bne.n	8007b2a <SPI_EndRxTransaction+0xa6>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af6:	d004      	beq.n	8007b02 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b00:	d113      	bne.n	8007b2a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff ff4b 	bl	80079aa <SPI_WaitFifoStateUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1e:	f043 0220 	orr.w	r2, r3, #32
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e000      	b.n	8007b2c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f7ff ff2c 	bl	80079aa <SPI_WaitFifoStateUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5c:	f043 0220 	orr.w	r2, r3, #32
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e027      	b.n	8007bb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7ff feaf 	bl	80078d6 <SPI_WaitFlagStateUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b82:	f043 0220 	orr.w	r2, r3, #32
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e014      	b.n	8007bb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff ff05 	bl	80079aa <SPI_WaitFifoStateUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007baa:	f043 0220 	orr.w	r2, r3, #32
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e000      	b.n	8007bb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e01d      	b.n	8007c0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fb fed0 	bl	800398c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f000 f8ee 	bl	8007de0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <HAL_TIM_Base_Start+0x50>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b06      	cmp	r3, #6
 8007c38:	d00b      	beq.n	8007c52 <HAL_TIM_Base_Start+0x3a>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c40:	d007      	beq.n	8007c52 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0201 	orr.w	r2, r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	00010007 	.word	0x00010007

08007c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_TIM_ConfigClockSource+0x18>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e0a6      	b.n	8007dd2 <HAL_TIM_ConfigClockSource+0x166>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4b4f      	ldr	r3, [pc, #316]	; (8007ddc <HAL_TIM_ConfigClockSource+0x170>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007caa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b40      	cmp	r3, #64	; 0x40
 8007cba:	d067      	beq.n	8007d8c <HAL_TIM_ConfigClockSource+0x120>
 8007cbc:	2b40      	cmp	r3, #64	; 0x40
 8007cbe:	d80b      	bhi.n	8007cd8 <HAL_TIM_ConfigClockSource+0x6c>
 8007cc0:	2b10      	cmp	r3, #16
 8007cc2:	d073      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x140>
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d802      	bhi.n	8007cce <HAL_TIM_ConfigClockSource+0x62>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d06f      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ccc:	e078      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d06c      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x140>
 8007cd2:	2b30      	cmp	r3, #48	; 0x30
 8007cd4:	d06a      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007cd6:	e073      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cd8:	2b70      	cmp	r3, #112	; 0x70
 8007cda:	d00d      	beq.n	8007cf8 <HAL_TIM_ConfigClockSource+0x8c>
 8007cdc:	2b70      	cmp	r3, #112	; 0x70
 8007cde:	d804      	bhi.n	8007cea <HAL_TIM_ConfigClockSource+0x7e>
 8007ce0:	2b50      	cmp	r3, #80	; 0x50
 8007ce2:	d033      	beq.n	8007d4c <HAL_TIM_ConfigClockSource+0xe0>
 8007ce4:	2b60      	cmp	r3, #96	; 0x60
 8007ce6:	d041      	beq.n	8007d6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007ce8:	e06a      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cee:	d066      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x152>
 8007cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf4:	d017      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007cf6:	e063      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	6899      	ldr	r1, [r3, #8]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f000 f984 	bl	8008014 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	609a      	str	r2, [r3, #8]
      break;
 8007d24:	e04c      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6899      	ldr	r1, [r3, #8]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f000 f96d 	bl	8008014 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d48:	609a      	str	r2, [r3, #8]
      break;
 8007d4a:	e039      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6859      	ldr	r1, [r3, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	f000 f8e1 	bl	8007f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2150      	movs	r1, #80	; 0x50
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f93a 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007d6a:	e029      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	6859      	ldr	r1, [r3, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f000 f900 	bl	8007f7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2160      	movs	r1, #96	; 0x60
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f92a 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007d8a:	e019      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6859      	ldr	r1, [r3, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f000 f8c1 	bl	8007f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2140      	movs	r1, #64	; 0x40
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 f91a 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007daa:	e009      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f000 f911 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007dbc:	e000      	b.n	8007dc0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	fffeff88 	.word	0xfffeff88

08007de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a40      	ldr	r2, [pc, #256]	; (8007ef4 <TIM_Base_SetConfig+0x114>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d013      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfe:	d00f      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a3d      	ldr	r2, [pc, #244]	; (8007ef8 <TIM_Base_SetConfig+0x118>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00b      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a3c      	ldr	r2, [pc, #240]	; (8007efc <TIM_Base_SetConfig+0x11c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d007      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a3b      	ldr	r2, [pc, #236]	; (8007f00 <TIM_Base_SetConfig+0x120>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a3a      	ldr	r2, [pc, #232]	; (8007f04 <TIM_Base_SetConfig+0x124>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d108      	bne.n	8007e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a2f      	ldr	r2, [pc, #188]	; (8007ef4 <TIM_Base_SetConfig+0x114>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d02b      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e40:	d027      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2c      	ldr	r2, [pc, #176]	; (8007ef8 <TIM_Base_SetConfig+0x118>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d023      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2b      	ldr	r2, [pc, #172]	; (8007efc <TIM_Base_SetConfig+0x11c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d01f      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <TIM_Base_SetConfig+0x120>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01b      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <TIM_Base_SetConfig+0x124>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d017      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a28      	ldr	r2, [pc, #160]	; (8007f08 <TIM_Base_SetConfig+0x128>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a27      	ldr	r2, [pc, #156]	; (8007f0c <TIM_Base_SetConfig+0x12c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00f      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a26      	ldr	r2, [pc, #152]	; (8007f10 <TIM_Base_SetConfig+0x130>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00b      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a25      	ldr	r2, [pc, #148]	; (8007f14 <TIM_Base_SetConfig+0x134>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d007      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a24      	ldr	r2, [pc, #144]	; (8007f18 <TIM_Base_SetConfig+0x138>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <TIM_Base_SetConfig+0x13c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d108      	bne.n	8007ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a0a      	ldr	r2, [pc, #40]	; (8007ef4 <TIM_Base_SetConfig+0x114>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d003      	beq.n	8007ed8 <TIM_Base_SetConfig+0xf8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a0c      	ldr	r2, [pc, #48]	; (8007f04 <TIM_Base_SetConfig+0x124>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d103      	bne.n	8007ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	615a      	str	r2, [r3, #20]
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	40010000 	.word	0x40010000
 8007ef8:	40000400 	.word	0x40000400
 8007efc:	40000800 	.word	0x40000800
 8007f00:	40000c00 	.word	0x40000c00
 8007f04:	40010400 	.word	0x40010400
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40014400 	.word	0x40014400
 8007f10:	40014800 	.word	0x40014800
 8007f14:	40001800 	.word	0x40001800
 8007f18:	40001c00 	.word	0x40001c00
 8007f1c:	40002000 	.word	0x40002000

08007f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f023 0201 	bic.w	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f023 030a 	bic.w	r3, r3, #10
 8007f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	621a      	str	r2, [r3, #32]
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0210 	bic.w	r2, r3, #16
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	031b      	lsls	r3, r3, #12
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	621a      	str	r2, [r3, #32]
}
 8007fd2:	bf00      	nop
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f043 0307 	orr.w	r3, r3, #7
 8008000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	609a      	str	r2, [r3, #8]
}
 8008008:	bf00      	nop
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800802e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	021a      	lsls	r2, r3, #8
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	431a      	orrs	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	609a      	str	r2, [r3, #8]
}
 8008048:	bf00      	nop
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008068:	2302      	movs	r3, #2
 800806a:	e045      	b.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a1b      	ldr	r2, [pc, #108]	; (8008108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d108      	bne.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ca:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	40010000 	.word	0x40010000
 8008108:	40010400 	.word	0x40010400

0800810c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e040      	b.n	80081a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fb fc4c 	bl	80039cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2224      	movs	r2, #36	; 0x24
 8008138:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa90 	bl	8008670 <UART_SetConfig>
 8008150:	4603      	mov	r3, r0
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e022      	b.n	80081a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fd28 	bl	8008bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008186:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fdaf 	bl	8008cfc <UART_CheckIdleState>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d17f      	bne.n	80082c0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <HAL_UART_Transmit+0x24>
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e078      	b.n	80082c2 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d101      	bne.n	80081de <HAL_UART_Transmit+0x36>
 80081da:	2302      	movs	r3, #2
 80081dc:	e071      	b.n	80082c2 <HAL_UART_Transmit+0x11a>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2221      	movs	r2, #33	; 0x21
 80081f0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80081f2:	f7fb fd7f 	bl	8003cf4 <HAL_GetTick>
 80081f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	88fa      	ldrh	r2, [r7, #6]
 80081fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008210:	d108      	bne.n	8008224 <HAL_UART_Transmit+0x7c>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d104      	bne.n	8008224 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800821a:	2300      	movs	r3, #0
 800821c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	e003      	b.n	800822c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800822c:	e02c      	b.n	8008288 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2200      	movs	r2, #0
 8008236:	2180      	movs	r1, #128	; 0x80
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 fd8e 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e03c      	b.n	80082c2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10b      	bne.n	8008266 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800825c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	3302      	adds	r3, #2
 8008262:	61bb      	str	r3, [r7, #24]
 8008264:	e007      	b.n	8008276 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	781a      	ldrb	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	3301      	adds	r3, #1
 8008274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1cc      	bne.n	800822e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2200      	movs	r2, #0
 800829c:	2140      	movs	r1, #64	; 0x40
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fd5b 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e009      	b.n	80082c2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e000      	b.n	80082c2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80082c0:	2302      	movs	r3, #2
  }
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082de:	2b20      	cmp	r3, #32
 80082e0:	f040 808a 	bne.w	80083f8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_UART_Receive_IT+0x24>
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e082      	b.n	80083fa <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UART_Receive_IT+0x36>
 80082fe:	2302      	movs	r3, #2
 8008300:	e07b      	b.n	80083fa <HAL_UART_Receive_IT+0x12e>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832e:	d10e      	bne.n	800834e <HAL_UART_Receive_IT+0x82>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <HAL_UART_Receive_IT+0x78>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800833e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008342:	e02d      	b.n	80083a0 <HAL_UART_Receive_IT+0xd4>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	22ff      	movs	r2, #255	; 0xff
 8008348:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800834c:	e028      	b.n	80083a0 <HAL_UART_Receive_IT+0xd4>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10d      	bne.n	8008372 <HAL_UART_Receive_IT+0xa6>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <HAL_UART_Receive_IT+0x9c>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	22ff      	movs	r2, #255	; 0xff
 8008362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008366:	e01b      	b.n	80083a0 <HAL_UART_Receive_IT+0xd4>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	227f      	movs	r2, #127	; 0x7f
 800836c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008370:	e016      	b.n	80083a0 <HAL_UART_Receive_IT+0xd4>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800837a:	d10d      	bne.n	8008398 <HAL_UART_Receive_IT+0xcc>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d104      	bne.n	800838e <HAL_UART_Receive_IT+0xc2>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	227f      	movs	r2, #127	; 0x7f
 8008388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800838c:	e008      	b.n	80083a0 <HAL_UART_Receive_IT+0xd4>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	223f      	movs	r2, #63	; 0x3f
 8008392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008396:	e003      	b.n	80083a0 <HAL_UART_Receive_IT+0xd4>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2222      	movs	r2, #34	; 0x22
 80083aa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0201 	orr.w	r2, r2, #1
 80083ba:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c4:	d107      	bne.n	80083d6 <HAL_UART_Receive_IT+0x10a>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4a0d      	ldr	r2, [pc, #52]	; (8008408 <HAL_UART_Receive_IT+0x13c>)
 80083d2:	661a      	str	r2, [r3, #96]	; 0x60
 80083d4:	e002      	b.n	80083dc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4a0c      	ldr	r2, [pc, #48]	; (800840c <HAL_UART_Receive_IT+0x140>)
 80083da:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80083f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	e000      	b.n	80083fa <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80083f8:	2302      	movs	r3, #2
  }
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	08008f2f 	.word	0x08008f2f
 800840c:	08008e89 	.word	0x08008e89

08008410 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d113      	bne.n	8008466 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	f003 0320 	and.w	r3, r3, #32
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00e      	beq.n	8008466 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 80eb 	beq.w	8008632 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
      }
      return;
 8008464:	e0e5      	b.n	8008632 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80c0 	beq.w	80085ee <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d105      	bne.n	8008484 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 80b5 	beq.w	80085ee <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00e      	beq.n	80084ac <HAL_UART_IRQHandler+0x9c>
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008494:	2b00      	cmp	r3, #0
 8008496:	d009      	beq.n	80084ac <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2201      	movs	r2, #1
 800849e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a4:	f043 0201 	orr.w	r2, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <HAL_UART_IRQHandler+0xc4>
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2202      	movs	r2, #2
 80084c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084cc:	f043 0204 	orr.w	r2, r3, #4
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <HAL_UART_IRQHandler+0xec>
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2204      	movs	r2, #4
 80084ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f4:	f043 0202 	orr.w	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d013      	beq.n	800852e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f003 0320 	and.w	r3, r3, #32
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2208      	movs	r2, #8
 8008520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	f043 0208 	orr.w	r2, r3, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d07f      	beq.n	8008636 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	f003 0320 	and.w	r3, r3, #32
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00c      	beq.n	800855a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800855e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	d004      	beq.n	8008578 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008574:	2b00      	cmp	r3, #0
 8008576:	d031      	beq.n	80085dc <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc36 	bl	8008dea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d123      	bne.n	80085d4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d013      	beq.n	80085cc <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a8:	4a26      	ldr	r2, [pc, #152]	; (8008644 <HAL_UART_IRQHandler+0x234>)
 80085aa:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fc f8a2 	bl	80046fa <HAL_DMA_Abort_IT>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d016      	beq.n	80085ea <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80085c6:	4610      	mov	r0, r2
 80085c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ca:	e00e      	b.n	80085ea <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f845 	bl	800865c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d2:	e00a      	b.n	80085ea <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f841 	bl	800865c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085da:	e006      	b.n	80085ea <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f83d 	bl	800865c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80085e8:	e025      	b.n	8008636 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ea:	bf00      	nop
    return;
 80085ec:	e023      	b.n	8008636 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00d      	beq.n	8008614 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d008      	beq.n	8008614 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008606:	2b00      	cmp	r3, #0
 8008608:	d017      	beq.n	800863a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
    }
    return;
 8008612:	e012      	b.n	800863a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00e      	beq.n	800863c <HAL_UART_IRQHandler+0x22c>
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc14 	bl	8008e56 <UART_EndTransmit_IT>
    return;
 800862e:	bf00      	nop
 8008630:	e004      	b.n	800863c <HAL_UART_IRQHandler+0x22c>
      return;
 8008632:	bf00      	nop
 8008634:	e002      	b.n	800863c <HAL_UART_IRQHandler+0x22c>
    return;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <HAL_UART_IRQHandler+0x22c>
    return;
 800863a:	bf00      	nop
  }

}
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	08008e2b 	.word	0x08008e2b

08008648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008678:	2300      	movs	r3, #0
 800867a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	431a      	orrs	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4bb1      	ldr	r3, [pc, #708]	; (8008964 <UART_SetConfig+0x2f4>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	6939      	ldr	r1, [r7, #16]
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a9f      	ldr	r2, [pc, #636]	; (8008968 <UART_SetConfig+0x2f8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d121      	bne.n	8008734 <UART_SetConfig+0xc4>
 80086f0:	4b9e      	ldr	r3, [pc, #632]	; (800896c <UART_SetConfig+0x2fc>)
 80086f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d816      	bhi.n	800872c <UART_SetConfig+0xbc>
 80086fe:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <UART_SetConfig+0x94>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	08008715 	.word	0x08008715
 8008708:	08008721 	.word	0x08008721
 800870c:	0800871b 	.word	0x0800871b
 8008710:	08008727 	.word	0x08008727
 8008714:	2301      	movs	r3, #1
 8008716:	77fb      	strb	r3, [r7, #31]
 8008718:	e151      	b.n	80089be <UART_SetConfig+0x34e>
 800871a:	2302      	movs	r3, #2
 800871c:	77fb      	strb	r3, [r7, #31]
 800871e:	e14e      	b.n	80089be <UART_SetConfig+0x34e>
 8008720:	2304      	movs	r3, #4
 8008722:	77fb      	strb	r3, [r7, #31]
 8008724:	e14b      	b.n	80089be <UART_SetConfig+0x34e>
 8008726:	2308      	movs	r3, #8
 8008728:	77fb      	strb	r3, [r7, #31]
 800872a:	e148      	b.n	80089be <UART_SetConfig+0x34e>
 800872c:	2310      	movs	r3, #16
 800872e:	77fb      	strb	r3, [r7, #31]
 8008730:	bf00      	nop
 8008732:	e144      	b.n	80089be <UART_SetConfig+0x34e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a8d      	ldr	r2, [pc, #564]	; (8008970 <UART_SetConfig+0x300>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d134      	bne.n	80087a8 <UART_SetConfig+0x138>
 800873e:	4b8b      	ldr	r3, [pc, #556]	; (800896c <UART_SetConfig+0x2fc>)
 8008740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008744:	f003 030c 	and.w	r3, r3, #12
 8008748:	2b0c      	cmp	r3, #12
 800874a:	d829      	bhi.n	80087a0 <UART_SetConfig+0x130>
 800874c:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <UART_SetConfig+0xe4>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	08008789 	.word	0x08008789
 8008758:	080087a1 	.word	0x080087a1
 800875c:	080087a1 	.word	0x080087a1
 8008760:	080087a1 	.word	0x080087a1
 8008764:	08008795 	.word	0x08008795
 8008768:	080087a1 	.word	0x080087a1
 800876c:	080087a1 	.word	0x080087a1
 8008770:	080087a1 	.word	0x080087a1
 8008774:	0800878f 	.word	0x0800878f
 8008778:	080087a1 	.word	0x080087a1
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a1 	.word	0x080087a1
 8008784:	0800879b 	.word	0x0800879b
 8008788:	2300      	movs	r3, #0
 800878a:	77fb      	strb	r3, [r7, #31]
 800878c:	e117      	b.n	80089be <UART_SetConfig+0x34e>
 800878e:	2302      	movs	r3, #2
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e114      	b.n	80089be <UART_SetConfig+0x34e>
 8008794:	2304      	movs	r3, #4
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e111      	b.n	80089be <UART_SetConfig+0x34e>
 800879a:	2308      	movs	r3, #8
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e10e      	b.n	80089be <UART_SetConfig+0x34e>
 80087a0:	2310      	movs	r3, #16
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	bf00      	nop
 80087a6:	e10a      	b.n	80089be <UART_SetConfig+0x34e>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a71      	ldr	r2, [pc, #452]	; (8008974 <UART_SetConfig+0x304>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d120      	bne.n	80087f4 <UART_SetConfig+0x184>
 80087b2:	4b6e      	ldr	r3, [pc, #440]	; (800896c <UART_SetConfig+0x2fc>)
 80087b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087bc:	2b10      	cmp	r3, #16
 80087be:	d00f      	beq.n	80087e0 <UART_SetConfig+0x170>
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d802      	bhi.n	80087ca <UART_SetConfig+0x15a>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <UART_SetConfig+0x164>
 80087c8:	e010      	b.n	80087ec <UART_SetConfig+0x17c>
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d005      	beq.n	80087da <UART_SetConfig+0x16a>
 80087ce:	2b30      	cmp	r3, #48	; 0x30
 80087d0:	d009      	beq.n	80087e6 <UART_SetConfig+0x176>
 80087d2:	e00b      	b.n	80087ec <UART_SetConfig+0x17c>
 80087d4:	2300      	movs	r3, #0
 80087d6:	77fb      	strb	r3, [r7, #31]
 80087d8:	e0f1      	b.n	80089be <UART_SetConfig+0x34e>
 80087da:	2302      	movs	r3, #2
 80087dc:	77fb      	strb	r3, [r7, #31]
 80087de:	e0ee      	b.n	80089be <UART_SetConfig+0x34e>
 80087e0:	2304      	movs	r3, #4
 80087e2:	77fb      	strb	r3, [r7, #31]
 80087e4:	e0eb      	b.n	80089be <UART_SetConfig+0x34e>
 80087e6:	2308      	movs	r3, #8
 80087e8:	77fb      	strb	r3, [r7, #31]
 80087ea:	e0e8      	b.n	80089be <UART_SetConfig+0x34e>
 80087ec:	2310      	movs	r3, #16
 80087ee:	77fb      	strb	r3, [r7, #31]
 80087f0:	bf00      	nop
 80087f2:	e0e4      	b.n	80089be <UART_SetConfig+0x34e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a5f      	ldr	r2, [pc, #380]	; (8008978 <UART_SetConfig+0x308>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d120      	bne.n	8008840 <UART_SetConfig+0x1d0>
 80087fe:	4b5b      	ldr	r3, [pc, #364]	; (800896c <UART_SetConfig+0x2fc>)
 8008800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008804:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d00f      	beq.n	800882c <UART_SetConfig+0x1bc>
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	d802      	bhi.n	8008816 <UART_SetConfig+0x1a6>
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <UART_SetConfig+0x1b0>
 8008814:	e010      	b.n	8008838 <UART_SetConfig+0x1c8>
 8008816:	2b80      	cmp	r3, #128	; 0x80
 8008818:	d005      	beq.n	8008826 <UART_SetConfig+0x1b6>
 800881a:	2bc0      	cmp	r3, #192	; 0xc0
 800881c:	d009      	beq.n	8008832 <UART_SetConfig+0x1c2>
 800881e:	e00b      	b.n	8008838 <UART_SetConfig+0x1c8>
 8008820:	2300      	movs	r3, #0
 8008822:	77fb      	strb	r3, [r7, #31]
 8008824:	e0cb      	b.n	80089be <UART_SetConfig+0x34e>
 8008826:	2302      	movs	r3, #2
 8008828:	77fb      	strb	r3, [r7, #31]
 800882a:	e0c8      	b.n	80089be <UART_SetConfig+0x34e>
 800882c:	2304      	movs	r3, #4
 800882e:	77fb      	strb	r3, [r7, #31]
 8008830:	e0c5      	b.n	80089be <UART_SetConfig+0x34e>
 8008832:	2308      	movs	r3, #8
 8008834:	77fb      	strb	r3, [r7, #31]
 8008836:	e0c2      	b.n	80089be <UART_SetConfig+0x34e>
 8008838:	2310      	movs	r3, #16
 800883a:	77fb      	strb	r3, [r7, #31]
 800883c:	bf00      	nop
 800883e:	e0be      	b.n	80089be <UART_SetConfig+0x34e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a4d      	ldr	r2, [pc, #308]	; (800897c <UART_SetConfig+0x30c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d124      	bne.n	8008894 <UART_SetConfig+0x224>
 800884a:	4b48      	ldr	r3, [pc, #288]	; (800896c <UART_SetConfig+0x2fc>)
 800884c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008858:	d012      	beq.n	8008880 <UART_SetConfig+0x210>
 800885a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885e:	d802      	bhi.n	8008866 <UART_SetConfig+0x1f6>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d007      	beq.n	8008874 <UART_SetConfig+0x204>
 8008864:	e012      	b.n	800888c <UART_SetConfig+0x21c>
 8008866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800886a:	d006      	beq.n	800887a <UART_SetConfig+0x20a>
 800886c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008870:	d009      	beq.n	8008886 <UART_SetConfig+0x216>
 8008872:	e00b      	b.n	800888c <UART_SetConfig+0x21c>
 8008874:	2300      	movs	r3, #0
 8008876:	77fb      	strb	r3, [r7, #31]
 8008878:	e0a1      	b.n	80089be <UART_SetConfig+0x34e>
 800887a:	2302      	movs	r3, #2
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e09e      	b.n	80089be <UART_SetConfig+0x34e>
 8008880:	2304      	movs	r3, #4
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e09b      	b.n	80089be <UART_SetConfig+0x34e>
 8008886:	2308      	movs	r3, #8
 8008888:	77fb      	strb	r3, [r7, #31]
 800888a:	e098      	b.n	80089be <UART_SetConfig+0x34e>
 800888c:	2310      	movs	r3, #16
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	bf00      	nop
 8008892:	e094      	b.n	80089be <UART_SetConfig+0x34e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a39      	ldr	r2, [pc, #228]	; (8008980 <UART_SetConfig+0x310>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d124      	bne.n	80088e8 <UART_SetConfig+0x278>
 800889e:	4b33      	ldr	r3, [pc, #204]	; (800896c <UART_SetConfig+0x2fc>)
 80088a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ac:	d012      	beq.n	80088d4 <UART_SetConfig+0x264>
 80088ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b2:	d802      	bhi.n	80088ba <UART_SetConfig+0x24a>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <UART_SetConfig+0x258>
 80088b8:	e012      	b.n	80088e0 <UART_SetConfig+0x270>
 80088ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088be:	d006      	beq.n	80088ce <UART_SetConfig+0x25e>
 80088c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088c4:	d009      	beq.n	80088da <UART_SetConfig+0x26a>
 80088c6:	e00b      	b.n	80088e0 <UART_SetConfig+0x270>
 80088c8:	2301      	movs	r3, #1
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	e077      	b.n	80089be <UART_SetConfig+0x34e>
 80088ce:	2302      	movs	r3, #2
 80088d0:	77fb      	strb	r3, [r7, #31]
 80088d2:	e074      	b.n	80089be <UART_SetConfig+0x34e>
 80088d4:	2304      	movs	r3, #4
 80088d6:	77fb      	strb	r3, [r7, #31]
 80088d8:	e071      	b.n	80089be <UART_SetConfig+0x34e>
 80088da:	2308      	movs	r3, #8
 80088dc:	77fb      	strb	r3, [r7, #31]
 80088de:	e06e      	b.n	80089be <UART_SetConfig+0x34e>
 80088e0:	2310      	movs	r3, #16
 80088e2:	77fb      	strb	r3, [r7, #31]
 80088e4:	bf00      	nop
 80088e6:	e06a      	b.n	80089be <UART_SetConfig+0x34e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a25      	ldr	r2, [pc, #148]	; (8008984 <UART_SetConfig+0x314>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d124      	bne.n	800893c <UART_SetConfig+0x2cc>
 80088f2:	4b1e      	ldr	r3, [pc, #120]	; (800896c <UART_SetConfig+0x2fc>)
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	d012      	beq.n	8008928 <UART_SetConfig+0x2b8>
 8008902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008906:	d802      	bhi.n	800890e <UART_SetConfig+0x29e>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <UART_SetConfig+0x2ac>
 800890c:	e012      	b.n	8008934 <UART_SetConfig+0x2c4>
 800890e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008912:	d006      	beq.n	8008922 <UART_SetConfig+0x2b2>
 8008914:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008918:	d009      	beq.n	800892e <UART_SetConfig+0x2be>
 800891a:	e00b      	b.n	8008934 <UART_SetConfig+0x2c4>
 800891c:	2300      	movs	r3, #0
 800891e:	77fb      	strb	r3, [r7, #31]
 8008920:	e04d      	b.n	80089be <UART_SetConfig+0x34e>
 8008922:	2302      	movs	r3, #2
 8008924:	77fb      	strb	r3, [r7, #31]
 8008926:	e04a      	b.n	80089be <UART_SetConfig+0x34e>
 8008928:	2304      	movs	r3, #4
 800892a:	77fb      	strb	r3, [r7, #31]
 800892c:	e047      	b.n	80089be <UART_SetConfig+0x34e>
 800892e:	2308      	movs	r3, #8
 8008930:	77fb      	strb	r3, [r7, #31]
 8008932:	e044      	b.n	80089be <UART_SetConfig+0x34e>
 8008934:	2310      	movs	r3, #16
 8008936:	77fb      	strb	r3, [r7, #31]
 8008938:	bf00      	nop
 800893a:	e040      	b.n	80089be <UART_SetConfig+0x34e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a11      	ldr	r2, [pc, #68]	; (8008988 <UART_SetConfig+0x318>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d139      	bne.n	80089ba <UART_SetConfig+0x34a>
 8008946:	4b09      	ldr	r3, [pc, #36]	; (800896c <UART_SetConfig+0x2fc>)
 8008948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008954:	d027      	beq.n	80089a6 <UART_SetConfig+0x336>
 8008956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800895a:	d817      	bhi.n	800898c <UART_SetConfig+0x31c>
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01c      	beq.n	800899a <UART_SetConfig+0x32a>
 8008960:	e027      	b.n	80089b2 <UART_SetConfig+0x342>
 8008962:	bf00      	nop
 8008964:	efff69f3 	.word	0xefff69f3
 8008968:	40011000 	.word	0x40011000
 800896c:	40023800 	.word	0x40023800
 8008970:	40004400 	.word	0x40004400
 8008974:	40004800 	.word	0x40004800
 8008978:	40004c00 	.word	0x40004c00
 800897c:	40005000 	.word	0x40005000
 8008980:	40011400 	.word	0x40011400
 8008984:	40007800 	.word	0x40007800
 8008988:	40007c00 	.word	0x40007c00
 800898c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008990:	d006      	beq.n	80089a0 <UART_SetConfig+0x330>
 8008992:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008996:	d009      	beq.n	80089ac <UART_SetConfig+0x33c>
 8008998:	e00b      	b.n	80089b2 <UART_SetConfig+0x342>
 800899a:	2300      	movs	r3, #0
 800899c:	77fb      	strb	r3, [r7, #31]
 800899e:	e00e      	b.n	80089be <UART_SetConfig+0x34e>
 80089a0:	2302      	movs	r3, #2
 80089a2:	77fb      	strb	r3, [r7, #31]
 80089a4:	e00b      	b.n	80089be <UART_SetConfig+0x34e>
 80089a6:	2304      	movs	r3, #4
 80089a8:	77fb      	strb	r3, [r7, #31]
 80089aa:	e008      	b.n	80089be <UART_SetConfig+0x34e>
 80089ac:	2308      	movs	r3, #8
 80089ae:	77fb      	strb	r3, [r7, #31]
 80089b0:	e005      	b.n	80089be <UART_SetConfig+0x34e>
 80089b2:	2310      	movs	r3, #16
 80089b4:	77fb      	strb	r3, [r7, #31]
 80089b6:	bf00      	nop
 80089b8:	e001      	b.n	80089be <UART_SetConfig+0x34e>
 80089ba:	2310      	movs	r3, #16
 80089bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089c6:	d17c      	bne.n	8008ac2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80089c8:	7ffb      	ldrb	r3, [r7, #31]
 80089ca:	2b08      	cmp	r3, #8
 80089cc:	d859      	bhi.n	8008a82 <UART_SetConfig+0x412>
 80089ce:	a201      	add	r2, pc, #4	; (adr r2, 80089d4 <UART_SetConfig+0x364>)
 80089d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d4:	080089f9 	.word	0x080089f9
 80089d8:	08008a17 	.word	0x08008a17
 80089dc:	08008a35 	.word	0x08008a35
 80089e0:	08008a83 	.word	0x08008a83
 80089e4:	08008a4d 	.word	0x08008a4d
 80089e8:	08008a83 	.word	0x08008a83
 80089ec:	08008a83 	.word	0x08008a83
 80089f0:	08008a83 	.word	0x08008a83
 80089f4:	08008a6b 	.word	0x08008a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80089f8:	f7fd fdec 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 80089fc:	4603      	mov	r3, r0
 80089fe:	005a      	lsls	r2, r3, #1
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	441a      	add	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	61bb      	str	r3, [r7, #24]
        break;
 8008a14:	e038      	b.n	8008a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008a16:	f7fd fdf1 	bl	80065fc <HAL_RCC_GetPCLK2Freq>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	005a      	lsls	r2, r3, #1
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	441a      	add	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	61bb      	str	r3, [r7, #24]
        break;
 8008a32:	e029      	b.n	8008a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	085a      	lsrs	r2, r3, #1
 8008a3a:	4b5d      	ldr	r3, [pc, #372]	; (8008bb0 <UART_SetConfig+0x540>)
 8008a3c:	4413      	add	r3, r2
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6852      	ldr	r2, [r2, #4]
 8008a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	61bb      	str	r3, [r7, #24]
        break;
 8008a4a:	e01d      	b.n	8008a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008a4c:	f7fd fcde 	bl	800640c <HAL_RCC_GetSysClockFreq>
 8008a50:	4603      	mov	r3, r0
 8008a52:	005a      	lsls	r2, r3, #1
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	085b      	lsrs	r3, r3, #1
 8008a5a:	441a      	add	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	61bb      	str	r3, [r7, #24]
        break;
 8008a68:	e00e      	b.n	8008a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	61bb      	str	r3, [r7, #24]
        break;
 8008a80:	e002      	b.n	8008a88 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	75fb      	strb	r3, [r7, #23]
        break;
 8008a86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d916      	bls.n	8008abc <UART_SetConfig+0x44c>
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a94:	d212      	bcs.n	8008abc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f023 030f 	bic.w	r3, r3, #15
 8008a9e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	085b      	lsrs	r3, r3, #1
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	89fb      	ldrh	r3, [r7, #14]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	89fa      	ldrh	r2, [r7, #14]
 8008ab8:	60da      	str	r2, [r3, #12]
 8008aba:	e06e      	b.n	8008b9a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
 8008ac0:	e06b      	b.n	8008b9a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8008ac2:	7ffb      	ldrb	r3, [r7, #31]
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d857      	bhi.n	8008b78 <UART_SetConfig+0x508>
 8008ac8:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <UART_SetConfig+0x460>)
 8008aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ace:	bf00      	nop
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008b11 	.word	0x08008b11
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008b79 	.word	0x08008b79
 8008ae0:	08008b45 	.word	0x08008b45
 8008ae4:	08008b79 	.word	0x08008b79
 8008ae8:	08008b79 	.word	0x08008b79
 8008aec:	08008b79 	.word	0x08008b79
 8008af0:	08008b61 	.word	0x08008b61
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008af4:	f7fd fd6e 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8008af8:	4602      	mov	r2, r0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	441a      	add	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	61bb      	str	r3, [r7, #24]
        break;
 8008b0e:	e036      	b.n	8008b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008b10:	f7fd fd74 	bl	80065fc <HAL_RCC_GetPCLK2Freq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	085b      	lsrs	r3, r3, #1
 8008b1c:	441a      	add	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	61bb      	str	r3, [r7, #24]
        break;
 8008b2a:	e028      	b.n	8008b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	085a      	lsrs	r2, r3, #1
 8008b32:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <UART_SetConfig+0x544>)
 8008b34:	4413      	add	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6852      	ldr	r2, [r2, #4]
 8008b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	61bb      	str	r3, [r7, #24]
        break;
 8008b42:	e01c      	b.n	8008b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008b44:	f7fd fc62 	bl	800640c <HAL_RCC_GetSysClockFreq>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	441a      	add	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	61bb      	str	r3, [r7, #24]
        break;
 8008b5e:	e00e      	b.n	8008b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	085b      	lsrs	r3, r3, #1
 8008b66:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	61bb      	str	r3, [r7, #24]
        break;
 8008b76:	e002      	b.n	8008b7e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
        break;
 8008b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b0f      	cmp	r3, #15
 8008b82:	d908      	bls.n	8008b96 <UART_SetConfig+0x526>
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8a:	d204      	bcs.n	8008b96 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	60da      	str	r2, [r3, #12]
 8008b94:	e001      	b.n	8008b9a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3720      	adds	r7, #32
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	01e84800 	.word	0x01e84800
 8008bb4:	00f42400 	.word	0x00f42400

08008bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01a      	beq.n	8008cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb6:	d10a      	bne.n	8008cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	605a      	str	r2, [r3, #4]
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008d0a:	f7fa fff3 	bl	8003cf4 <HAL_GetTick>
 8008d0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d10e      	bne.n	8008d3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f814 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e00a      	b.n	8008d52 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	603b      	str	r3, [r7, #0]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6a:	e02a      	b.n	8008dc2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d72:	d026      	beq.n	8008dc2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d74:	f7fa ffbe 	bl	8003cf4 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d302      	bcc.n	8008d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d11b      	bne.n	8008dc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0201 	bic.w	r2, r2, #1
 8008da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2220      	movs	r2, #32
 8008dae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2220      	movs	r2, #32
 8008db4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e00f      	b.n	8008de2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69da      	ldr	r2, [r3, #28]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	bf0c      	ite	eq
 8008dd2:	2301      	moveq	r3, #1
 8008dd4:	2300      	movne	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	461a      	mov	r2, r3
 8008dda:	79fb      	ldrb	r3, [r7, #7]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d0c5      	beq.n	8008d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e00:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 0201 	bic.w	r2, r2, #1
 8008e10:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fc07 	bl	800865c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e6c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fbe4 	bl	8008648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e96:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e9c:	2b22      	cmp	r3, #34	; 0x22
 8008e9e:	d13a      	bne.n	8008f16 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ea8:	89bb      	ldrh	r3, [r7, #12]
 8008eaa:	b2d9      	uxtb	r1, r3
 8008eac:	89fb      	ldrh	r3, [r7, #14]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb4:	400a      	ands	r2, r1
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d121      	bne.n	8008f26 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008ef0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0201 	bic.w	r2, r2, #1
 8008f00:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2220      	movs	r2, #32
 8008f06:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7f9 fa44 	bl	800239c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f14:	e007      	b.n	8008f26 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	699a      	ldr	r2, [r3, #24]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f042 0208 	orr.w	r2, r2, #8
 8008f24:	619a      	str	r2, [r3, #24]
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f3c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f42:	2b22      	cmp	r3, #34	; 0x22
 8008f44:	d13a      	bne.n	8008fbc <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f54:	89ba      	ldrh	r2, [r7, #12]
 8008f56:	89fb      	ldrh	r3, [r7, #14]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	1c9a      	adds	r2, r3, #2
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d121      	bne.n	8008fcc <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f96:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7f9 f9f1 	bl	800239c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fba:	e007      	b.n	8008fcc <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0208 	orr.w	r2, r2, #8
 8008fca:	619a      	str	r2, [r3, #24]
}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <__errno>:
 8008fd4:	4b01      	ldr	r3, [pc, #4]	; (8008fdc <__errno+0x8>)
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	20000014 	.word	0x20000014

08008fe0 <__libc_init_array>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	4e0d      	ldr	r6, [pc, #52]	; (8009018 <__libc_init_array+0x38>)
 8008fe4:	4c0d      	ldr	r4, [pc, #52]	; (800901c <__libc_init_array+0x3c>)
 8008fe6:	1ba4      	subs	r4, r4, r6
 8008fe8:	10a4      	asrs	r4, r4, #2
 8008fea:	2500      	movs	r5, #0
 8008fec:	42a5      	cmp	r5, r4
 8008fee:	d109      	bne.n	8009004 <__libc_init_array+0x24>
 8008ff0:	4e0b      	ldr	r6, [pc, #44]	; (8009020 <__libc_init_array+0x40>)
 8008ff2:	4c0c      	ldr	r4, [pc, #48]	; (8009024 <__libc_init_array+0x44>)
 8008ff4:	f005 f982 	bl	800e2fc <_init>
 8008ff8:	1ba4      	subs	r4, r4, r6
 8008ffa:	10a4      	asrs	r4, r4, #2
 8008ffc:	2500      	movs	r5, #0
 8008ffe:	42a5      	cmp	r5, r4
 8009000:	d105      	bne.n	800900e <__libc_init_array+0x2e>
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009008:	4798      	blx	r3
 800900a:	3501      	adds	r5, #1
 800900c:	e7ee      	b.n	8008fec <__libc_init_array+0xc>
 800900e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009012:	4798      	blx	r3
 8009014:	3501      	adds	r5, #1
 8009016:	e7f2      	b.n	8008ffe <__libc_init_array+0x1e>
 8009018:	0800e888 	.word	0x0800e888
 800901c:	0800e888 	.word	0x0800e888
 8009020:	0800e888 	.word	0x0800e888
 8009024:	0800e88c 	.word	0x0800e88c

08009028 <memcpy>:
 8009028:	b510      	push	{r4, lr}
 800902a:	1e43      	subs	r3, r0, #1
 800902c:	440a      	add	r2, r1
 800902e:	4291      	cmp	r1, r2
 8009030:	d100      	bne.n	8009034 <memcpy+0xc>
 8009032:	bd10      	pop	{r4, pc}
 8009034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800903c:	e7f7      	b.n	800902e <memcpy+0x6>

0800903e <memset>:
 800903e:	4402      	add	r2, r0
 8009040:	4603      	mov	r3, r0
 8009042:	4293      	cmp	r3, r2
 8009044:	d100      	bne.n	8009048 <memset+0xa>
 8009046:	4770      	bx	lr
 8009048:	f803 1b01 	strb.w	r1, [r3], #1
 800904c:	e7f9      	b.n	8009042 <memset+0x4>

0800904e <__cvt>:
 800904e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009050:	ed2d 8b02 	vpush	{d8}
 8009054:	eeb0 8b40 	vmov.f64	d8, d0
 8009058:	b085      	sub	sp, #20
 800905a:	4617      	mov	r7, r2
 800905c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800905e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009060:	ee18 2a90 	vmov	r2, s17
 8009064:	f025 0520 	bic.w	r5, r5, #32
 8009068:	2a00      	cmp	r2, #0
 800906a:	bfb6      	itet	lt
 800906c:	222d      	movlt	r2, #45	; 0x2d
 800906e:	2200      	movge	r2, #0
 8009070:	eeb1 8b40 	vneglt.f64	d8, d0
 8009074:	2d46      	cmp	r5, #70	; 0x46
 8009076:	460c      	mov	r4, r1
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	d004      	beq.n	8009086 <__cvt+0x38>
 800907c:	2d45      	cmp	r5, #69	; 0x45
 800907e:	d100      	bne.n	8009082 <__cvt+0x34>
 8009080:	3401      	adds	r4, #1
 8009082:	2102      	movs	r1, #2
 8009084:	e000      	b.n	8009088 <__cvt+0x3a>
 8009086:	2103      	movs	r1, #3
 8009088:	ab03      	add	r3, sp, #12
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	ab02      	add	r3, sp, #8
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	4622      	mov	r2, r4
 8009092:	4633      	mov	r3, r6
 8009094:	eeb0 0b48 	vmov.f64	d0, d8
 8009098:	f001 fd66 	bl	800ab68 <_dtoa_r>
 800909c:	2d47      	cmp	r5, #71	; 0x47
 800909e:	d101      	bne.n	80090a4 <__cvt+0x56>
 80090a0:	07fb      	lsls	r3, r7, #31
 80090a2:	d51e      	bpl.n	80090e2 <__cvt+0x94>
 80090a4:	2d46      	cmp	r5, #70	; 0x46
 80090a6:	eb00 0304 	add.w	r3, r0, r4
 80090aa:	d10c      	bne.n	80090c6 <__cvt+0x78>
 80090ac:	7802      	ldrb	r2, [r0, #0]
 80090ae:	2a30      	cmp	r2, #48	; 0x30
 80090b0:	d107      	bne.n	80090c2 <__cvt+0x74>
 80090b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80090b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ba:	bf1c      	itt	ne
 80090bc:	f1c4 0401 	rsbne	r4, r4, #1
 80090c0:	6034      	strne	r4, [r6, #0]
 80090c2:	6832      	ldr	r2, [r6, #0]
 80090c4:	4413      	add	r3, r2
 80090c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80090ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ce:	d007      	beq.n	80090e0 <__cvt+0x92>
 80090d0:	2130      	movs	r1, #48	; 0x30
 80090d2:	9a03      	ldr	r2, [sp, #12]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d204      	bcs.n	80090e2 <__cvt+0x94>
 80090d8:	1c54      	adds	r4, r2, #1
 80090da:	9403      	str	r4, [sp, #12]
 80090dc:	7011      	strb	r1, [r2, #0]
 80090de:	e7f8      	b.n	80090d2 <__cvt+0x84>
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090e6:	1a1b      	subs	r3, r3, r0
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	b005      	add	sp, #20
 80090ec:	ecbd 8b02 	vpop	{d8}
 80090f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090f2 <__exponent>:
 80090f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f4:	2900      	cmp	r1, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	bfba      	itte	lt
 80090fa:	4249      	neglt	r1, r1
 80090fc:	232d      	movlt	r3, #45	; 0x2d
 80090fe:	232b      	movge	r3, #43	; 0x2b
 8009100:	2909      	cmp	r1, #9
 8009102:	f804 2b02 	strb.w	r2, [r4], #2
 8009106:	7043      	strb	r3, [r0, #1]
 8009108:	dd20      	ble.n	800914c <__exponent+0x5a>
 800910a:	f10d 0307 	add.w	r3, sp, #7
 800910e:	461f      	mov	r7, r3
 8009110:	260a      	movs	r6, #10
 8009112:	fb91 f5f6 	sdiv	r5, r1, r6
 8009116:	fb06 1115 	mls	r1, r6, r5, r1
 800911a:	3130      	adds	r1, #48	; 0x30
 800911c:	2d09      	cmp	r5, #9
 800911e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009122:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009126:	4629      	mov	r1, r5
 8009128:	dc09      	bgt.n	800913e <__exponent+0x4c>
 800912a:	3130      	adds	r1, #48	; 0x30
 800912c:	3b02      	subs	r3, #2
 800912e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009132:	42bb      	cmp	r3, r7
 8009134:	4622      	mov	r2, r4
 8009136:	d304      	bcc.n	8009142 <__exponent+0x50>
 8009138:	1a10      	subs	r0, r2, r0
 800913a:	b003      	add	sp, #12
 800913c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913e:	4613      	mov	r3, r2
 8009140:	e7e7      	b.n	8009112 <__exponent+0x20>
 8009142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009146:	f804 2b01 	strb.w	r2, [r4], #1
 800914a:	e7f2      	b.n	8009132 <__exponent+0x40>
 800914c:	2330      	movs	r3, #48	; 0x30
 800914e:	4419      	add	r1, r3
 8009150:	7083      	strb	r3, [r0, #2]
 8009152:	1d02      	adds	r2, r0, #4
 8009154:	70c1      	strb	r1, [r0, #3]
 8009156:	e7ef      	b.n	8009138 <__exponent+0x46>

08009158 <_printf_float>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	b08d      	sub	sp, #52	; 0x34
 800915e:	460c      	mov	r4, r1
 8009160:	4616      	mov	r6, r2
 8009162:	461f      	mov	r7, r3
 8009164:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009168:	4605      	mov	r5, r0
 800916a:	f002 fd83 	bl	800bc74 <_localeconv_r>
 800916e:	f8d0 b000 	ldr.w	fp, [r0]
 8009172:	4658      	mov	r0, fp
 8009174:	f7f7 f864 	bl	8000240 <strlen>
 8009178:	2300      	movs	r3, #0
 800917a:	930a      	str	r3, [sp, #40]	; 0x28
 800917c:	f8d8 3000 	ldr.w	r3, [r8]
 8009180:	9005      	str	r0, [sp, #20]
 8009182:	3307      	adds	r3, #7
 8009184:	f023 0307 	bic.w	r3, r3, #7
 8009188:	f103 0108 	add.w	r1, r3, #8
 800918c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009190:	6822      	ldr	r2, [r4, #0]
 8009192:	f8c8 1000 	str.w	r1, [r8]
 8009196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800919a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800919e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8009428 <_printf_float+0x2d0>
 80091a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80091a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80091aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80091ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b2:	dd24      	ble.n	80091fe <_printf_float+0xa6>
 80091b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80091b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091bc:	d502      	bpl.n	80091c4 <_printf_float+0x6c>
 80091be:	232d      	movs	r3, #45	; 0x2d
 80091c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c4:	499a      	ldr	r1, [pc, #616]	; (8009430 <_printf_float+0x2d8>)
 80091c6:	4b9b      	ldr	r3, [pc, #620]	; (8009434 <_printf_float+0x2dc>)
 80091c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80091cc:	bf8c      	ite	hi
 80091ce:	4688      	movhi	r8, r1
 80091d0:	4698      	movls	r8, r3
 80091d2:	f022 0204 	bic.w	r2, r2, #4
 80091d6:	2303      	movs	r3, #3
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	6022      	str	r2, [r4, #0]
 80091dc:	f04f 0a00 	mov.w	sl, #0
 80091e0:	9700      	str	r7, [sp, #0]
 80091e2:	4633      	mov	r3, r6
 80091e4:	aa0b      	add	r2, sp, #44	; 0x2c
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f000 f9e1 	bl	80095b0 <_printf_common>
 80091ee:	3001      	adds	r0, #1
 80091f0:	f040 8089 	bne.w	8009306 <_printf_float+0x1ae>
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091f8:	b00d      	add	sp, #52	; 0x34
 80091fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8009202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009206:	d702      	bvc.n	800920e <_printf_float+0xb6>
 8009208:	498b      	ldr	r1, [pc, #556]	; (8009438 <_printf_float+0x2e0>)
 800920a:	4b8c      	ldr	r3, [pc, #560]	; (800943c <_printf_float+0x2e4>)
 800920c:	e7dc      	b.n	80091c8 <_printf_float+0x70>
 800920e:	6861      	ldr	r1, [r4, #4]
 8009210:	1c4b      	adds	r3, r1, #1
 8009212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009216:	ab0a      	add	r3, sp, #40	; 0x28
 8009218:	a809      	add	r0, sp, #36	; 0x24
 800921a:	d13b      	bne.n	8009294 <_printf_float+0x13c>
 800921c:	2106      	movs	r1, #6
 800921e:	6061      	str	r1, [r4, #4]
 8009220:	f04f 0c00 	mov.w	ip, #0
 8009224:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009228:	e9cd 0900 	strd	r0, r9, [sp]
 800922c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009230:	6022      	str	r2, [r4, #0]
 8009232:	6861      	ldr	r1, [r4, #4]
 8009234:	4628      	mov	r0, r5
 8009236:	f7ff ff0a 	bl	800904e <__cvt>
 800923a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800923e:	2b47      	cmp	r3, #71	; 0x47
 8009240:	4680      	mov	r8, r0
 8009242:	d109      	bne.n	8009258 <_printf_float+0x100>
 8009244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009246:	1cd8      	adds	r0, r3, #3
 8009248:	db02      	blt.n	8009250 <_printf_float+0xf8>
 800924a:	6862      	ldr	r2, [r4, #4]
 800924c:	4293      	cmp	r3, r2
 800924e:	dd47      	ble.n	80092e0 <_printf_float+0x188>
 8009250:	f1a9 0902 	sub.w	r9, r9, #2
 8009254:	fa5f f989 	uxtb.w	r9, r9
 8009258:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800925c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800925e:	d824      	bhi.n	80092aa <_printf_float+0x152>
 8009260:	3901      	subs	r1, #1
 8009262:	464a      	mov	r2, r9
 8009264:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009268:	9109      	str	r1, [sp, #36]	; 0x24
 800926a:	f7ff ff42 	bl	80090f2 <__exponent>
 800926e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009270:	1813      	adds	r3, r2, r0
 8009272:	2a01      	cmp	r2, #1
 8009274:	4682      	mov	sl, r0
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	dc02      	bgt.n	8009280 <_printf_float+0x128>
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	07d1      	lsls	r1, r2, #31
 800927e:	d501      	bpl.n	8009284 <_printf_float+0x12c>
 8009280:	3301      	adds	r3, #1
 8009282:	6123      	str	r3, [r4, #16]
 8009284:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0a9      	beq.n	80091e0 <_printf_float+0x88>
 800928c:	232d      	movs	r3, #45	; 0x2d
 800928e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009292:	e7a5      	b.n	80091e0 <_printf_float+0x88>
 8009294:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8009298:	f000 8178 	beq.w	800958c <_printf_float+0x434>
 800929c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092a0:	d1be      	bne.n	8009220 <_printf_float+0xc8>
 80092a2:	2900      	cmp	r1, #0
 80092a4:	d1bc      	bne.n	8009220 <_printf_float+0xc8>
 80092a6:	2101      	movs	r1, #1
 80092a8:	e7b9      	b.n	800921e <_printf_float+0xc6>
 80092aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80092ae:	d119      	bne.n	80092e4 <_printf_float+0x18c>
 80092b0:	2900      	cmp	r1, #0
 80092b2:	6863      	ldr	r3, [r4, #4]
 80092b4:	dd0c      	ble.n	80092d0 <_printf_float+0x178>
 80092b6:	6121      	str	r1, [r4, #16]
 80092b8:	b913      	cbnz	r3, 80092c0 <_printf_float+0x168>
 80092ba:	6822      	ldr	r2, [r4, #0]
 80092bc:	07d2      	lsls	r2, r2, #31
 80092be:	d502      	bpl.n	80092c6 <_printf_float+0x16e>
 80092c0:	3301      	adds	r3, #1
 80092c2:	440b      	add	r3, r1
 80092c4:	6123      	str	r3, [r4, #16]
 80092c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80092ca:	f04f 0a00 	mov.w	sl, #0
 80092ce:	e7d9      	b.n	8009284 <_printf_float+0x12c>
 80092d0:	b913      	cbnz	r3, 80092d8 <_printf_float+0x180>
 80092d2:	6822      	ldr	r2, [r4, #0]
 80092d4:	07d0      	lsls	r0, r2, #31
 80092d6:	d501      	bpl.n	80092dc <_printf_float+0x184>
 80092d8:	3302      	adds	r3, #2
 80092da:	e7f3      	b.n	80092c4 <_printf_float+0x16c>
 80092dc:	2301      	movs	r3, #1
 80092de:	e7f1      	b.n	80092c4 <_printf_float+0x16c>
 80092e0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80092e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092e8:	4293      	cmp	r3, r2
 80092ea:	db05      	blt.n	80092f8 <_printf_float+0x1a0>
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	6123      	str	r3, [r4, #16]
 80092f0:	07d1      	lsls	r1, r2, #31
 80092f2:	d5e8      	bpl.n	80092c6 <_printf_float+0x16e>
 80092f4:	3301      	adds	r3, #1
 80092f6:	e7e5      	b.n	80092c4 <_printf_float+0x16c>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfd4      	ite	le
 80092fc:	f1c3 0302 	rsble	r3, r3, #2
 8009300:	2301      	movgt	r3, #1
 8009302:	4413      	add	r3, r2
 8009304:	e7de      	b.n	80092c4 <_printf_float+0x16c>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	055a      	lsls	r2, r3, #21
 800930a:	d407      	bmi.n	800931c <_printf_float+0x1c4>
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	4642      	mov	r2, r8
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	d12a      	bne.n	8009370 <_printf_float+0x218>
 800931a:	e76b      	b.n	80091f4 <_printf_float+0x9c>
 800931c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009320:	f240 80de 	bls.w	80094e0 <_printf_float+0x388>
 8009324:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009328:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009330:	d133      	bne.n	800939a <_printf_float+0x242>
 8009332:	2301      	movs	r3, #1
 8009334:	4a42      	ldr	r2, [pc, #264]	; (8009440 <_printf_float+0x2e8>)
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	47b8      	blx	r7
 800933c:	3001      	adds	r0, #1
 800933e:	f43f af59 	beq.w	80091f4 <_printf_float+0x9c>
 8009342:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009346:	429a      	cmp	r2, r3
 8009348:	db02      	blt.n	8009350 <_printf_float+0x1f8>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	07d8      	lsls	r0, r3, #31
 800934e:	d50f      	bpl.n	8009370 <_printf_float+0x218>
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	465a      	mov	r2, fp
 8009354:	4631      	mov	r1, r6
 8009356:	4628      	mov	r0, r5
 8009358:	47b8      	blx	r7
 800935a:	3001      	adds	r0, #1
 800935c:	f43f af4a 	beq.w	80091f4 <_printf_float+0x9c>
 8009360:	f04f 0800 	mov.w	r8, #0
 8009364:	f104 091a 	add.w	r9, r4, #26
 8009368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936a:	3b01      	subs	r3, #1
 800936c:	4543      	cmp	r3, r8
 800936e:	dc09      	bgt.n	8009384 <_printf_float+0x22c>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	079b      	lsls	r3, r3, #30
 8009374:	f100 8105 	bmi.w	8009582 <_printf_float+0x42a>
 8009378:	68e0      	ldr	r0, [r4, #12]
 800937a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800937c:	4298      	cmp	r0, r3
 800937e:	bfb8      	it	lt
 8009380:	4618      	movlt	r0, r3
 8009382:	e739      	b.n	80091f8 <_printf_float+0xa0>
 8009384:	2301      	movs	r3, #1
 8009386:	464a      	mov	r2, r9
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	f43f af30 	beq.w	80091f4 <_printf_float+0x9c>
 8009394:	f108 0801 	add.w	r8, r8, #1
 8009398:	e7e6      	b.n	8009368 <_printf_float+0x210>
 800939a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc2b      	bgt.n	80093f8 <_printf_float+0x2a0>
 80093a0:	2301      	movs	r3, #1
 80093a2:	4a27      	ldr	r2, [pc, #156]	; (8009440 <_printf_float+0x2e8>)
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	f43f af22 	beq.w	80091f4 <_printf_float+0x9c>
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	b923      	cbnz	r3, 80093be <_printf_float+0x266>
 80093b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b6:	b913      	cbnz	r3, 80093be <_printf_float+0x266>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	07d9      	lsls	r1, r3, #31
 80093bc:	d5d8      	bpl.n	8009370 <_printf_float+0x218>
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	465a      	mov	r2, fp
 80093c2:	4631      	mov	r1, r6
 80093c4:	4628      	mov	r0, r5
 80093c6:	47b8      	blx	r7
 80093c8:	3001      	adds	r0, #1
 80093ca:	f43f af13 	beq.w	80091f4 <_printf_float+0x9c>
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	f104 0a1a 	add.w	sl, r4, #26
 80093d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d8:	425b      	negs	r3, r3
 80093da:	454b      	cmp	r3, r9
 80093dc:	dc01      	bgt.n	80093e2 <_printf_float+0x28a>
 80093de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e0:	e795      	b.n	800930e <_printf_float+0x1b6>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4652      	mov	r2, sl
 80093e6:	4631      	mov	r1, r6
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	f43f af01 	beq.w	80091f4 <_printf_float+0x9c>
 80093f2:	f109 0901 	add.w	r9, r9, #1
 80093f6:	e7ee      	b.n	80093d6 <_printf_float+0x27e>
 80093f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093fc:	429a      	cmp	r2, r3
 80093fe:	bfa8      	it	ge
 8009400:	461a      	movge	r2, r3
 8009402:	2a00      	cmp	r2, #0
 8009404:	4691      	mov	r9, r2
 8009406:	dd07      	ble.n	8009418 <_printf_float+0x2c0>
 8009408:	4613      	mov	r3, r2
 800940a:	4631      	mov	r1, r6
 800940c:	4642      	mov	r2, r8
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	f43f aeee 	beq.w	80091f4 <_printf_float+0x9c>
 8009418:	f104 031a 	add.w	r3, r4, #26
 800941c:	f04f 0a00 	mov.w	sl, #0
 8009420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009424:	9307      	str	r3, [sp, #28]
 8009426:	e017      	b.n	8009458 <_printf_float+0x300>
 8009428:	ffffffff 	.word	0xffffffff
 800942c:	7fefffff 	.word	0x7fefffff
 8009430:	0800e4b4 	.word	0x0800e4b4
 8009434:	0800e4b0 	.word	0x0800e4b0
 8009438:	0800e4bc 	.word	0x0800e4bc
 800943c:	0800e4b8 	.word	0x0800e4b8
 8009440:	0800e673 	.word	0x0800e673
 8009444:	2301      	movs	r3, #1
 8009446:	9a07      	ldr	r2, [sp, #28]
 8009448:	4631      	mov	r1, r6
 800944a:	4628      	mov	r0, r5
 800944c:	47b8      	blx	r7
 800944e:	3001      	adds	r0, #1
 8009450:	f43f aed0 	beq.w	80091f4 <_printf_float+0x9c>
 8009454:	f10a 0a01 	add.w	sl, sl, #1
 8009458:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800945a:	9306      	str	r3, [sp, #24]
 800945c:	eba3 0309 	sub.w	r3, r3, r9
 8009460:	4553      	cmp	r3, sl
 8009462:	dcef      	bgt.n	8009444 <_printf_float+0x2ec>
 8009464:	9b06      	ldr	r3, [sp, #24]
 8009466:	4498      	add	r8, r3
 8009468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800946c:	429a      	cmp	r2, r3
 800946e:	db15      	blt.n	800949c <_printf_float+0x344>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	07da      	lsls	r2, r3, #31
 8009474:	d412      	bmi.n	800949c <_printf_float+0x344>
 8009476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009478:	9a06      	ldr	r2, [sp, #24]
 800947a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800947c:	1a9a      	subs	r2, r3, r2
 800947e:	eba3 0a01 	sub.w	sl, r3, r1
 8009482:	4592      	cmp	sl, r2
 8009484:	bfa8      	it	ge
 8009486:	4692      	movge	sl, r2
 8009488:	f1ba 0f00 	cmp.w	sl, #0
 800948c:	dc0e      	bgt.n	80094ac <_printf_float+0x354>
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009496:	f104 091a 	add.w	r9, r4, #26
 800949a:	e019      	b.n	80094d0 <_printf_float+0x378>
 800949c:	9b05      	ldr	r3, [sp, #20]
 800949e:	465a      	mov	r2, fp
 80094a0:	4631      	mov	r1, r6
 80094a2:	4628      	mov	r0, r5
 80094a4:	47b8      	blx	r7
 80094a6:	3001      	adds	r0, #1
 80094a8:	d1e5      	bne.n	8009476 <_printf_float+0x31e>
 80094aa:	e6a3      	b.n	80091f4 <_printf_float+0x9c>
 80094ac:	4653      	mov	r3, sl
 80094ae:	4642      	mov	r2, r8
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	d1e9      	bne.n	800948e <_printf_float+0x336>
 80094ba:	e69b      	b.n	80091f4 <_printf_float+0x9c>
 80094bc:	2301      	movs	r3, #1
 80094be:	464a      	mov	r2, r9
 80094c0:	4631      	mov	r1, r6
 80094c2:	4628      	mov	r0, r5
 80094c4:	47b8      	blx	r7
 80094c6:	3001      	adds	r0, #1
 80094c8:	f43f ae94 	beq.w	80091f4 <_printf_float+0x9c>
 80094cc:	f108 0801 	add.w	r8, r8, #1
 80094d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	eba3 030a 	sub.w	r3, r3, sl
 80094da:	4543      	cmp	r3, r8
 80094dc:	dcee      	bgt.n	80094bc <_printf_float+0x364>
 80094de:	e747      	b.n	8009370 <_printf_float+0x218>
 80094e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094e2:	2a01      	cmp	r2, #1
 80094e4:	dc01      	bgt.n	80094ea <_printf_float+0x392>
 80094e6:	07db      	lsls	r3, r3, #31
 80094e8:	d539      	bpl.n	800955e <_printf_float+0x406>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4642      	mov	r2, r8
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae7d 	beq.w	80091f4 <_printf_float+0x9c>
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	465a      	mov	r2, fp
 80094fe:	4631      	mov	r1, r6
 8009500:	4628      	mov	r0, r5
 8009502:	47b8      	blx	r7
 8009504:	3001      	adds	r0, #1
 8009506:	f108 0801 	add.w	r8, r8, #1
 800950a:	f43f ae73 	beq.w	80091f4 <_printf_float+0x9c>
 800950e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009514:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009520:	d018      	beq.n	8009554 <_printf_float+0x3fc>
 8009522:	4642      	mov	r2, r8
 8009524:	4631      	mov	r1, r6
 8009526:	4628      	mov	r0, r5
 8009528:	47b8      	blx	r7
 800952a:	3001      	adds	r0, #1
 800952c:	d10e      	bne.n	800954c <_printf_float+0x3f4>
 800952e:	e661      	b.n	80091f4 <_printf_float+0x9c>
 8009530:	2301      	movs	r3, #1
 8009532:	464a      	mov	r2, r9
 8009534:	4631      	mov	r1, r6
 8009536:	4628      	mov	r0, r5
 8009538:	47b8      	blx	r7
 800953a:	3001      	adds	r0, #1
 800953c:	f43f ae5a 	beq.w	80091f4 <_printf_float+0x9c>
 8009540:	f108 0801 	add.w	r8, r8, #1
 8009544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009546:	3b01      	subs	r3, #1
 8009548:	4543      	cmp	r3, r8
 800954a:	dcf1      	bgt.n	8009530 <_printf_float+0x3d8>
 800954c:	4653      	mov	r3, sl
 800954e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009552:	e6dd      	b.n	8009310 <_printf_float+0x1b8>
 8009554:	f04f 0800 	mov.w	r8, #0
 8009558:	f104 091a 	add.w	r9, r4, #26
 800955c:	e7f2      	b.n	8009544 <_printf_float+0x3ec>
 800955e:	2301      	movs	r3, #1
 8009560:	e7df      	b.n	8009522 <_printf_float+0x3ca>
 8009562:	2301      	movs	r3, #1
 8009564:	464a      	mov	r2, r9
 8009566:	4631      	mov	r1, r6
 8009568:	4628      	mov	r0, r5
 800956a:	47b8      	blx	r7
 800956c:	3001      	adds	r0, #1
 800956e:	f43f ae41 	beq.w	80091f4 <_printf_float+0x9c>
 8009572:	f108 0801 	add.w	r8, r8, #1
 8009576:	68e3      	ldr	r3, [r4, #12]
 8009578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800957a:	1a9b      	subs	r3, r3, r2
 800957c:	4543      	cmp	r3, r8
 800957e:	dcf0      	bgt.n	8009562 <_printf_float+0x40a>
 8009580:	e6fa      	b.n	8009378 <_printf_float+0x220>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	f104 0919 	add.w	r9, r4, #25
 800958a:	e7f4      	b.n	8009576 <_printf_float+0x41e>
 800958c:	2900      	cmp	r1, #0
 800958e:	f43f ae8a 	beq.w	80092a6 <_printf_float+0x14e>
 8009592:	f04f 0c00 	mov.w	ip, #0
 8009596:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800959a:	e9cd 0900 	strd	r0, r9, [sp]
 800959e:	6022      	str	r2, [r4, #0]
 80095a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7ff fd52 	bl	800904e <__cvt>
 80095aa:	4680      	mov	r8, r0
 80095ac:	e64a      	b.n	8009244 <_printf_float+0xec>
 80095ae:	bf00      	nop

080095b0 <_printf_common>:
 80095b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	4691      	mov	r9, r2
 80095b6:	461f      	mov	r7, r3
 80095b8:	688a      	ldr	r2, [r1, #8]
 80095ba:	690b      	ldr	r3, [r1, #16]
 80095bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	bfb8      	it	lt
 80095c4:	4613      	movlt	r3, r2
 80095c6:	f8c9 3000 	str.w	r3, [r9]
 80095ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095ce:	4606      	mov	r6, r0
 80095d0:	460c      	mov	r4, r1
 80095d2:	b112      	cbz	r2, 80095da <_printf_common+0x2a>
 80095d4:	3301      	adds	r3, #1
 80095d6:	f8c9 3000 	str.w	r3, [r9]
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	0699      	lsls	r1, r3, #26
 80095de:	bf42      	ittt	mi
 80095e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80095e4:	3302      	addmi	r3, #2
 80095e6:	f8c9 3000 	strmi.w	r3, [r9]
 80095ea:	6825      	ldr	r5, [r4, #0]
 80095ec:	f015 0506 	ands.w	r5, r5, #6
 80095f0:	d107      	bne.n	8009602 <_printf_common+0x52>
 80095f2:	f104 0a19 	add.w	sl, r4, #25
 80095f6:	68e3      	ldr	r3, [r4, #12]
 80095f8:	f8d9 2000 	ldr.w	r2, [r9]
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	42ab      	cmp	r3, r5
 8009600:	dc28      	bgt.n	8009654 <_printf_common+0xa4>
 8009602:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009606:	6822      	ldr	r2, [r4, #0]
 8009608:	3300      	adds	r3, #0
 800960a:	bf18      	it	ne
 800960c:	2301      	movne	r3, #1
 800960e:	0692      	lsls	r2, r2, #26
 8009610:	d42d      	bmi.n	800966e <_printf_common+0xbe>
 8009612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009616:	4639      	mov	r1, r7
 8009618:	4630      	mov	r0, r6
 800961a:	47c0      	blx	r8
 800961c:	3001      	adds	r0, #1
 800961e:	d020      	beq.n	8009662 <_printf_common+0xb2>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	68e5      	ldr	r5, [r4, #12]
 8009624:	f8d9 2000 	ldr.w	r2, [r9]
 8009628:	f003 0306 	and.w	r3, r3, #6
 800962c:	2b04      	cmp	r3, #4
 800962e:	bf08      	it	eq
 8009630:	1aad      	subeq	r5, r5, r2
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	6922      	ldr	r2, [r4, #16]
 8009636:	bf0c      	ite	eq
 8009638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800963c:	2500      	movne	r5, #0
 800963e:	4293      	cmp	r3, r2
 8009640:	bfc4      	itt	gt
 8009642:	1a9b      	subgt	r3, r3, r2
 8009644:	18ed      	addgt	r5, r5, r3
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	341a      	adds	r4, #26
 800964c:	454d      	cmp	r5, r9
 800964e:	d11a      	bne.n	8009686 <_printf_common+0xd6>
 8009650:	2000      	movs	r0, #0
 8009652:	e008      	b.n	8009666 <_printf_common+0xb6>
 8009654:	2301      	movs	r3, #1
 8009656:	4652      	mov	r2, sl
 8009658:	4639      	mov	r1, r7
 800965a:	4630      	mov	r0, r6
 800965c:	47c0      	blx	r8
 800965e:	3001      	adds	r0, #1
 8009660:	d103      	bne.n	800966a <_printf_common+0xba>
 8009662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966a:	3501      	adds	r5, #1
 800966c:	e7c3      	b.n	80095f6 <_printf_common+0x46>
 800966e:	18e1      	adds	r1, r4, r3
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	2030      	movs	r0, #48	; 0x30
 8009674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009678:	4422      	add	r2, r4
 800967a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800967e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009682:	3302      	adds	r3, #2
 8009684:	e7c5      	b.n	8009612 <_printf_common+0x62>
 8009686:	2301      	movs	r3, #1
 8009688:	4622      	mov	r2, r4
 800968a:	4639      	mov	r1, r7
 800968c:	4630      	mov	r0, r6
 800968e:	47c0      	blx	r8
 8009690:	3001      	adds	r0, #1
 8009692:	d0e6      	beq.n	8009662 <_printf_common+0xb2>
 8009694:	f109 0901 	add.w	r9, r9, #1
 8009698:	e7d8      	b.n	800964c <_printf_common+0x9c>
	...

0800969c <_printf_i>:
 800969c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80096a4:	460c      	mov	r4, r1
 80096a6:	7e09      	ldrb	r1, [r1, #24]
 80096a8:	b085      	sub	sp, #20
 80096aa:	296e      	cmp	r1, #110	; 0x6e
 80096ac:	4617      	mov	r7, r2
 80096ae:	4606      	mov	r6, r0
 80096b0:	4698      	mov	r8, r3
 80096b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096b4:	f000 80b3 	beq.w	800981e <_printf_i+0x182>
 80096b8:	d822      	bhi.n	8009700 <_printf_i+0x64>
 80096ba:	2963      	cmp	r1, #99	; 0x63
 80096bc:	d036      	beq.n	800972c <_printf_i+0x90>
 80096be:	d80a      	bhi.n	80096d6 <_printf_i+0x3a>
 80096c0:	2900      	cmp	r1, #0
 80096c2:	f000 80b9 	beq.w	8009838 <_printf_i+0x19c>
 80096c6:	2958      	cmp	r1, #88	; 0x58
 80096c8:	f000 8083 	beq.w	80097d2 <_printf_i+0x136>
 80096cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80096d4:	e032      	b.n	800973c <_printf_i+0xa0>
 80096d6:	2964      	cmp	r1, #100	; 0x64
 80096d8:	d001      	beq.n	80096de <_printf_i+0x42>
 80096da:	2969      	cmp	r1, #105	; 0x69
 80096dc:	d1f6      	bne.n	80096cc <_printf_i+0x30>
 80096de:	6820      	ldr	r0, [r4, #0]
 80096e0:	6813      	ldr	r3, [r2, #0]
 80096e2:	0605      	lsls	r5, r0, #24
 80096e4:	f103 0104 	add.w	r1, r3, #4
 80096e8:	d52a      	bpl.n	8009740 <_printf_i+0xa4>
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6011      	str	r1, [r2, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da03      	bge.n	80096fa <_printf_i+0x5e>
 80096f2:	222d      	movs	r2, #45	; 0x2d
 80096f4:	425b      	negs	r3, r3
 80096f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80096fa:	486f      	ldr	r0, [pc, #444]	; (80098b8 <_printf_i+0x21c>)
 80096fc:	220a      	movs	r2, #10
 80096fe:	e039      	b.n	8009774 <_printf_i+0xd8>
 8009700:	2973      	cmp	r1, #115	; 0x73
 8009702:	f000 809d 	beq.w	8009840 <_printf_i+0x1a4>
 8009706:	d808      	bhi.n	800971a <_printf_i+0x7e>
 8009708:	296f      	cmp	r1, #111	; 0x6f
 800970a:	d020      	beq.n	800974e <_printf_i+0xb2>
 800970c:	2970      	cmp	r1, #112	; 0x70
 800970e:	d1dd      	bne.n	80096cc <_printf_i+0x30>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	f043 0320 	orr.w	r3, r3, #32
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	e003      	b.n	8009722 <_printf_i+0x86>
 800971a:	2975      	cmp	r1, #117	; 0x75
 800971c:	d017      	beq.n	800974e <_printf_i+0xb2>
 800971e:	2978      	cmp	r1, #120	; 0x78
 8009720:	d1d4      	bne.n	80096cc <_printf_i+0x30>
 8009722:	2378      	movs	r3, #120	; 0x78
 8009724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009728:	4864      	ldr	r0, [pc, #400]	; (80098bc <_printf_i+0x220>)
 800972a:	e055      	b.n	80097d8 <_printf_i+0x13c>
 800972c:	6813      	ldr	r3, [r2, #0]
 800972e:	1d19      	adds	r1, r3, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6011      	str	r1, [r2, #0]
 8009734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800973c:	2301      	movs	r3, #1
 800973e:	e08c      	b.n	800985a <_printf_i+0x1be>
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6011      	str	r1, [r2, #0]
 8009744:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009748:	bf18      	it	ne
 800974a:	b21b      	sxthne	r3, r3
 800974c:	e7cf      	b.n	80096ee <_printf_i+0x52>
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	1d18      	adds	r0, r3, #4
 8009754:	6010      	str	r0, [r2, #0]
 8009756:	0628      	lsls	r0, r5, #24
 8009758:	d501      	bpl.n	800975e <_printf_i+0xc2>
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	e002      	b.n	8009764 <_printf_i+0xc8>
 800975e:	0668      	lsls	r0, r5, #25
 8009760:	d5fb      	bpl.n	800975a <_printf_i+0xbe>
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	4854      	ldr	r0, [pc, #336]	; (80098b8 <_printf_i+0x21c>)
 8009766:	296f      	cmp	r1, #111	; 0x6f
 8009768:	bf14      	ite	ne
 800976a:	220a      	movne	r2, #10
 800976c:	2208      	moveq	r2, #8
 800976e:	2100      	movs	r1, #0
 8009770:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009774:	6865      	ldr	r5, [r4, #4]
 8009776:	60a5      	str	r5, [r4, #8]
 8009778:	2d00      	cmp	r5, #0
 800977a:	f2c0 8095 	blt.w	80098a8 <_printf_i+0x20c>
 800977e:	6821      	ldr	r1, [r4, #0]
 8009780:	f021 0104 	bic.w	r1, r1, #4
 8009784:	6021      	str	r1, [r4, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d13d      	bne.n	8009806 <_printf_i+0x16a>
 800978a:	2d00      	cmp	r5, #0
 800978c:	f040 808e 	bne.w	80098ac <_printf_i+0x210>
 8009790:	4665      	mov	r5, ip
 8009792:	2a08      	cmp	r2, #8
 8009794:	d10b      	bne.n	80097ae <_printf_i+0x112>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	07db      	lsls	r3, r3, #31
 800979a:	d508      	bpl.n	80097ae <_printf_i+0x112>
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	6862      	ldr	r2, [r4, #4]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	bfde      	ittt	le
 80097a4:	2330      	movle	r3, #48	; 0x30
 80097a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80097ae:	ebac 0305 	sub.w	r3, ip, r5
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	f8cd 8000 	str.w	r8, [sp]
 80097b8:	463b      	mov	r3, r7
 80097ba:	aa03      	add	r2, sp, #12
 80097bc:	4621      	mov	r1, r4
 80097be:	4630      	mov	r0, r6
 80097c0:	f7ff fef6 	bl	80095b0 <_printf_common>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d14d      	bne.n	8009864 <_printf_i+0x1c8>
 80097c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097cc:	b005      	add	sp, #20
 80097ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d2:	4839      	ldr	r0, [pc, #228]	; (80098b8 <_printf_i+0x21c>)
 80097d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80097d8:	6813      	ldr	r3, [r2, #0]
 80097da:	6821      	ldr	r1, [r4, #0]
 80097dc:	1d1d      	adds	r5, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6015      	str	r5, [r2, #0]
 80097e2:	060a      	lsls	r2, r1, #24
 80097e4:	d50b      	bpl.n	80097fe <_printf_i+0x162>
 80097e6:	07ca      	lsls	r2, r1, #31
 80097e8:	bf44      	itt	mi
 80097ea:	f041 0120 	orrmi.w	r1, r1, #32
 80097ee:	6021      	strmi	r1, [r4, #0]
 80097f0:	b91b      	cbnz	r3, 80097fa <_printf_i+0x15e>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	f022 0220 	bic.w	r2, r2, #32
 80097f8:	6022      	str	r2, [r4, #0]
 80097fa:	2210      	movs	r2, #16
 80097fc:	e7b7      	b.n	800976e <_printf_i+0xd2>
 80097fe:	064d      	lsls	r5, r1, #25
 8009800:	bf48      	it	mi
 8009802:	b29b      	uxthmi	r3, r3
 8009804:	e7ef      	b.n	80097e6 <_printf_i+0x14a>
 8009806:	4665      	mov	r5, ip
 8009808:	fbb3 f1f2 	udiv	r1, r3, r2
 800980c:	fb02 3311 	mls	r3, r2, r1, r3
 8009810:	5cc3      	ldrb	r3, [r0, r3]
 8009812:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009816:	460b      	mov	r3, r1
 8009818:	2900      	cmp	r1, #0
 800981a:	d1f5      	bne.n	8009808 <_printf_i+0x16c>
 800981c:	e7b9      	b.n	8009792 <_printf_i+0xf6>
 800981e:	6813      	ldr	r3, [r2, #0]
 8009820:	6825      	ldr	r5, [r4, #0]
 8009822:	6961      	ldr	r1, [r4, #20]
 8009824:	1d18      	adds	r0, r3, #4
 8009826:	6010      	str	r0, [r2, #0]
 8009828:	0628      	lsls	r0, r5, #24
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	d501      	bpl.n	8009832 <_printf_i+0x196>
 800982e:	6019      	str	r1, [r3, #0]
 8009830:	e002      	b.n	8009838 <_printf_i+0x19c>
 8009832:	066a      	lsls	r2, r5, #25
 8009834:	d5fb      	bpl.n	800982e <_printf_i+0x192>
 8009836:	8019      	strh	r1, [r3, #0]
 8009838:	2300      	movs	r3, #0
 800983a:	6123      	str	r3, [r4, #16]
 800983c:	4665      	mov	r5, ip
 800983e:	e7b9      	b.n	80097b4 <_printf_i+0x118>
 8009840:	6813      	ldr	r3, [r2, #0]
 8009842:	1d19      	adds	r1, r3, #4
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	681d      	ldr	r5, [r3, #0]
 8009848:	6862      	ldr	r2, [r4, #4]
 800984a:	2100      	movs	r1, #0
 800984c:	4628      	mov	r0, r5
 800984e:	f7f6 fcff 	bl	8000250 <memchr>
 8009852:	b108      	cbz	r0, 8009858 <_printf_i+0x1bc>
 8009854:	1b40      	subs	r0, r0, r5
 8009856:	6060      	str	r0, [r4, #4]
 8009858:	6863      	ldr	r3, [r4, #4]
 800985a:	6123      	str	r3, [r4, #16]
 800985c:	2300      	movs	r3, #0
 800985e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009862:	e7a7      	b.n	80097b4 <_printf_i+0x118>
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	462a      	mov	r2, r5
 8009868:	4639      	mov	r1, r7
 800986a:	4630      	mov	r0, r6
 800986c:	47c0      	blx	r8
 800986e:	3001      	adds	r0, #1
 8009870:	d0aa      	beq.n	80097c8 <_printf_i+0x12c>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	079b      	lsls	r3, r3, #30
 8009876:	d413      	bmi.n	80098a0 <_printf_i+0x204>
 8009878:	68e0      	ldr	r0, [r4, #12]
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	4298      	cmp	r0, r3
 800987e:	bfb8      	it	lt
 8009880:	4618      	movlt	r0, r3
 8009882:	e7a3      	b.n	80097cc <_printf_i+0x130>
 8009884:	2301      	movs	r3, #1
 8009886:	464a      	mov	r2, r9
 8009888:	4639      	mov	r1, r7
 800988a:	4630      	mov	r0, r6
 800988c:	47c0      	blx	r8
 800988e:	3001      	adds	r0, #1
 8009890:	d09a      	beq.n	80097c8 <_printf_i+0x12c>
 8009892:	3501      	adds	r5, #1
 8009894:	68e3      	ldr	r3, [r4, #12]
 8009896:	9a03      	ldr	r2, [sp, #12]
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	42ab      	cmp	r3, r5
 800989c:	dcf2      	bgt.n	8009884 <_printf_i+0x1e8>
 800989e:	e7eb      	b.n	8009878 <_printf_i+0x1dc>
 80098a0:	2500      	movs	r5, #0
 80098a2:	f104 0919 	add.w	r9, r4, #25
 80098a6:	e7f5      	b.n	8009894 <_printf_i+0x1f8>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1ac      	bne.n	8009806 <_printf_i+0x16a>
 80098ac:	7803      	ldrb	r3, [r0, #0]
 80098ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098b6:	e76c      	b.n	8009792 <_printf_i+0xf6>
 80098b8:	0800e4c0 	.word	0x0800e4c0
 80098bc:	0800e4d1 	.word	0x0800e4d1

080098c0 <_scanf_float>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	469a      	mov	sl, r3
 80098c6:	688b      	ldr	r3, [r1, #8]
 80098c8:	4616      	mov	r6, r2
 80098ca:	1e5a      	subs	r2, r3, #1
 80098cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80098d0:	b087      	sub	sp, #28
 80098d2:	bf83      	ittte	hi
 80098d4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80098d8:	189b      	addhi	r3, r3, r2
 80098da:	9301      	strhi	r3, [sp, #4]
 80098dc:	2300      	movls	r3, #0
 80098de:	bf86      	itte	hi
 80098e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098e4:	608b      	strhi	r3, [r1, #8]
 80098e6:	9301      	strls	r3, [sp, #4]
 80098e8:	680b      	ldr	r3, [r1, #0]
 80098ea:	4688      	mov	r8, r1
 80098ec:	f04f 0b00 	mov.w	fp, #0
 80098f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80098f4:	f848 3b1c 	str.w	r3, [r8], #28
 80098f8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80098fc:	4607      	mov	r7, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	4645      	mov	r5, r8
 8009902:	465a      	mov	r2, fp
 8009904:	46d9      	mov	r9, fp
 8009906:	f8cd b008 	str.w	fp, [sp, #8]
 800990a:	68a1      	ldr	r1, [r4, #8]
 800990c:	b181      	cbz	r1, 8009930 <_scanf_float+0x70>
 800990e:	6833      	ldr	r3, [r6, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b49      	cmp	r3, #73	; 0x49
 8009914:	d071      	beq.n	80099fa <_scanf_float+0x13a>
 8009916:	d84d      	bhi.n	80099b4 <_scanf_float+0xf4>
 8009918:	2b39      	cmp	r3, #57	; 0x39
 800991a:	d840      	bhi.n	800999e <_scanf_float+0xde>
 800991c:	2b31      	cmp	r3, #49	; 0x31
 800991e:	f080 8088 	bcs.w	8009a32 <_scanf_float+0x172>
 8009922:	2b2d      	cmp	r3, #45	; 0x2d
 8009924:	f000 8090 	beq.w	8009a48 <_scanf_float+0x188>
 8009928:	d815      	bhi.n	8009956 <_scanf_float+0x96>
 800992a:	2b2b      	cmp	r3, #43	; 0x2b
 800992c:	f000 808c 	beq.w	8009a48 <_scanf_float+0x188>
 8009930:	f1b9 0f00 	cmp.w	r9, #0
 8009934:	d003      	beq.n	800993e <_scanf_float+0x7e>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	3a01      	subs	r2, #1
 8009940:	2a01      	cmp	r2, #1
 8009942:	f200 80ea 	bhi.w	8009b1a <_scanf_float+0x25a>
 8009946:	4545      	cmp	r5, r8
 8009948:	f200 80dc 	bhi.w	8009b04 <_scanf_float+0x244>
 800994c:	2601      	movs	r6, #1
 800994e:	4630      	mov	r0, r6
 8009950:	b007      	add	sp, #28
 8009952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009956:	2b2e      	cmp	r3, #46	; 0x2e
 8009958:	f000 809f 	beq.w	8009a9a <_scanf_float+0x1da>
 800995c:	2b30      	cmp	r3, #48	; 0x30
 800995e:	d1e7      	bne.n	8009930 <_scanf_float+0x70>
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009966:	d064      	beq.n	8009a32 <_scanf_float+0x172>
 8009968:	9b01      	ldr	r3, [sp, #4]
 800996a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800996e:	6020      	str	r0, [r4, #0]
 8009970:	f109 0901 	add.w	r9, r9, #1
 8009974:	b11b      	cbz	r3, 800997e <_scanf_float+0xbe>
 8009976:	3b01      	subs	r3, #1
 8009978:	3101      	adds	r1, #1
 800997a:	9301      	str	r3, [sp, #4]
 800997c:	60a1      	str	r1, [r4, #8]
 800997e:	68a3      	ldr	r3, [r4, #8]
 8009980:	3b01      	subs	r3, #1
 8009982:	60a3      	str	r3, [r4, #8]
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	3301      	adds	r3, #1
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	6873      	ldr	r3, [r6, #4]
 800998c:	3b01      	subs	r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	6073      	str	r3, [r6, #4]
 8009992:	f340 80ac 	ble.w	8009aee <_scanf_float+0x22e>
 8009996:	6833      	ldr	r3, [r6, #0]
 8009998:	3301      	adds	r3, #1
 800999a:	6033      	str	r3, [r6, #0]
 800999c:	e7b5      	b.n	800990a <_scanf_float+0x4a>
 800999e:	2b45      	cmp	r3, #69	; 0x45
 80099a0:	f000 8085 	beq.w	8009aae <_scanf_float+0x1ee>
 80099a4:	2b46      	cmp	r3, #70	; 0x46
 80099a6:	d06a      	beq.n	8009a7e <_scanf_float+0x1be>
 80099a8:	2b41      	cmp	r3, #65	; 0x41
 80099aa:	d1c1      	bne.n	8009930 <_scanf_float+0x70>
 80099ac:	2a01      	cmp	r2, #1
 80099ae:	d1bf      	bne.n	8009930 <_scanf_float+0x70>
 80099b0:	2202      	movs	r2, #2
 80099b2:	e046      	b.n	8009a42 <_scanf_float+0x182>
 80099b4:	2b65      	cmp	r3, #101	; 0x65
 80099b6:	d07a      	beq.n	8009aae <_scanf_float+0x1ee>
 80099b8:	d818      	bhi.n	80099ec <_scanf_float+0x12c>
 80099ba:	2b54      	cmp	r3, #84	; 0x54
 80099bc:	d066      	beq.n	8009a8c <_scanf_float+0x1cc>
 80099be:	d811      	bhi.n	80099e4 <_scanf_float+0x124>
 80099c0:	2b4e      	cmp	r3, #78	; 0x4e
 80099c2:	d1b5      	bne.n	8009930 <_scanf_float+0x70>
 80099c4:	2a00      	cmp	r2, #0
 80099c6:	d146      	bne.n	8009a56 <_scanf_float+0x196>
 80099c8:	f1b9 0f00 	cmp.w	r9, #0
 80099cc:	d145      	bne.n	8009a5a <_scanf_float+0x19a>
 80099ce:	6821      	ldr	r1, [r4, #0]
 80099d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80099d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80099d8:	d13f      	bne.n	8009a5a <_scanf_float+0x19a>
 80099da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80099de:	6021      	str	r1, [r4, #0]
 80099e0:	2201      	movs	r2, #1
 80099e2:	e02e      	b.n	8009a42 <_scanf_float+0x182>
 80099e4:	2b59      	cmp	r3, #89	; 0x59
 80099e6:	d01e      	beq.n	8009a26 <_scanf_float+0x166>
 80099e8:	2b61      	cmp	r3, #97	; 0x61
 80099ea:	e7de      	b.n	80099aa <_scanf_float+0xea>
 80099ec:	2b6e      	cmp	r3, #110	; 0x6e
 80099ee:	d0e9      	beq.n	80099c4 <_scanf_float+0x104>
 80099f0:	d815      	bhi.n	8009a1e <_scanf_float+0x15e>
 80099f2:	2b66      	cmp	r3, #102	; 0x66
 80099f4:	d043      	beq.n	8009a7e <_scanf_float+0x1be>
 80099f6:	2b69      	cmp	r3, #105	; 0x69
 80099f8:	d19a      	bne.n	8009930 <_scanf_float+0x70>
 80099fa:	f1bb 0f00 	cmp.w	fp, #0
 80099fe:	d138      	bne.n	8009a72 <_scanf_float+0x1b2>
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	d197      	bne.n	8009936 <_scanf_float+0x76>
 8009a06:	6821      	ldr	r1, [r4, #0]
 8009a08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009a0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009a10:	d195      	bne.n	800993e <_scanf_float+0x7e>
 8009a12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009a16:	6021      	str	r1, [r4, #0]
 8009a18:	f04f 0b01 	mov.w	fp, #1
 8009a1c:	e011      	b.n	8009a42 <_scanf_float+0x182>
 8009a1e:	2b74      	cmp	r3, #116	; 0x74
 8009a20:	d034      	beq.n	8009a8c <_scanf_float+0x1cc>
 8009a22:	2b79      	cmp	r3, #121	; 0x79
 8009a24:	d184      	bne.n	8009930 <_scanf_float+0x70>
 8009a26:	f1bb 0f07 	cmp.w	fp, #7
 8009a2a:	d181      	bne.n	8009930 <_scanf_float+0x70>
 8009a2c:	f04f 0b08 	mov.w	fp, #8
 8009a30:	e007      	b.n	8009a42 <_scanf_float+0x182>
 8009a32:	eb12 0f0b 	cmn.w	r2, fp
 8009a36:	f47f af7b 	bne.w	8009930 <_scanf_float+0x70>
 8009a3a:	6821      	ldr	r1, [r4, #0]
 8009a3c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009a40:	6021      	str	r1, [r4, #0]
 8009a42:	702b      	strb	r3, [r5, #0]
 8009a44:	3501      	adds	r5, #1
 8009a46:	e79a      	b.n	800997e <_scanf_float+0xbe>
 8009a48:	6821      	ldr	r1, [r4, #0]
 8009a4a:	0608      	lsls	r0, r1, #24
 8009a4c:	f57f af70 	bpl.w	8009930 <_scanf_float+0x70>
 8009a50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009a54:	e7f4      	b.n	8009a40 <_scanf_float+0x180>
 8009a56:	2a02      	cmp	r2, #2
 8009a58:	d047      	beq.n	8009aea <_scanf_float+0x22a>
 8009a5a:	f1bb 0f01 	cmp.w	fp, #1
 8009a5e:	d003      	beq.n	8009a68 <_scanf_float+0x1a8>
 8009a60:	f1bb 0f04 	cmp.w	fp, #4
 8009a64:	f47f af64 	bne.w	8009930 <_scanf_float+0x70>
 8009a68:	f10b 0b01 	add.w	fp, fp, #1
 8009a6c:	fa5f fb8b 	uxtb.w	fp, fp
 8009a70:	e7e7      	b.n	8009a42 <_scanf_float+0x182>
 8009a72:	f1bb 0f03 	cmp.w	fp, #3
 8009a76:	d0f7      	beq.n	8009a68 <_scanf_float+0x1a8>
 8009a78:	f1bb 0f05 	cmp.w	fp, #5
 8009a7c:	e7f2      	b.n	8009a64 <_scanf_float+0x1a4>
 8009a7e:	f1bb 0f02 	cmp.w	fp, #2
 8009a82:	f47f af55 	bne.w	8009930 <_scanf_float+0x70>
 8009a86:	f04f 0b03 	mov.w	fp, #3
 8009a8a:	e7da      	b.n	8009a42 <_scanf_float+0x182>
 8009a8c:	f1bb 0f06 	cmp.w	fp, #6
 8009a90:	f47f af4e 	bne.w	8009930 <_scanf_float+0x70>
 8009a94:	f04f 0b07 	mov.w	fp, #7
 8009a98:	e7d3      	b.n	8009a42 <_scanf_float+0x182>
 8009a9a:	6821      	ldr	r1, [r4, #0]
 8009a9c:	0588      	lsls	r0, r1, #22
 8009a9e:	f57f af47 	bpl.w	8009930 <_scanf_float+0x70>
 8009aa2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009aa6:	6021      	str	r1, [r4, #0]
 8009aa8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009aac:	e7c9      	b.n	8009a42 <_scanf_float+0x182>
 8009aae:	6821      	ldr	r1, [r4, #0]
 8009ab0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009ab4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009ab8:	d006      	beq.n	8009ac8 <_scanf_float+0x208>
 8009aba:	0548      	lsls	r0, r1, #21
 8009abc:	f57f af38 	bpl.w	8009930 <_scanf_float+0x70>
 8009ac0:	f1b9 0f00 	cmp.w	r9, #0
 8009ac4:	f43f af3b 	beq.w	800993e <_scanf_float+0x7e>
 8009ac8:	0588      	lsls	r0, r1, #22
 8009aca:	bf58      	it	pl
 8009acc:	9802      	ldrpl	r0, [sp, #8]
 8009ace:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009ad2:	bf58      	it	pl
 8009ad4:	eba9 0000 	subpl.w	r0, r9, r0
 8009ad8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009adc:	bf58      	it	pl
 8009ade:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009ae2:	6021      	str	r1, [r4, #0]
 8009ae4:	f04f 0900 	mov.w	r9, #0
 8009ae8:	e7ab      	b.n	8009a42 <_scanf_float+0x182>
 8009aea:	2203      	movs	r2, #3
 8009aec:	e7a9      	b.n	8009a42 <_scanf_float+0x182>
 8009aee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009af2:	9205      	str	r2, [sp, #20]
 8009af4:	4631      	mov	r1, r6
 8009af6:	4638      	mov	r0, r7
 8009af8:	4798      	blx	r3
 8009afa:	9a05      	ldr	r2, [sp, #20]
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f43f af04 	beq.w	800990a <_scanf_float+0x4a>
 8009b02:	e715      	b.n	8009930 <_scanf_float+0x70>
 8009b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	4638      	mov	r0, r7
 8009b10:	4798      	blx	r3
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	e715      	b.n	8009946 <_scanf_float+0x86>
 8009b1a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009b1e:	2b06      	cmp	r3, #6
 8009b20:	d80a      	bhi.n	8009b38 <_scanf_float+0x278>
 8009b22:	f1bb 0f02 	cmp.w	fp, #2
 8009b26:	d966      	bls.n	8009bf6 <_scanf_float+0x336>
 8009b28:	f1ab 0b03 	sub.w	fp, fp, #3
 8009b2c:	fa5f fb8b 	uxtb.w	fp, fp
 8009b30:	eba5 0b0b 	sub.w	fp, r5, fp
 8009b34:	455d      	cmp	r5, fp
 8009b36:	d149      	bne.n	8009bcc <_scanf_float+0x30c>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	05da      	lsls	r2, r3, #23
 8009b3c:	d51f      	bpl.n	8009b7e <_scanf_float+0x2be>
 8009b3e:	055b      	lsls	r3, r3, #21
 8009b40:	d466      	bmi.n	8009c10 <_scanf_float+0x350>
 8009b42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	2965      	cmp	r1, #101	; 0x65
 8009b4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009b4e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	d00d      	beq.n	8009b72 <_scanf_float+0x2b2>
 8009b56:	2945      	cmp	r1, #69	; 0x45
 8009b58:	d00b      	beq.n	8009b72 <_scanf_float+0x2b2>
 8009b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b5e:	4632      	mov	r2, r6
 8009b60:	4638      	mov	r0, r7
 8009b62:	4798      	blx	r3
 8009b64:	6923      	ldr	r3, [r4, #16]
 8009b66:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	f1a5 0b02 	sub.w	fp, r5, #2
 8009b70:	6123      	str	r3, [r4, #16]
 8009b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b76:	4632      	mov	r2, r6
 8009b78:	4638      	mov	r0, r7
 8009b7a:	4798      	blx	r3
 8009b7c:	465d      	mov	r5, fp
 8009b7e:	6826      	ldr	r6, [r4, #0]
 8009b80:	f016 0610 	ands.w	r6, r6, #16
 8009b84:	d170      	bne.n	8009c68 <_scanf_float+0x3a8>
 8009b86:	702e      	strb	r6, [r5, #0]
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b92:	d140      	bne.n	8009c16 <_scanf_float+0x356>
 8009b94:	9b02      	ldr	r3, [sp, #8]
 8009b96:	eba9 0303 	sub.w	r3, r9, r3
 8009b9a:	425a      	negs	r2, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d147      	bne.n	8009c30 <_scanf_float+0x370>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	4641      	mov	r1, r8
 8009ba6:	f000 feb3 	bl	800a910 <_strtod_r>
 8009baa:	6820      	ldr	r0, [r4, #0]
 8009bac:	f8da 3000 	ldr.w	r3, [sl]
 8009bb0:	f010 0f02 	tst.w	r0, #2
 8009bb4:	f103 0204 	add.w	r2, r3, #4
 8009bb8:	f8ca 2000 	str.w	r2, [sl]
 8009bbc:	d043      	beq.n	8009c46 <_scanf_float+0x386>
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	ed83 0b00 	vstr	d0, [r3]
 8009bc4:	68e3      	ldr	r3, [r4, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60e3      	str	r3, [r4, #12]
 8009bca:	e6c0      	b.n	800994e <_scanf_float+0x8e>
 8009bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	4798      	blx	r3
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	6123      	str	r3, [r4, #16]
 8009be0:	e7a8      	b.n	8009b34 <_scanf_float+0x274>
 8009be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009be6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009bea:	4632      	mov	r2, r6
 8009bec:	4638      	mov	r0, r7
 8009bee:	4798      	blx	r3
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	6123      	str	r3, [r4, #16]
 8009bf6:	4545      	cmp	r5, r8
 8009bf8:	d8f3      	bhi.n	8009be2 <_scanf_float+0x322>
 8009bfa:	e6a7      	b.n	800994c <_scanf_float+0x8c>
 8009bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c04:	4632      	mov	r2, r6
 8009c06:	4638      	mov	r0, r7
 8009c08:	4798      	blx	r3
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	4545      	cmp	r5, r8
 8009c12:	d8f3      	bhi.n	8009bfc <_scanf_float+0x33c>
 8009c14:	e69a      	b.n	800994c <_scanf_float+0x8c>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0c1      	beq.n	8009ba0 <_scanf_float+0x2e0>
 8009c1c:	9904      	ldr	r1, [sp, #16]
 8009c1e:	230a      	movs	r3, #10
 8009c20:	4632      	mov	r2, r6
 8009c22:	3101      	adds	r1, #1
 8009c24:	4638      	mov	r0, r7
 8009c26:	f000 feff 	bl	800aa28 <_strtol_r>
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	9d04      	ldr	r5, [sp, #16]
 8009c2e:	1ac2      	subs	r2, r0, r3
 8009c30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c34:	429d      	cmp	r5, r3
 8009c36:	bf28      	it	cs
 8009c38:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009c3c:	490b      	ldr	r1, [pc, #44]	; (8009c6c <_scanf_float+0x3ac>)
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 f81c 	bl	8009c7c <siprintf>
 8009c44:	e7ac      	b.n	8009ba0 <_scanf_float+0x2e0>
 8009c46:	f010 0004 	ands.w	r0, r0, #4
 8009c4a:	d1b8      	bne.n	8009bbe <_scanf_float+0x2fe>
 8009c4c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	d704      	bvc.n	8009c62 <_scanf_float+0x3a2>
 8009c58:	f000 f80a 	bl	8009c70 <nanf>
 8009c5c:	ed85 0a00 	vstr	s0, [r5]
 8009c60:	e7b0      	b.n	8009bc4 <_scanf_float+0x304>
 8009c62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009c66:	e7f9      	b.n	8009c5c <_scanf_float+0x39c>
 8009c68:	2600      	movs	r6, #0
 8009c6a:	e670      	b.n	800994e <_scanf_float+0x8e>
 8009c6c:	0800e4e2 	.word	0x0800e4e2

08009c70 <nanf>:
 8009c70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c78 <nanf+0x8>
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	7fc00000 	.word	0x7fc00000

08009c7c <siprintf>:
 8009c7c:	b40e      	push	{r1, r2, r3}
 8009c7e:	b500      	push	{lr}
 8009c80:	b09c      	sub	sp, #112	; 0x70
 8009c82:	ab1d      	add	r3, sp, #116	; 0x74
 8009c84:	9002      	str	r0, [sp, #8]
 8009c86:	9006      	str	r0, [sp, #24]
 8009c88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c8c:	4809      	ldr	r0, [pc, #36]	; (8009cb4 <siprintf+0x38>)
 8009c8e:	9107      	str	r1, [sp, #28]
 8009c90:	9104      	str	r1, [sp, #16]
 8009c92:	4909      	ldr	r1, [pc, #36]	; (8009cb8 <siprintf+0x3c>)
 8009c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c98:	9105      	str	r1, [sp, #20]
 8009c9a:	6800      	ldr	r0, [r0, #0]
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	a902      	add	r1, sp, #8
 8009ca0:	f002 fd20 	bl	800c6e4 <_svfiprintf_r>
 8009ca4:	9b02      	ldr	r3, [sp, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	b01c      	add	sp, #112	; 0x70
 8009cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cb0:	b003      	add	sp, #12
 8009cb2:	4770      	bx	lr
 8009cb4:	20000014 	.word	0x20000014
 8009cb8:	ffff0208 	.word	0xffff0208

08009cbc <siscanf>:
 8009cbc:	b40e      	push	{r1, r2, r3}
 8009cbe:	b530      	push	{r4, r5, lr}
 8009cc0:	b09c      	sub	sp, #112	; 0x70
 8009cc2:	ac1f      	add	r4, sp, #124	; 0x7c
 8009cc4:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009cc8:	f854 5b04 	ldr.w	r5, [r4], #4
 8009ccc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009cd0:	9002      	str	r0, [sp, #8]
 8009cd2:	9006      	str	r0, [sp, #24]
 8009cd4:	f7f6 fab4 	bl	8000240 <strlen>
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <siscanf+0x4c>)
 8009cda:	9003      	str	r0, [sp, #12]
 8009cdc:	9007      	str	r0, [sp, #28]
 8009cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce0:	480a      	ldr	r0, [pc, #40]	; (8009d0c <siscanf+0x50>)
 8009ce2:	9401      	str	r4, [sp, #4]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce8:	9314      	str	r3, [sp, #80]	; 0x50
 8009cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009cee:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	a902      	add	r1, sp, #8
 8009cf8:	6800      	ldr	r0, [r0, #0]
 8009cfa:	f002 fe45 	bl	800c988 <__ssvfiscanf_r>
 8009cfe:	b01c      	add	sp, #112	; 0x70
 8009d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d04:	b003      	add	sp, #12
 8009d06:	4770      	bx	lr
 8009d08:	08009d11 	.word	0x08009d11
 8009d0c:	20000014 	.word	0x20000014

08009d10 <__seofread>:
 8009d10:	2000      	movs	r0, #0
 8009d12:	4770      	bx	lr

08009d14 <strstr>:
 8009d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d16:	7803      	ldrb	r3, [r0, #0]
 8009d18:	b17b      	cbz	r3, 8009d3a <strstr+0x26>
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	7823      	ldrb	r3, [r4, #0]
 8009d1e:	4620      	mov	r0, r4
 8009d20:	1c66      	adds	r6, r4, #1
 8009d22:	b17b      	cbz	r3, 8009d44 <strstr+0x30>
 8009d24:	1e4a      	subs	r2, r1, #1
 8009d26:	1e63      	subs	r3, r4, #1
 8009d28:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009d2c:	b14d      	cbz	r5, 8009d42 <strstr+0x2e>
 8009d2e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009d32:	42af      	cmp	r7, r5
 8009d34:	4634      	mov	r4, r6
 8009d36:	d0f7      	beq.n	8009d28 <strstr+0x14>
 8009d38:	e7f0      	b.n	8009d1c <strstr+0x8>
 8009d3a:	780b      	ldrb	r3, [r1, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bf18      	it	ne
 8009d40:	2000      	movne	r0, #0
 8009d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d44:	4618      	mov	r0, r3
 8009d46:	e7fc      	b.n	8009d42 <strstr+0x2e>

08009d48 <sulp>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	4616      	mov	r6, r2
 8009d50:	ec45 4b10 	vmov	d0, r4, r5
 8009d54:	f002 fa82 	bl	800c25c <__ulp>
 8009d58:	b17e      	cbz	r6, 8009d7a <sulp+0x32>
 8009d5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	dd09      	ble.n	8009d7a <sulp+0x32>
 8009d66:	051b      	lsls	r3, r3, #20
 8009d68:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009d72:	ec41 0b17 	vmov	d7, r0, r1
 8009d76:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	0000      	movs	r0, r0
	...

08009d80 <_strtod_l>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	ed2d 8b0c 	vpush	{d8-d13}
 8009d88:	4698      	mov	r8, r3
 8009d8a:	b09d      	sub	sp, #116	; 0x74
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4640      	mov	r0, r8
 8009d92:	460e      	mov	r6, r1
 8009d94:	9214      	str	r2, [sp, #80]	; 0x50
 8009d96:	9318      	str	r3, [sp, #96]	; 0x60
 8009d98:	f001 ff6a 	bl	800bc70 <__localeconv_l>
 8009d9c:	4681      	mov	r9, r0
 8009d9e:	6800      	ldr	r0, [r0, #0]
 8009da0:	f7f6 fa4e 	bl	8000240 <strlen>
 8009da4:	f04f 0a00 	mov.w	sl, #0
 8009da8:	4607      	mov	r7, r0
 8009daa:	f04f 0b00 	mov.w	fp, #0
 8009dae:	9617      	str	r6, [sp, #92]	; 0x5c
 8009db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009db2:	781a      	ldrb	r2, [r3, #0]
 8009db4:	2a0d      	cmp	r2, #13
 8009db6:	d834      	bhi.n	8009e22 <_strtod_l+0xa2>
 8009db8:	2a09      	cmp	r2, #9
 8009dba:	d238      	bcs.n	8009e2e <_strtod_l+0xae>
 8009dbc:	2a00      	cmp	r2, #0
 8009dbe:	d040      	beq.n	8009e42 <_strtod_l+0xc2>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009dc4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009dc6:	782b      	ldrb	r3, [r5, #0]
 8009dc8:	2b30      	cmp	r3, #48	; 0x30
 8009dca:	f040 80b3 	bne.w	8009f34 <_strtod_l+0x1b4>
 8009dce:	786b      	ldrb	r3, [r5, #1]
 8009dd0:	2b58      	cmp	r3, #88	; 0x58
 8009dd2:	d001      	beq.n	8009dd8 <_strtod_l+0x58>
 8009dd4:	2b78      	cmp	r3, #120	; 0x78
 8009dd6:	d169      	bne.n	8009eac <_strtod_l+0x12c>
 8009dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	ab18      	add	r3, sp, #96	; 0x60
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	f8cd 8008 	str.w	r8, [sp, #8]
 8009de4:	ab19      	add	r3, sp, #100	; 0x64
 8009de6:	4a8f      	ldr	r2, [pc, #572]	; (800a024 <_strtod_l+0x2a4>)
 8009de8:	a917      	add	r1, sp, #92	; 0x5c
 8009dea:	4620      	mov	r0, r4
 8009dec:	f001 fc57 	bl	800b69e <__gethex>
 8009df0:	f010 0607 	ands.w	r6, r0, #7
 8009df4:	4607      	mov	r7, r0
 8009df6:	d005      	beq.n	8009e04 <_strtod_l+0x84>
 8009df8:	2e06      	cmp	r6, #6
 8009dfa:	d12c      	bne.n	8009e56 <_strtod_l+0xd6>
 8009dfc:	3501      	adds	r5, #1
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9517      	str	r5, [sp, #92]	; 0x5c
 8009e02:	930d      	str	r3, [sp, #52]	; 0x34
 8009e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 855e 	bne.w	800a8c8 <_strtod_l+0xb48>
 8009e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e0e:	b1eb      	cbz	r3, 8009e4c <_strtod_l+0xcc>
 8009e10:	ec4b ab17 	vmov	d7, sl, fp
 8009e14:	eeb1 0b47 	vneg.f64	d0, d7
 8009e18:	b01d      	add	sp, #116	; 0x74
 8009e1a:	ecbd 8b0c 	vpop	{d8-d13}
 8009e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e22:	2a2b      	cmp	r2, #43	; 0x2b
 8009e24:	d015      	beq.n	8009e52 <_strtod_l+0xd2>
 8009e26:	2a2d      	cmp	r2, #45	; 0x2d
 8009e28:	d004      	beq.n	8009e34 <_strtod_l+0xb4>
 8009e2a:	2a20      	cmp	r2, #32
 8009e2c:	d1c8      	bne.n	8009dc0 <_strtod_l+0x40>
 8009e2e:	3301      	adds	r3, #1
 8009e30:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e32:	e7bd      	b.n	8009db0 <_strtod_l+0x30>
 8009e34:	2201      	movs	r2, #1
 8009e36:	920d      	str	r2, [sp, #52]	; 0x34
 8009e38:	1c5a      	adds	r2, r3, #1
 8009e3a:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1c0      	bne.n	8009dc4 <_strtod_l+0x44>
 8009e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e44:	9617      	str	r6, [sp, #92]	; 0x5c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f040 853c 	bne.w	800a8c4 <_strtod_l+0xb44>
 8009e4c:	ec4b ab10 	vmov	d0, sl, fp
 8009e50:	e7e2      	b.n	8009e18 <_strtod_l+0x98>
 8009e52:	2200      	movs	r2, #0
 8009e54:	e7ef      	b.n	8009e36 <_strtod_l+0xb6>
 8009e56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e58:	b13a      	cbz	r2, 8009e6a <_strtod_l+0xea>
 8009e5a:	2135      	movs	r1, #53	; 0x35
 8009e5c:	a81a      	add	r0, sp, #104	; 0x68
 8009e5e:	f002 faf6 	bl	800c44e <__copybits>
 8009e62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e64:	4620      	mov	r0, r4
 8009e66:	f001 ff61 	bl	800bd2c <_Bfree>
 8009e6a:	3e01      	subs	r6, #1
 8009e6c:	2e04      	cmp	r6, #4
 8009e6e:	d806      	bhi.n	8009e7e <_strtod_l+0xfe>
 8009e70:	e8df f006 	tbb	[pc, r6]
 8009e74:	1714030a 	.word	0x1714030a
 8009e78:	0a          	.byte	0x0a
 8009e79:	00          	.byte	0x00
 8009e7a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009e7e:	073b      	lsls	r3, r7, #28
 8009e80:	d5c0      	bpl.n	8009e04 <_strtod_l+0x84>
 8009e82:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009e86:	e7bd      	b.n	8009e04 <_strtod_l+0x84>
 8009e88:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009e8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e92:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e96:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e9a:	e7f0      	b.n	8009e7e <_strtod_l+0xfe>
 8009e9c:	f8df b188 	ldr.w	fp, [pc, #392]	; 800a028 <_strtod_l+0x2a8>
 8009ea0:	e7ed      	b.n	8009e7e <_strtod_l+0xfe>
 8009ea2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009ea6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009eaa:	e7e8      	b.n	8009e7e <_strtod_l+0xfe>
 8009eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	2b30      	cmp	r3, #48	; 0x30
 8009eb6:	d0f9      	beq.n	8009eac <_strtod_l+0x12c>
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0a3      	beq.n	8009e04 <_strtod_l+0x84>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8009ec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	9306      	str	r3, [sp, #24]
 8009ec8:	9308      	str	r3, [sp, #32]
 8009eca:	461d      	mov	r5, r3
 8009ecc:	220a      	movs	r2, #10
 8009ece:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009ed0:	f890 8000 	ldrb.w	r8, [r0]
 8009ed4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8009ed8:	b2d9      	uxtb	r1, r3
 8009eda:	2909      	cmp	r1, #9
 8009edc:	d92c      	bls.n	8009f38 <_strtod_l+0x1b8>
 8009ede:	463a      	mov	r2, r7
 8009ee0:	f8d9 1000 	ldr.w	r1, [r9]
 8009ee4:	f003 f83a 	bl	800cf5c <strncmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d035      	beq.n	8009f58 <_strtod_l+0x1d8>
 8009eec:	2000      	movs	r0, #0
 8009eee:	4642      	mov	r2, r8
 8009ef0:	462b      	mov	r3, r5
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	9004      	str	r0, [sp, #16]
 8009ef6:	2a65      	cmp	r2, #101	; 0x65
 8009ef8:	d001      	beq.n	8009efe <_strtod_l+0x17e>
 8009efa:	2a45      	cmp	r2, #69	; 0x45
 8009efc:	d117      	bne.n	8009f2e <_strtod_l+0x1ae>
 8009efe:	b923      	cbnz	r3, 8009f0a <_strtod_l+0x18a>
 8009f00:	b910      	cbnz	r0, 8009f08 <_strtod_l+0x188>
 8009f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d09c      	beq.n	8009e42 <_strtod_l+0xc2>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009f0c:	1c72      	adds	r2, r6, #1
 8009f0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f10:	7872      	ldrb	r2, [r6, #1]
 8009f12:	2a2b      	cmp	r2, #43	; 0x2b
 8009f14:	f000 8082 	beq.w	800a01c <_strtod_l+0x29c>
 8009f18:	2a2d      	cmp	r2, #45	; 0x2d
 8009f1a:	d079      	beq.n	800a010 <_strtod_l+0x290>
 8009f1c:	f04f 0e00 	mov.w	lr, #0
 8009f20:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009f24:	f1bc 0f09 	cmp.w	ip, #9
 8009f28:	f240 8086 	bls.w	800a038 <_strtod_l+0x2b8>
 8009f2c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	e0a8      	b.n	800a086 <_strtod_l+0x306>
 8009f34:	2300      	movs	r3, #0
 8009f36:	e7c2      	b.n	8009ebe <_strtod_l+0x13e>
 8009f38:	2d08      	cmp	r5, #8
 8009f3a:	bfd5      	itete	le
 8009f3c:	9908      	ldrle	r1, [sp, #32]
 8009f3e:	9906      	ldrgt	r1, [sp, #24]
 8009f40:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f48:	f100 0001 	add.w	r0, r0, #1
 8009f4c:	bfd4      	ite	le
 8009f4e:	9308      	strle	r3, [sp, #32]
 8009f50:	9306      	strgt	r3, [sp, #24]
 8009f52:	3501      	adds	r5, #1
 8009f54:	9017      	str	r0, [sp, #92]	; 0x5c
 8009f56:	e7ba      	b.n	8009ece <_strtod_l+0x14e>
 8009f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f5a:	19da      	adds	r2, r3, r7
 8009f5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f5e:	5dda      	ldrb	r2, [r3, r7]
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	d038      	beq.n	8009fd6 <_strtod_l+0x256>
 8009f64:	4601      	mov	r1, r0
 8009f66:	462b      	mov	r3, r5
 8009f68:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009f6c:	2f09      	cmp	r7, #9
 8009f6e:	d913      	bls.n	8009f98 <_strtod_l+0x218>
 8009f70:	2701      	movs	r7, #1
 8009f72:	9704      	str	r7, [sp, #16]
 8009f74:	e7bf      	b.n	8009ef6 <_strtod_l+0x176>
 8009f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f7c:	785a      	ldrb	r2, [r3, #1]
 8009f7e:	3001      	adds	r0, #1
 8009f80:	2a30      	cmp	r2, #48	; 0x30
 8009f82:	d0f8      	beq.n	8009f76 <_strtod_l+0x1f6>
 8009f84:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	f200 84a2 	bhi.w	800a8d2 <_strtod_l+0xb52>
 8009f8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f90:	930c      	str	r3, [sp, #48]	; 0x30
 8009f92:	4601      	mov	r1, r0
 8009f94:	2000      	movs	r0, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8009f9c:	f100 0701 	add.w	r7, r0, #1
 8009fa0:	d013      	beq.n	8009fca <_strtod_l+0x24a>
 8009fa2:	4439      	add	r1, r7
 8009fa4:	eb00 0e03 	add.w	lr, r0, r3
 8009fa8:	461f      	mov	r7, r3
 8009faa:	f04f 0c0a 	mov.w	ip, #10
 8009fae:	45be      	cmp	lr, r7
 8009fb0:	d113      	bne.n	8009fda <_strtod_l+0x25a>
 8009fb2:	181f      	adds	r7, r3, r0
 8009fb4:	2f08      	cmp	r7, #8
 8009fb6:	f103 0301 	add.w	r3, r3, #1
 8009fba:	4403      	add	r3, r0
 8009fbc:	dc1d      	bgt.n	8009ffa <_strtod_l+0x27a>
 8009fbe:	9a08      	ldr	r2, [sp, #32]
 8009fc0:	200a      	movs	r0, #10
 8009fc2:	fb00 8202 	mla	r2, r0, r2, r8
 8009fc6:	9208      	str	r2, [sp, #32]
 8009fc8:	2700      	movs	r7, #0
 8009fca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fcc:	1c50      	adds	r0, r2, #1
 8009fce:	9017      	str	r0, [sp, #92]	; 0x5c
 8009fd0:	7852      	ldrb	r2, [r2, #1]
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	e7c8      	b.n	8009f68 <_strtod_l+0x1e8>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	e7d2      	b.n	8009f80 <_strtod_l+0x200>
 8009fda:	2f08      	cmp	r7, #8
 8009fdc:	f107 0701 	add.w	r7, r7, #1
 8009fe0:	dc04      	bgt.n	8009fec <_strtod_l+0x26c>
 8009fe2:	9a08      	ldr	r2, [sp, #32]
 8009fe4:	fb0c f202 	mul.w	r2, ip, r2
 8009fe8:	9208      	str	r2, [sp, #32]
 8009fea:	e7e0      	b.n	8009fae <_strtod_l+0x22e>
 8009fec:	2f10      	cmp	r7, #16
 8009fee:	bfde      	ittt	le
 8009ff0:	9a06      	ldrle	r2, [sp, #24]
 8009ff2:	fb0c f202 	mulle.w	r2, ip, r2
 8009ff6:	9206      	strle	r2, [sp, #24]
 8009ff8:	e7d9      	b.n	8009fae <_strtod_l+0x22e>
 8009ffa:	2b10      	cmp	r3, #16
 8009ffc:	bfdf      	itttt	le
 8009ffe:	9a06      	ldrle	r2, [sp, #24]
 800a000:	200a      	movle	r0, #10
 800a002:	fb00 8202 	mlale	r2, r0, r2, r8
 800a006:	9206      	strle	r2, [sp, #24]
 800a008:	e7de      	b.n	8009fc8 <_strtod_l+0x248>
 800a00a:	2301      	movs	r3, #1
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	e777      	b.n	8009f00 <_strtod_l+0x180>
 800a010:	f04f 0e01 	mov.w	lr, #1
 800a014:	1cb2      	adds	r2, r6, #2
 800a016:	9217      	str	r2, [sp, #92]	; 0x5c
 800a018:	78b2      	ldrb	r2, [r6, #2]
 800a01a:	e781      	b.n	8009f20 <_strtod_l+0x1a0>
 800a01c:	f04f 0e00 	mov.w	lr, #0
 800a020:	e7f8      	b.n	800a014 <_strtod_l+0x294>
 800a022:	bf00      	nop
 800a024:	0800e4e8 	.word	0x0800e4e8
 800a028:	7ff00000 	.word	0x7ff00000
 800a02c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a02e:	f102 0c01 	add.w	ip, r2, #1
 800a032:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800a036:	7852      	ldrb	r2, [r2, #1]
 800a038:	2a30      	cmp	r2, #48	; 0x30
 800a03a:	d0f7      	beq.n	800a02c <_strtod_l+0x2ac>
 800a03c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800a040:	f1bc 0f08 	cmp.w	ip, #8
 800a044:	f63f af73 	bhi.w	8009f2e <_strtod_l+0x1ae>
 800a048:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800a04c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a04e:	920e      	str	r2, [sp, #56]	; 0x38
 800a050:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a052:	f102 0c01 	add.w	ip, r2, #1
 800a056:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800a05a:	7852      	ldrb	r2, [r2, #1]
 800a05c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800a060:	f1b9 0f09 	cmp.w	r9, #9
 800a064:	d939      	bls.n	800a0da <_strtod_l+0x35a>
 800a066:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a068:	ebac 0c07 	sub.w	ip, ip, r7
 800a06c:	f1bc 0f08 	cmp.w	ip, #8
 800a070:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800a074:	dc37      	bgt.n	800a0e6 <_strtod_l+0x366>
 800a076:	45e0      	cmp	r8, ip
 800a078:	bfa8      	it	ge
 800a07a:	46e0      	movge	r8, ip
 800a07c:	f1be 0f00 	cmp.w	lr, #0
 800a080:	d001      	beq.n	800a086 <_strtod_l+0x306>
 800a082:	f1c8 0800 	rsb	r8, r8, #0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d151      	bne.n	800a12e <_strtod_l+0x3ae>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	f47f aeba 	bne.w	8009e04 <_strtod_l+0x84>
 800a090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a092:	2b00      	cmp	r3, #0
 800a094:	f47f aeb6 	bne.w	8009e04 <_strtod_l+0x84>
 800a098:	9b04      	ldr	r3, [sp, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f47f aed1 	bne.w	8009e42 <_strtod_l+0xc2>
 800a0a0:	2a4e      	cmp	r2, #78	; 0x4e
 800a0a2:	d027      	beq.n	800a0f4 <_strtod_l+0x374>
 800a0a4:	dc21      	bgt.n	800a0ea <_strtod_l+0x36a>
 800a0a6:	2a49      	cmp	r2, #73	; 0x49
 800a0a8:	f47f aecb 	bne.w	8009e42 <_strtod_l+0xc2>
 800a0ac:	499a      	ldr	r1, [pc, #616]	; (800a318 <_strtod_l+0x598>)
 800a0ae:	a817      	add	r0, sp, #92	; 0x5c
 800a0b0:	f001 fd28 	bl	800bb04 <__match>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f43f aec4 	beq.w	8009e42 <_strtod_l+0xc2>
 800a0ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0bc:	4997      	ldr	r1, [pc, #604]	; (800a31c <_strtod_l+0x59c>)
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	a817      	add	r0, sp, #92	; 0x5c
 800a0c2:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0c4:	f001 fd1e 	bl	800bb04 <__match>
 800a0c8:	b910      	cbnz	r0, 800a0d0 <_strtod_l+0x350>
 800a0ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0d0:	f8df b260 	ldr.w	fp, [pc, #608]	; 800a334 <_strtod_l+0x5b4>
 800a0d4:	f04f 0a00 	mov.w	sl, #0
 800a0d8:	e694      	b.n	8009e04 <_strtod_l+0x84>
 800a0da:	270a      	movs	r7, #10
 800a0dc:	fb07 2808 	mla	r8, r7, r8, r2
 800a0e0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800a0e4:	e7b4      	b.n	800a050 <_strtod_l+0x2d0>
 800a0e6:	46e0      	mov	r8, ip
 800a0e8:	e7c8      	b.n	800a07c <_strtod_l+0x2fc>
 800a0ea:	2a69      	cmp	r2, #105	; 0x69
 800a0ec:	d0de      	beq.n	800a0ac <_strtod_l+0x32c>
 800a0ee:	2a6e      	cmp	r2, #110	; 0x6e
 800a0f0:	f47f aea7 	bne.w	8009e42 <_strtod_l+0xc2>
 800a0f4:	498a      	ldr	r1, [pc, #552]	; (800a320 <_strtod_l+0x5a0>)
 800a0f6:	a817      	add	r0, sp, #92	; 0x5c
 800a0f8:	f001 fd04 	bl	800bb04 <__match>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f43f aea0 	beq.w	8009e42 <_strtod_l+0xc2>
 800a102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b28      	cmp	r3, #40	; 0x28
 800a108:	d10e      	bne.n	800a128 <_strtod_l+0x3a8>
 800a10a:	aa1a      	add	r2, sp, #104	; 0x68
 800a10c:	4985      	ldr	r1, [pc, #532]	; (800a324 <_strtod_l+0x5a4>)
 800a10e:	a817      	add	r0, sp, #92	; 0x5c
 800a110:	f001 fd0c 	bl	800bb2c <__hexnan>
 800a114:	2805      	cmp	r0, #5
 800a116:	d107      	bne.n	800a128 <_strtod_l+0x3a8>
 800a118:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a11a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a11e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a122:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a126:	e66d      	b.n	8009e04 <_strtod_l+0x84>
 800a128:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800a338 <_strtod_l+0x5b8>
 800a12c:	e7d2      	b.n	800a0d4 <_strtod_l+0x354>
 800a12e:	eddd 7a08 	vldr	s15, [sp, #32]
 800a132:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a136:	eba8 0201 	sub.w	r2, r8, r1
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	bf08      	it	eq
 800a13e:	461d      	moveq	r5, r3
 800a140:	2b10      	cmp	r3, #16
 800a142:	9204      	str	r2, [sp, #16]
 800a144:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a148:	461a      	mov	r2, r3
 800a14a:	bfa8      	it	ge
 800a14c:	2210      	movge	r2, #16
 800a14e:	2b09      	cmp	r3, #9
 800a150:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a154:	dc14      	bgt.n	800a180 <_strtod_l+0x400>
 800a156:	9904      	ldr	r1, [sp, #16]
 800a158:	2900      	cmp	r1, #0
 800a15a:	f43f ae53 	beq.w	8009e04 <_strtod_l+0x84>
 800a15e:	9904      	ldr	r1, [sp, #16]
 800a160:	dd72      	ble.n	800a248 <_strtod_l+0x4c8>
 800a162:	2916      	cmp	r1, #22
 800a164:	dc5a      	bgt.n	800a21c <_strtod_l+0x49c>
 800a166:	4970      	ldr	r1, [pc, #448]	; (800a328 <_strtod_l+0x5a8>)
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a16e:	ed91 7b00 	vldr	d7, [r1]
 800a172:	ec4b ab16 	vmov	d6, sl, fp
 800a176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a17a:	ec5b ab17 	vmov	sl, fp, d7
 800a17e:	e641      	b.n	8009e04 <_strtod_l+0x84>
 800a180:	4969      	ldr	r1, [pc, #420]	; (800a328 <_strtod_l+0x5a8>)
 800a182:	eddd 7a06 	vldr	s15, [sp, #24]
 800a186:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a18a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800a18e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a192:	2b0f      	cmp	r3, #15
 800a194:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a198:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a19c:	ec5b ab17 	vmov	sl, fp, d7
 800a1a0:	ddd9      	ble.n	800a156 <_strtod_l+0x3d6>
 800a1a2:	9904      	ldr	r1, [sp, #16]
 800a1a4:	1a9a      	subs	r2, r3, r2
 800a1a6:	440a      	add	r2, r1
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	f340 8096 	ble.w	800a2da <_strtod_l+0x55a>
 800a1ae:	f012 000f 	ands.w	r0, r2, #15
 800a1b2:	d00a      	beq.n	800a1ca <_strtod_l+0x44a>
 800a1b4:	495c      	ldr	r1, [pc, #368]	; (800a328 <_strtod_l+0x5a8>)
 800a1b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a1ba:	ed91 7b00 	vldr	d7, [r1]
 800a1be:	ec4b ab16 	vmov	d6, sl, fp
 800a1c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1c6:	ec5b ab17 	vmov	sl, fp, d7
 800a1ca:	f032 020f 	bics.w	r2, r2, #15
 800a1ce:	d072      	beq.n	800a2b6 <_strtod_l+0x536>
 800a1d0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800a1d4:	dd45      	ble.n	800a262 <_strtod_l+0x4e2>
 800a1d6:	2500      	movs	r5, #0
 800a1d8:	46a8      	mov	r8, r5
 800a1da:	9506      	str	r5, [sp, #24]
 800a1dc:	46a9      	mov	r9, r5
 800a1de:	2322      	movs	r3, #34	; 0x22
 800a1e0:	f8df b150 	ldr.w	fp, [pc, #336]	; 800a334 <_strtod_l+0x5b4>
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	f04f 0a00 	mov.w	sl, #0
 800a1ea:	9b06      	ldr	r3, [sp, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f43f ae09 	beq.w	8009e04 <_strtod_l+0x84>
 800a1f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f001 fd99 	bl	800bd2c <_Bfree>
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f001 fd95 	bl	800bd2c <_Bfree>
 800a202:	4641      	mov	r1, r8
 800a204:	4620      	mov	r0, r4
 800a206:	f001 fd91 	bl	800bd2c <_Bfree>
 800a20a:	9906      	ldr	r1, [sp, #24]
 800a20c:	4620      	mov	r0, r4
 800a20e:	f001 fd8d 	bl	800bd2c <_Bfree>
 800a212:	4629      	mov	r1, r5
 800a214:	4620      	mov	r0, r4
 800a216:	f001 fd89 	bl	800bd2c <_Bfree>
 800a21a:	e5f3      	b.n	8009e04 <_strtod_l+0x84>
 800a21c:	9804      	ldr	r0, [sp, #16]
 800a21e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800a222:	4281      	cmp	r1, r0
 800a224:	dbbd      	blt.n	800a1a2 <_strtod_l+0x422>
 800a226:	4a40      	ldr	r2, [pc, #256]	; (800a328 <_strtod_l+0x5a8>)
 800a228:	f1c3 030f 	rsb	r3, r3, #15
 800a22c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a230:	ed91 7b00 	vldr	d7, [r1]
 800a234:	ec4b ab16 	vmov	d6, sl, fp
 800a238:	1ac3      	subs	r3, r0, r3
 800a23a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a23e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a242:	ed92 6b00 	vldr	d6, [r2]
 800a246:	e796      	b.n	800a176 <_strtod_l+0x3f6>
 800a248:	3116      	adds	r1, #22
 800a24a:	dbaa      	blt.n	800a1a2 <_strtod_l+0x422>
 800a24c:	4936      	ldr	r1, [pc, #216]	; (800a328 <_strtod_l+0x5a8>)
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800a254:	ed91 7b00 	vldr	d7, [r1]
 800a258:	ec4b ab16 	vmov	d6, sl, fp
 800a25c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a260:	e78b      	b.n	800a17a <_strtod_l+0x3fa>
 800a262:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a266:	2000      	movs	r0, #0
 800a268:	4e30      	ldr	r6, [pc, #192]	; (800a32c <_strtod_l+0x5ac>)
 800a26a:	1112      	asrs	r2, r2, #4
 800a26c:	4601      	mov	r1, r0
 800a26e:	2a01      	cmp	r2, #1
 800a270:	dc23      	bgt.n	800a2ba <_strtod_l+0x53a>
 800a272:	b108      	cbz	r0, 800a278 <_strtod_l+0x4f8>
 800a274:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a278:	4a2c      	ldr	r2, [pc, #176]	; (800a32c <_strtod_l+0x5ac>)
 800a27a:	482d      	ldr	r0, [pc, #180]	; (800a330 <_strtod_l+0x5b0>)
 800a27c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800a280:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a284:	ed91 7b00 	vldr	d7, [r1]
 800a288:	ec4b ab16 	vmov	d6, sl, fp
 800a28c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a290:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a294:	9907      	ldr	r1, [sp, #28]
 800a296:	4a27      	ldr	r2, [pc, #156]	; (800a334 <_strtod_l+0x5b4>)
 800a298:	400a      	ands	r2, r1
 800a29a:	4282      	cmp	r2, r0
 800a29c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a2a0:	d899      	bhi.n	800a1d6 <_strtod_l+0x456>
 800a2a2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800a2a6:	4282      	cmp	r2, r0
 800a2a8:	bf86      	itte	hi
 800a2aa:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800a33c <_strtod_l+0x5bc>
 800a2ae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a2b2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800a2b6:	2700      	movs	r7, #0
 800a2b8:	e070      	b.n	800a39c <_strtod_l+0x61c>
 800a2ba:	07d7      	lsls	r7, r2, #31
 800a2bc:	d50a      	bpl.n	800a2d4 <_strtod_l+0x554>
 800a2be:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800a2c2:	ed90 7b00 	vldr	d7, [r0]
 800a2c6:	ed9d 6b06 	vldr	d6, [sp, #24]
 800a2ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a2ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2d2:	2001      	movs	r0, #1
 800a2d4:	3101      	adds	r1, #1
 800a2d6:	1052      	asrs	r2, r2, #1
 800a2d8:	e7c9      	b.n	800a26e <_strtod_l+0x4ee>
 800a2da:	d0ec      	beq.n	800a2b6 <_strtod_l+0x536>
 800a2dc:	4252      	negs	r2, r2
 800a2de:	f012 000f 	ands.w	r0, r2, #15
 800a2e2:	d00a      	beq.n	800a2fa <_strtod_l+0x57a>
 800a2e4:	4910      	ldr	r1, [pc, #64]	; (800a328 <_strtod_l+0x5a8>)
 800a2e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a2ea:	ed91 7b00 	vldr	d7, [r1]
 800a2ee:	ec4b ab16 	vmov	d6, sl, fp
 800a2f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a2f6:	ec5b ab17 	vmov	sl, fp, d7
 800a2fa:	1112      	asrs	r2, r2, #4
 800a2fc:	d0db      	beq.n	800a2b6 <_strtod_l+0x536>
 800a2fe:	2a1f      	cmp	r2, #31
 800a300:	dd1e      	ble.n	800a340 <_strtod_l+0x5c0>
 800a302:	2500      	movs	r5, #0
 800a304:	46a8      	mov	r8, r5
 800a306:	9506      	str	r5, [sp, #24]
 800a308:	46a9      	mov	r9, r5
 800a30a:	2322      	movs	r3, #34	; 0x22
 800a30c:	f04f 0a00 	mov.w	sl, #0
 800a310:	f04f 0b00 	mov.w	fp, #0
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	e768      	b.n	800a1ea <_strtod_l+0x46a>
 800a318:	0800e4b5 	.word	0x0800e4b5
 800a31c:	0800e53b 	.word	0x0800e53b
 800a320:	0800e4bd 	.word	0x0800e4bd
 800a324:	0800e4fc 	.word	0x0800e4fc
 800a328:	0800e578 	.word	0x0800e578
 800a32c:	0800e550 	.word	0x0800e550
 800a330:	7ca00000 	.word	0x7ca00000
 800a334:	7ff00000 	.word	0x7ff00000
 800a338:	fff80000 	.word	0xfff80000
 800a33c:	7fefffff 	.word	0x7fefffff
 800a340:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a344:	f012 0710 	ands.w	r7, r2, #16
 800a348:	49ab      	ldr	r1, [pc, #684]	; (800a5f8 <_strtod_l+0x878>)
 800a34a:	bf18      	it	ne
 800a34c:	276a      	movne	r7, #106	; 0x6a
 800a34e:	2000      	movs	r0, #0
 800a350:	2a00      	cmp	r2, #0
 800a352:	f300 8113 	bgt.w	800a57c <_strtod_l+0x7fc>
 800a356:	b108      	cbz	r0, 800a35c <_strtod_l+0x5dc>
 800a358:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a35c:	b1bf      	cbz	r7, 800a38e <_strtod_l+0x60e>
 800a35e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a362:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800a366:	2a00      	cmp	r2, #0
 800a368:	4659      	mov	r1, fp
 800a36a:	dd10      	ble.n	800a38e <_strtod_l+0x60e>
 800a36c:	2a1f      	cmp	r2, #31
 800a36e:	f340 8113 	ble.w	800a598 <_strtod_l+0x818>
 800a372:	2a34      	cmp	r2, #52	; 0x34
 800a374:	bfde      	ittt	le
 800a376:	3a20      	suble	r2, #32
 800a378:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 800a37c:	fa00 f202 	lslle.w	r2, r0, r2
 800a380:	f04f 0a00 	mov.w	sl, #0
 800a384:	bfcc      	ite	gt
 800a386:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a38a:	ea02 0b01 	andle.w	fp, r2, r1
 800a38e:	ec4b ab17 	vmov	d7, sl, fp
 800a392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39a:	d0b2      	beq.n	800a302 <_strtod_l+0x582>
 800a39c:	9a08      	ldr	r2, [sp, #32]
 800a39e:	9200      	str	r2, [sp, #0]
 800a3a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f001 fd13 	bl	800bdd0 <__s2b>
 800a3aa:	9006      	str	r0, [sp, #24]
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f43f af12 	beq.w	800a1d6 <_strtod_l+0x456>
 800a3b2:	9a04      	ldr	r2, [sp, #16]
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	2a00      	cmp	r2, #0
 800a3b8:	f1c3 0300 	rsb	r3, r3, #0
 800a3bc:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800a5e0 <_strtod_l+0x860>
 800a3c0:	bfa8      	it	ge
 800a3c2:	2300      	movge	r3, #0
 800a3c4:	ed9f ab88 	vldr	d10, [pc, #544]	; 800a5e8 <_strtod_l+0x868>
 800a3c8:	ed9f bb89 	vldr	d11, [pc, #548]	; 800a5f0 <_strtod_l+0x870>
 800a3cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ce:	2500      	movs	r5, #0
 800a3d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3d4:	9310      	str	r3, [sp, #64]	; 0x40
 800a3d6:	46a8      	mov	r8, r5
 800a3d8:	9b06      	ldr	r3, [sp, #24]
 800a3da:	4620      	mov	r0, r4
 800a3dc:	6859      	ldr	r1, [r3, #4]
 800a3de:	f001 fc71 	bl	800bcc4 <_Balloc>
 800a3e2:	4681      	mov	r9, r0
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	f43f aefa 	beq.w	800a1de <_strtod_l+0x45e>
 800a3ea:	9b06      	ldr	r3, [sp, #24]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	3202      	adds	r2, #2
 800a3f0:	f103 010c 	add.w	r1, r3, #12
 800a3f4:	0092      	lsls	r2, r2, #2
 800a3f6:	300c      	adds	r0, #12
 800a3f8:	f7fe fe16 	bl	8009028 <memcpy>
 800a3fc:	aa1a      	add	r2, sp, #104	; 0x68
 800a3fe:	a919      	add	r1, sp, #100	; 0x64
 800a400:	ec4b ab10 	vmov	d0, sl, fp
 800a404:	4620      	mov	r0, r4
 800a406:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a40a:	f001 ff9d 	bl	800c348 <__d2b>
 800a40e:	9018      	str	r0, [sp, #96]	; 0x60
 800a410:	2800      	cmp	r0, #0
 800a412:	f43f aee4 	beq.w	800a1de <_strtod_l+0x45e>
 800a416:	2101      	movs	r1, #1
 800a418:	4620      	mov	r0, r4
 800a41a:	f001 fd65 	bl	800bee8 <__i2b>
 800a41e:	4680      	mov	r8, r0
 800a420:	2800      	cmp	r0, #0
 800a422:	f43f aedc 	beq.w	800a1de <_strtod_l+0x45e>
 800a426:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a428:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a42a:	2e00      	cmp	r6, #0
 800a42c:	bfb1      	iteee	lt
 800a42e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800a430:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a432:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800a434:	18f3      	addge	r3, r6, r3
 800a436:	bfba      	itte	lt
 800a438:	1b98      	sublt	r0, r3, r6
 800a43a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a43c:	9308      	strge	r3, [sp, #32]
 800a43e:	eba6 0607 	sub.w	r6, r6, r7
 800a442:	bfb8      	it	lt
 800a444:	9308      	strlt	r3, [sp, #32]
 800a446:	4416      	add	r6, r2
 800a448:	4b6c      	ldr	r3, [pc, #432]	; (800a5fc <_strtod_l+0x87c>)
 800a44a:	3e01      	subs	r6, #1
 800a44c:	429e      	cmp	r6, r3
 800a44e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a452:	f280 80b4 	bge.w	800a5be <_strtod_l+0x83e>
 800a456:	1b9b      	subs	r3, r3, r6
 800a458:	2b1f      	cmp	r3, #31
 800a45a:	eba2 0203 	sub.w	r2, r2, r3
 800a45e:	f04f 0101 	mov.w	r1, #1
 800a462:	f300 80a0 	bgt.w	800a5a6 <_strtod_l+0x826>
 800a466:	fa01 f303 	lsl.w	r3, r1, r3
 800a46a:	9311      	str	r3, [sp, #68]	; 0x44
 800a46c:	2300      	movs	r3, #0
 800a46e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a470:	9b08      	ldr	r3, [sp, #32]
 800a472:	4413      	add	r3, r2
 800a474:	4402      	add	r2, r0
 800a476:	18be      	adds	r6, r7, r2
 800a478:	9a08      	ldr	r2, [sp, #32]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	bfa8      	it	ge
 800a47e:	461a      	movge	r2, r3
 800a480:	42b2      	cmp	r2, r6
 800a482:	bfa8      	it	ge
 800a484:	4632      	movge	r2, r6
 800a486:	2a00      	cmp	r2, #0
 800a488:	dd04      	ble.n	800a494 <_strtod_l+0x714>
 800a48a:	9908      	ldr	r1, [sp, #32]
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	1ab6      	subs	r6, r6, r2
 800a490:	1a8a      	subs	r2, r1, r2
 800a492:	9208      	str	r2, [sp, #32]
 800a494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a496:	b1c2      	cbz	r2, 800a4ca <_strtod_l+0x74a>
 800a498:	4641      	mov	r1, r8
 800a49a:	4620      	mov	r0, r4
 800a49c:	9315      	str	r3, [sp, #84]	; 0x54
 800a49e:	f001 fdc3 	bl	800c028 <__pow5mult>
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f43f ae9a 	beq.w	800a1de <_strtod_l+0x45e>
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f001 fd23 	bl	800befa <__multiply>
 800a4b4:	900c      	str	r0, [sp, #48]	; 0x30
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f43f ae91 	beq.w	800a1de <_strtod_l+0x45e>
 800a4bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f001 fc34 	bl	800bd2c <_Bfree>
 800a4c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4c8:	9218      	str	r2, [sp, #96]	; 0x60
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dc7c      	bgt.n	800a5c8 <_strtod_l+0x848>
 800a4ce:	9b04      	ldr	r3, [sp, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dd08      	ble.n	800a4e6 <_strtod_l+0x766>
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f001 fda5 	bl	800c028 <__pow5mult>
 800a4de:	4681      	mov	r9, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f43f ae7c 	beq.w	800a1de <_strtod_l+0x45e>
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	dd08      	ble.n	800a4fc <_strtod_l+0x77c>
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f001 fde8 	bl	800c0c4 <__lshift>
 800a4f4:	4681      	mov	r9, r0
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f43f ae71 	beq.w	800a1de <_strtod_l+0x45e>
 800a4fc:	9b08      	ldr	r3, [sp, #32]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	dd08      	ble.n	800a514 <_strtod_l+0x794>
 800a502:	4641      	mov	r1, r8
 800a504:	461a      	mov	r2, r3
 800a506:	4620      	mov	r0, r4
 800a508:	f001 fddc 	bl	800c0c4 <__lshift>
 800a50c:	4680      	mov	r8, r0
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f ae65 	beq.w	800a1de <_strtod_l+0x45e>
 800a514:	464a      	mov	r2, r9
 800a516:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a518:	4620      	mov	r0, r4
 800a51a:	f001 fe41 	bl	800c1a0 <__mdiff>
 800a51e:	4605      	mov	r5, r0
 800a520:	2800      	cmp	r0, #0
 800a522:	f43f ae5c 	beq.w	800a1de <_strtod_l+0x45e>
 800a526:	68c3      	ldr	r3, [r0, #12]
 800a528:	930c      	str	r3, [sp, #48]	; 0x30
 800a52a:	2300      	movs	r3, #0
 800a52c:	60c3      	str	r3, [r0, #12]
 800a52e:	4641      	mov	r1, r8
 800a530:	f001 fe1c 	bl	800c16c <__mcmp>
 800a534:	2800      	cmp	r0, #0
 800a536:	da63      	bge.n	800a600 <_strtod_l+0x880>
 800a538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a53a:	b9e3      	cbnz	r3, 800a576 <_strtod_l+0x7f6>
 800a53c:	f1ba 0f00 	cmp.w	sl, #0
 800a540:	d119      	bne.n	800a576 <_strtod_l+0x7f6>
 800a542:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a546:	b9b3      	cbnz	r3, 800a576 <_strtod_l+0x7f6>
 800a548:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a54c:	0d1b      	lsrs	r3, r3, #20
 800a54e:	051b      	lsls	r3, r3, #20
 800a550:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a554:	d90f      	bls.n	800a576 <_strtod_l+0x7f6>
 800a556:	696b      	ldr	r3, [r5, #20]
 800a558:	b913      	cbnz	r3, 800a560 <_strtod_l+0x7e0>
 800a55a:	692b      	ldr	r3, [r5, #16]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	dd0a      	ble.n	800a576 <_strtod_l+0x7f6>
 800a560:	4629      	mov	r1, r5
 800a562:	2201      	movs	r2, #1
 800a564:	4620      	mov	r0, r4
 800a566:	f001 fdad 	bl	800c0c4 <__lshift>
 800a56a:	4641      	mov	r1, r8
 800a56c:	4605      	mov	r5, r0
 800a56e:	f001 fdfd 	bl	800c16c <__mcmp>
 800a572:	2800      	cmp	r0, #0
 800a574:	dc75      	bgt.n	800a662 <_strtod_l+0x8e2>
 800a576:	2f00      	cmp	r7, #0
 800a578:	d17f      	bne.n	800a67a <_strtod_l+0x8fa>
 800a57a:	e63a      	b.n	800a1f2 <_strtod_l+0x472>
 800a57c:	07d6      	lsls	r6, r2, #31
 800a57e:	d508      	bpl.n	800a592 <_strtod_l+0x812>
 800a580:	ed9d 6b06 	vldr	d6, [sp, #24]
 800a584:	ed91 7b00 	vldr	d7, [r1]
 800a588:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a58c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a590:	2001      	movs	r0, #1
 800a592:	1052      	asrs	r2, r2, #1
 800a594:	3108      	adds	r1, #8
 800a596:	e6db      	b.n	800a350 <_strtod_l+0x5d0>
 800a598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a59c:	fa01 f202 	lsl.w	r2, r1, r2
 800a5a0:	ea02 0a0a 	and.w	sl, r2, sl
 800a5a4:	e6f3      	b.n	800a38e <_strtod_l+0x60e>
 800a5a6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a5aa:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a5ae:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a5b2:	36e2      	adds	r6, #226	; 0xe2
 800a5b4:	fa01 f306 	lsl.w	r3, r1, r6
 800a5b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5ba:	9111      	str	r1, [sp, #68]	; 0x44
 800a5bc:	e758      	b.n	800a470 <_strtod_l+0x6f0>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9311      	str	r3, [sp, #68]	; 0x44
 800a5c6:	e753      	b.n	800a470 <_strtod_l+0x6f0>
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f001 fd79 	bl	800c0c4 <__lshift>
 800a5d2:	9018      	str	r0, [sp, #96]	; 0x60
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f47f af7a 	bne.w	800a4ce <_strtod_l+0x74e>
 800a5da:	e600      	b.n	800a1de <_strtod_l+0x45e>
 800a5dc:	f3af 8000 	nop.w
 800a5e0:	94a03595 	.word	0x94a03595
 800a5e4:	3fdfffff 	.word	0x3fdfffff
 800a5e8:	35afe535 	.word	0x35afe535
 800a5ec:	3fe00000 	.word	0x3fe00000
 800a5f0:	94a03595 	.word	0x94a03595
 800a5f4:	3fcfffff 	.word	0x3fcfffff
 800a5f8:	0800e510 	.word	0x0800e510
 800a5fc:	fffffc02 	.word	0xfffffc02
 800a600:	f8cd b020 	str.w	fp, [sp, #32]
 800a604:	f040 8085 	bne.w	800a712 <_strtod_l+0x992>
 800a608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a60a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a60e:	b322      	cbz	r2, 800a65a <_strtod_l+0x8da>
 800a610:	4ab7      	ldr	r2, [pc, #732]	; (800a8f0 <_strtod_l+0xb70>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d154      	bne.n	800a6c0 <_strtod_l+0x940>
 800a616:	4651      	mov	r1, sl
 800a618:	b1e7      	cbz	r7, 800a654 <_strtod_l+0x8d4>
 800a61a:	4bb6      	ldr	r3, [pc, #728]	; (800a8f4 <_strtod_l+0xb74>)
 800a61c:	465a      	mov	r2, fp
 800a61e:	4013      	ands	r3, r2
 800a620:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a628:	d803      	bhi.n	800a632 <_strtod_l+0x8b2>
 800a62a:	0d1b      	lsrs	r3, r3, #20
 800a62c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a630:	409a      	lsls	r2, r3
 800a632:	4291      	cmp	r1, r2
 800a634:	d144      	bne.n	800a6c0 <_strtod_l+0x940>
 800a636:	4bb0      	ldr	r3, [pc, #704]	; (800a8f8 <_strtod_l+0xb78>)
 800a638:	9a08      	ldr	r2, [sp, #32]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d102      	bne.n	800a644 <_strtod_l+0x8c4>
 800a63e:	3101      	adds	r1, #1
 800a640:	f43f adcd 	beq.w	800a1de <_strtod_l+0x45e>
 800a644:	4bab      	ldr	r3, [pc, #684]	; (800a8f4 <_strtod_l+0xb74>)
 800a646:	9a08      	ldr	r2, [sp, #32]
 800a648:	401a      	ands	r2, r3
 800a64a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800a64e:	f04f 0a00 	mov.w	sl, #0
 800a652:	e790      	b.n	800a576 <_strtod_l+0x7f6>
 800a654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a658:	e7eb      	b.n	800a632 <_strtod_l+0x8b2>
 800a65a:	bb8b      	cbnz	r3, 800a6c0 <_strtod_l+0x940>
 800a65c:	f1ba 0f00 	cmp.w	sl, #0
 800a660:	d12e      	bne.n	800a6c0 <_strtod_l+0x940>
 800a662:	465b      	mov	r3, fp
 800a664:	4aa3      	ldr	r2, [pc, #652]	; (800a8f4 <_strtod_l+0xb74>)
 800a666:	b30f      	cbz	r7, 800a6ac <_strtod_l+0x92c>
 800a668:	ea02 010b 	and.w	r1, r2, fp
 800a66c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a670:	dc1c      	bgt.n	800a6ac <_strtod_l+0x92c>
 800a672:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a676:	f77f ae48 	ble.w	800a30a <_strtod_l+0x58a>
 800a67a:	4aa0      	ldr	r2, [pc, #640]	; (800a8fc <_strtod_l+0xb7c>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800a682:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800a686:	ec4b ab17 	vmov	d7, sl, fp
 800a68a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a68e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a692:	9b05      	ldr	r3, [sp, #20]
 800a694:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f47f adaa 	bne.w	800a1f2 <_strtod_l+0x472>
 800a69e:	9b04      	ldr	r3, [sp, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f47f ada6 	bne.w	800a1f2 <_strtod_l+0x472>
 800a6a6:	2322      	movs	r3, #34	; 0x22
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	e5a2      	b.n	800a1f2 <_strtod_l+0x472>
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a6b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a6be:	e75a      	b.n	800a576 <_strtod_l+0x7f6>
 800a6c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6c2:	b18b      	cbz	r3, 800a6e8 <_strtod_l+0x968>
 800a6c4:	9a08      	ldr	r2, [sp, #32]
 800a6c6:	4213      	tst	r3, r2
 800a6c8:	f43f af55 	beq.w	800a576 <_strtod_l+0x7f6>
 800a6cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	4659      	mov	r1, fp
 800a6d4:	b163      	cbz	r3, 800a6f0 <_strtod_l+0x970>
 800a6d6:	f7ff fb37 	bl	8009d48 <sulp>
 800a6da:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800a6de:	ee37 7b00 	vadd.f64	d7, d7, d0
 800a6e2:	ec5b ab17 	vmov	sl, fp, d7
 800a6e6:	e746      	b.n	800a576 <_strtod_l+0x7f6>
 800a6e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ea:	ea13 0f0a 	tst.w	r3, sl
 800a6ee:	e7eb      	b.n	800a6c8 <_strtod_l+0x948>
 800a6f0:	f7ff fb2a 	bl	8009d48 <sulp>
 800a6f4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800a6f8:	ee37 7b40 	vsub.f64	d7, d7, d0
 800a6fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a700:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a708:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a70c:	f43f adfd 	beq.w	800a30a <_strtod_l+0x58a>
 800a710:	e731      	b.n	800a576 <_strtod_l+0x7f6>
 800a712:	4641      	mov	r1, r8
 800a714:	4628      	mov	r0, r5
 800a716:	f001 fe66 	bl	800c3e6 <__ratio>
 800a71a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a71e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a726:	d869      	bhi.n	800a7fc <_strtod_l+0xa7c>
 800a728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d045      	beq.n	800a7ba <_strtod_l+0xa3a>
 800a72e:	4b74      	ldr	r3, [pc, #464]	; (800a900 <_strtod_l+0xb80>)
 800a730:	2200      	movs	r2, #0
 800a732:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800a736:	9808      	ldr	r0, [sp, #32]
 800a738:	496e      	ldr	r1, [pc, #440]	; (800a8f4 <_strtod_l+0xb74>)
 800a73a:	ea00 0601 	and.w	r6, r0, r1
 800a73e:	4871      	ldr	r0, [pc, #452]	; (800a904 <_strtod_l+0xb84>)
 800a740:	4286      	cmp	r6, r0
 800a742:	f040 8089 	bne.w	800a858 <_strtod_l+0xad8>
 800a746:	910f      	str	r1, [sp, #60]	; 0x3c
 800a748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a74c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800a750:	9908      	ldr	r1, [sp, #32]
 800a752:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800a756:	ec4b ab10 	vmov	d0, sl, fp
 800a75a:	ec43 2b1c 	vmov	d12, r2, r3
 800a75e:	f001 fd7d 	bl	800c25c <__ulp>
 800a762:	ec4b ab1d 	vmov	d13, sl, fp
 800a766:	eeac db00 	vfma.f64	d13, d12, d0
 800a76a:	ed8d db08 	vstr	d13, [sp, #32]
 800a76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a770:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a772:	4a65      	ldr	r2, [pc, #404]	; (800a908 <_strtod_l+0xb88>)
 800a774:	4019      	ands	r1, r3
 800a776:	4291      	cmp	r1, r2
 800a778:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800a77c:	d948      	bls.n	800a810 <_strtod_l+0xa90>
 800a77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a780:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a784:	4293      	cmp	r3, r2
 800a786:	d103      	bne.n	800a790 <_strtod_l+0xa10>
 800a788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78a:	3301      	adds	r3, #1
 800a78c:	f43f ad27 	beq.w	800a1de <_strtod_l+0x45e>
 800a790:	f8df b164 	ldr.w	fp, [pc, #356]	; 800a8f8 <_strtod_l+0xb78>
 800a794:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a798:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a79a:	4620      	mov	r0, r4
 800a79c:	f001 fac6 	bl	800bd2c <_Bfree>
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f001 fac2 	bl	800bd2c <_Bfree>
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f001 fabe 	bl	800bd2c <_Bfree>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f001 faba 	bl	800bd2c <_Bfree>
 800a7b8:	e60e      	b.n	800a3d8 <_strtod_l+0x658>
 800a7ba:	f1ba 0f00 	cmp.w	sl, #0
 800a7be:	d113      	bne.n	800a7e8 <_strtod_l+0xa68>
 800a7c0:	9b08      	ldr	r3, [sp, #32]
 800a7c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7c6:	b9b3      	cbnz	r3, 800a7f6 <_strtod_l+0xa76>
 800a7c8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a7cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a7d8:	d401      	bmi.n	800a7de <_strtod_l+0xa5e>
 800a7da:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a7de:	eeb1 7b48 	vneg.f64	d7, d8
 800a7e2:	ec53 2b17 	vmov	r2, r3, d7
 800a7e6:	e7a6      	b.n	800a736 <_strtod_l+0x9b6>
 800a7e8:	f1ba 0f01 	cmp.w	sl, #1
 800a7ec:	d103      	bne.n	800a7f6 <_strtod_l+0xa76>
 800a7ee:	9b08      	ldr	r3, [sp, #32]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f43f ad8a 	beq.w	800a30a <_strtod_l+0x58a>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4b44      	ldr	r3, [pc, #272]	; (800a90c <_strtod_l+0xb8c>)
 800a7fa:	e79a      	b.n	800a732 <_strtod_l+0x9b2>
 800a7fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7fe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a802:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0e9      	beq.n	800a7de <_strtod_l+0xa5e>
 800a80a:	ec53 2b18 	vmov	r2, r3, d8
 800a80e:	e792      	b.n	800a736 <_strtod_l+0x9b6>
 800a810:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a814:	2f00      	cmp	r7, #0
 800a816:	d1bf      	bne.n	800a798 <_strtod_l+0xa18>
 800a818:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a81c:	0d1b      	lsrs	r3, r3, #20
 800a81e:	051b      	lsls	r3, r3, #20
 800a820:	429e      	cmp	r6, r3
 800a822:	d1b9      	bne.n	800a798 <_strtod_l+0xa18>
 800a824:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800a828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a82a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800a82e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a832:	b92b      	cbnz	r3, 800a840 <_strtod_l+0xac0>
 800a834:	f1ba 0f00 	cmp.w	sl, #0
 800a838:	d102      	bne.n	800a840 <_strtod_l+0xac0>
 800a83a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800a83e:	b3d2      	cbz	r2, 800a8b6 <_strtod_l+0xb36>
 800a840:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a848:	f53f acd3 	bmi.w	800a1f2 <_strtod_l+0x472>
 800a84c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800a850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a854:	dda0      	ble.n	800a798 <_strtod_l+0xa18>
 800a856:	e4cc      	b.n	800a1f2 <_strtod_l+0x472>
 800a858:	b1ef      	cbz	r7, 800a896 <_strtod_l+0xb16>
 800a85a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800a85e:	d81a      	bhi.n	800a896 <_strtod_l+0xb16>
 800a860:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a8e8 <_strtod_l+0xb68>
 800a864:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86c:	d810      	bhi.n	800a890 <_strtod_l+0xb10>
 800a86e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800a872:	ee17 3a90 	vmov	r3, s15
 800a876:	2b00      	cmp	r3, #0
 800a878:	bf08      	it	eq
 800a87a:	2301      	moveq	r3, #1
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a882:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800a886:	b99b      	cbnz	r3, 800a8b0 <_strtod_l+0xb30>
 800a888:	eeb1 7b48 	vneg.f64	d7, d8
 800a88c:	ec53 2b17 	vmov	r2, r3, d7
 800a890:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800a894:	1b8b      	subs	r3, r1, r6
 800a896:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a89a:	ec43 2b1c 	vmov	d12, r2, r3
 800a89e:	f001 fcdd 	bl	800c25c <__ulp>
 800a8a2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800a8a6:	eeac 7b00 	vfma.f64	d7, d12, d0
 800a8aa:	ec5b ab17 	vmov	sl, fp, d7
 800a8ae:	e7b1      	b.n	800a814 <_strtod_l+0xa94>
 800a8b0:	ec53 2b18 	vmov	r2, r3, d8
 800a8b4:	e7ec      	b.n	800a890 <_strtod_l+0xb10>
 800a8b6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8be:	f57f af6b 	bpl.w	800a798 <_strtod_l+0xa18>
 800a8c2:	e496      	b.n	800a1f2 <_strtod_l+0x472>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	f7ff ba9d 	b.w	8009e0c <_strtod_l+0x8c>
 800a8d2:	2a65      	cmp	r2, #101	; 0x65
 800a8d4:	f04f 0100 	mov.w	r1, #0
 800a8d8:	f43f ab97 	beq.w	800a00a <_strtod_l+0x28a>
 800a8dc:	2701      	movs	r7, #1
 800a8de:	460b      	mov	r3, r1
 800a8e0:	9704      	str	r7, [sp, #16]
 800a8e2:	f7ff bb0a 	b.w	8009efa <_strtod_l+0x17a>
 800a8e6:	bf00      	nop
 800a8e8:	ffc00000 	.word	0xffc00000
 800a8ec:	41dfffff 	.word	0x41dfffff
 800a8f0:	000fffff 	.word	0x000fffff
 800a8f4:	7ff00000 	.word	0x7ff00000
 800a8f8:	7fefffff 	.word	0x7fefffff
 800a8fc:	39500000 	.word	0x39500000
 800a900:	3ff00000 	.word	0x3ff00000
 800a904:	7fe00000 	.word	0x7fe00000
 800a908:	7c9fffff 	.word	0x7c9fffff
 800a90c:	bff00000 	.word	0xbff00000

0800a910 <_strtod_r>:
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <_strtod_r+0x18>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	b410      	push	{r4}
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	4c04      	ldr	r4, [pc, #16]	; (800a92c <_strtod_r+0x1c>)
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bf08      	it	eq
 800a91e:	4623      	moveq	r3, r4
 800a920:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a924:	f7ff ba2c 	b.w	8009d80 <_strtod_l>
 800a928:	20000014 	.word	0x20000014
 800a92c:	20000078 	.word	0x20000078

0800a930 <_strtol_l.isra.0>:
 800a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a934:	4680      	mov	r8, r0
 800a936:	4689      	mov	r9, r1
 800a938:	4692      	mov	sl, r2
 800a93a:	461e      	mov	r6, r3
 800a93c:	460f      	mov	r7, r1
 800a93e:	463d      	mov	r5, r7
 800a940:	9808      	ldr	r0, [sp, #32]
 800a942:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a946:	f001 f981 	bl	800bc4c <__locale_ctype_ptr_l>
 800a94a:	4420      	add	r0, r4
 800a94c:	7843      	ldrb	r3, [r0, #1]
 800a94e:	f013 0308 	ands.w	r3, r3, #8
 800a952:	d132      	bne.n	800a9ba <_strtol_l.isra.0+0x8a>
 800a954:	2c2d      	cmp	r4, #45	; 0x2d
 800a956:	d132      	bne.n	800a9be <_strtol_l.isra.0+0x8e>
 800a958:	787c      	ldrb	r4, [r7, #1]
 800a95a:	1cbd      	adds	r5, r7, #2
 800a95c:	2201      	movs	r2, #1
 800a95e:	2e00      	cmp	r6, #0
 800a960:	d05d      	beq.n	800aa1e <_strtol_l.isra.0+0xee>
 800a962:	2e10      	cmp	r6, #16
 800a964:	d109      	bne.n	800a97a <_strtol_l.isra.0+0x4a>
 800a966:	2c30      	cmp	r4, #48	; 0x30
 800a968:	d107      	bne.n	800a97a <_strtol_l.isra.0+0x4a>
 800a96a:	782b      	ldrb	r3, [r5, #0]
 800a96c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a970:	2b58      	cmp	r3, #88	; 0x58
 800a972:	d14f      	bne.n	800aa14 <_strtol_l.isra.0+0xe4>
 800a974:	786c      	ldrb	r4, [r5, #1]
 800a976:	2610      	movs	r6, #16
 800a978:	3502      	adds	r5, #2
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	bf14      	ite	ne
 800a97e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a982:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a986:	2700      	movs	r7, #0
 800a988:	fbb1 fcf6 	udiv	ip, r1, r6
 800a98c:	4638      	mov	r0, r7
 800a98e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a992:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a996:	2b09      	cmp	r3, #9
 800a998:	d817      	bhi.n	800a9ca <_strtol_l.isra.0+0x9a>
 800a99a:	461c      	mov	r4, r3
 800a99c:	42a6      	cmp	r6, r4
 800a99e:	dd23      	ble.n	800a9e8 <_strtol_l.isra.0+0xb8>
 800a9a0:	1c7b      	adds	r3, r7, #1
 800a9a2:	d007      	beq.n	800a9b4 <_strtol_l.isra.0+0x84>
 800a9a4:	4584      	cmp	ip, r0
 800a9a6:	d31c      	bcc.n	800a9e2 <_strtol_l.isra.0+0xb2>
 800a9a8:	d101      	bne.n	800a9ae <_strtol_l.isra.0+0x7e>
 800a9aa:	45a6      	cmp	lr, r4
 800a9ac:	db19      	blt.n	800a9e2 <_strtol_l.isra.0+0xb2>
 800a9ae:	fb00 4006 	mla	r0, r0, r6, r4
 800a9b2:	2701      	movs	r7, #1
 800a9b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9b8:	e7eb      	b.n	800a992 <_strtol_l.isra.0+0x62>
 800a9ba:	462f      	mov	r7, r5
 800a9bc:	e7bf      	b.n	800a93e <_strtol_l.isra.0+0xe>
 800a9be:	2c2b      	cmp	r4, #43	; 0x2b
 800a9c0:	bf04      	itt	eq
 800a9c2:	1cbd      	addeq	r5, r7, #2
 800a9c4:	787c      	ldrbeq	r4, [r7, #1]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	e7c9      	b.n	800a95e <_strtol_l.isra.0+0x2e>
 800a9ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a9ce:	2b19      	cmp	r3, #25
 800a9d0:	d801      	bhi.n	800a9d6 <_strtol_l.isra.0+0xa6>
 800a9d2:	3c37      	subs	r4, #55	; 0x37
 800a9d4:	e7e2      	b.n	800a99c <_strtol_l.isra.0+0x6c>
 800a9d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a9da:	2b19      	cmp	r3, #25
 800a9dc:	d804      	bhi.n	800a9e8 <_strtol_l.isra.0+0xb8>
 800a9de:	3c57      	subs	r4, #87	; 0x57
 800a9e0:	e7dc      	b.n	800a99c <_strtol_l.isra.0+0x6c>
 800a9e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a9e6:	e7e5      	b.n	800a9b4 <_strtol_l.isra.0+0x84>
 800a9e8:	1c7b      	adds	r3, r7, #1
 800a9ea:	d108      	bne.n	800a9fe <_strtol_l.isra.0+0xce>
 800a9ec:	2322      	movs	r3, #34	; 0x22
 800a9ee:	f8c8 3000 	str.w	r3, [r8]
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	f1ba 0f00 	cmp.w	sl, #0
 800a9f8:	d107      	bne.n	800aa0a <_strtol_l.isra.0+0xda>
 800a9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fe:	b102      	cbz	r2, 800aa02 <_strtol_l.isra.0+0xd2>
 800aa00:	4240      	negs	r0, r0
 800aa02:	f1ba 0f00 	cmp.w	sl, #0
 800aa06:	d0f8      	beq.n	800a9fa <_strtol_l.isra.0+0xca>
 800aa08:	b10f      	cbz	r7, 800aa0e <_strtol_l.isra.0+0xde>
 800aa0a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800aa0e:	f8ca 9000 	str.w	r9, [sl]
 800aa12:	e7f2      	b.n	800a9fa <_strtol_l.isra.0+0xca>
 800aa14:	2430      	movs	r4, #48	; 0x30
 800aa16:	2e00      	cmp	r6, #0
 800aa18:	d1af      	bne.n	800a97a <_strtol_l.isra.0+0x4a>
 800aa1a:	2608      	movs	r6, #8
 800aa1c:	e7ad      	b.n	800a97a <_strtol_l.isra.0+0x4a>
 800aa1e:	2c30      	cmp	r4, #48	; 0x30
 800aa20:	d0a3      	beq.n	800a96a <_strtol_l.isra.0+0x3a>
 800aa22:	260a      	movs	r6, #10
 800aa24:	e7a9      	b.n	800a97a <_strtol_l.isra.0+0x4a>
	...

0800aa28 <_strtol_r>:
 800aa28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa2a:	4c06      	ldr	r4, [pc, #24]	; (800aa44 <_strtol_r+0x1c>)
 800aa2c:	4d06      	ldr	r5, [pc, #24]	; (800aa48 <_strtol_r+0x20>)
 800aa2e:	6824      	ldr	r4, [r4, #0]
 800aa30:	6a24      	ldr	r4, [r4, #32]
 800aa32:	2c00      	cmp	r4, #0
 800aa34:	bf08      	it	eq
 800aa36:	462c      	moveq	r4, r5
 800aa38:	9400      	str	r4, [sp, #0]
 800aa3a:	f7ff ff79 	bl	800a930 <_strtol_l.isra.0>
 800aa3e:	b003      	add	sp, #12
 800aa40:	bd30      	pop	{r4, r5, pc}
 800aa42:	bf00      	nop
 800aa44:	20000014 	.word	0x20000014
 800aa48:	20000078 	.word	0x20000078

0800aa4c <quorem>:
 800aa4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	6903      	ldr	r3, [r0, #16]
 800aa52:	690c      	ldr	r4, [r1, #16]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	4680      	mov	r8, r0
 800aa58:	f2c0 8082 	blt.w	800ab60 <quorem+0x114>
 800aa5c:	3c01      	subs	r4, #1
 800aa5e:	f101 0714 	add.w	r7, r1, #20
 800aa62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aa66:	f100 0614 	add.w	r6, r0, #20
 800aa6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800aa6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800aa72:	eb06 030c 	add.w	r3, r6, ip
 800aa76:	3501      	adds	r5, #1
 800aa78:	eb07 090c 	add.w	r9, r7, ip
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	fbb0 f5f5 	udiv	r5, r0, r5
 800aa82:	b395      	cbz	r5, 800aaea <quorem+0x9e>
 800aa84:	f04f 0a00 	mov.w	sl, #0
 800aa88:	4638      	mov	r0, r7
 800aa8a:	46b6      	mov	lr, r6
 800aa8c:	46d3      	mov	fp, sl
 800aa8e:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa92:	b293      	uxth	r3, r2
 800aa94:	fb05 a303 	mla	r3, r5, r3, sl
 800aa98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	ebab 0303 	sub.w	r3, fp, r3
 800aaa2:	0c12      	lsrs	r2, r2, #16
 800aaa4:	f8de b000 	ldr.w	fp, [lr]
 800aaa8:	fb05 a202 	mla	r2, r5, r2, sl
 800aaac:	fa13 f38b 	uxtah	r3, r3, fp
 800aab0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800aab4:	fa1f fb82 	uxth.w	fp, r2
 800aab8:	f8de 2000 	ldr.w	r2, [lr]
 800aabc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800aac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaca:	4581      	cmp	r9, r0
 800aacc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800aad0:	f84e 3b04 	str.w	r3, [lr], #4
 800aad4:	d2db      	bcs.n	800aa8e <quorem+0x42>
 800aad6:	f856 300c 	ldr.w	r3, [r6, ip]
 800aada:	b933      	cbnz	r3, 800aaea <quorem+0x9e>
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	3b04      	subs	r3, #4
 800aae0:	429e      	cmp	r6, r3
 800aae2:	461a      	mov	r2, r3
 800aae4:	d330      	bcc.n	800ab48 <quorem+0xfc>
 800aae6:	f8c8 4010 	str.w	r4, [r8, #16]
 800aaea:	4640      	mov	r0, r8
 800aaec:	f001 fb3e 	bl	800c16c <__mcmp>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	db25      	blt.n	800ab40 <quorem+0xf4>
 800aaf4:	3501      	adds	r5, #1
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f04f 0c00 	mov.w	ip, #0
 800aafc:	f857 2b04 	ldr.w	r2, [r7], #4
 800ab00:	f8d0 e000 	ldr.w	lr, [r0]
 800ab04:	b293      	uxth	r3, r2
 800ab06:	ebac 0303 	sub.w	r3, ip, r3
 800ab0a:	0c12      	lsrs	r2, r2, #16
 800ab0c:	fa13 f38e 	uxtah	r3, r3, lr
 800ab10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab1e:	45b9      	cmp	r9, r7
 800ab20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab24:	f840 3b04 	str.w	r3, [r0], #4
 800ab28:	d2e8      	bcs.n	800aafc <quorem+0xb0>
 800ab2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ab2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ab32:	b92a      	cbnz	r2, 800ab40 <quorem+0xf4>
 800ab34:	3b04      	subs	r3, #4
 800ab36:	429e      	cmp	r6, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	d30b      	bcc.n	800ab54 <quorem+0x108>
 800ab3c:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab40:	4628      	mov	r0, r5
 800ab42:	b003      	add	sp, #12
 800ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	6812      	ldr	r2, [r2, #0]
 800ab4a:	3b04      	subs	r3, #4
 800ab4c:	2a00      	cmp	r2, #0
 800ab4e:	d1ca      	bne.n	800aae6 <quorem+0x9a>
 800ab50:	3c01      	subs	r4, #1
 800ab52:	e7c5      	b.n	800aae0 <quorem+0x94>
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	3b04      	subs	r3, #4
 800ab58:	2a00      	cmp	r2, #0
 800ab5a:	d1ef      	bne.n	800ab3c <quorem+0xf0>
 800ab5c:	3c01      	subs	r4, #1
 800ab5e:	e7ea      	b.n	800ab36 <quorem+0xea>
 800ab60:	2000      	movs	r0, #0
 800ab62:	e7ee      	b.n	800ab42 <quorem+0xf6>
 800ab64:	0000      	movs	r0, r0
	...

0800ab68 <_dtoa_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	ec57 6b10 	vmov	r6, r7, d0
 800ab70:	b095      	sub	sp, #84	; 0x54
 800ab72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab74:	9108      	str	r1, [sp, #32]
 800ab76:	4604      	mov	r4, r0
 800ab78:	920a      	str	r2, [sp, #40]	; 0x28
 800ab7a:	9311      	str	r3, [sp, #68]	; 0x44
 800ab7c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800ab80:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ab84:	b93d      	cbnz	r5, 800ab96 <_dtoa_r+0x2e>
 800ab86:	2010      	movs	r0, #16
 800ab88:	f001 f882 	bl	800bc90 <malloc>
 800ab8c:	6260      	str	r0, [r4, #36]	; 0x24
 800ab8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab92:	6005      	str	r5, [r0, #0]
 800ab94:	60c5      	str	r5, [r0, #12]
 800ab96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab98:	6819      	ldr	r1, [r3, #0]
 800ab9a:	b151      	cbz	r1, 800abb2 <_dtoa_r+0x4a>
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	604a      	str	r2, [r1, #4]
 800aba0:	2301      	movs	r3, #1
 800aba2:	4093      	lsls	r3, r2
 800aba4:	608b      	str	r3, [r1, #8]
 800aba6:	4620      	mov	r0, r4
 800aba8:	f001 f8c0 	bl	800bd2c <_Bfree>
 800abac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	1e3b      	subs	r3, r7, #0
 800abb4:	bfb9      	ittee	lt
 800abb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abba:	9303      	strlt	r3, [sp, #12]
 800abbc:	2300      	movge	r3, #0
 800abbe:	f8c8 3000 	strge.w	r3, [r8]
 800abc2:	9d03      	ldr	r5, [sp, #12]
 800abc4:	4bac      	ldr	r3, [pc, #688]	; (800ae78 <_dtoa_r+0x310>)
 800abc6:	bfbc      	itt	lt
 800abc8:	2201      	movlt	r2, #1
 800abca:	f8c8 2000 	strlt.w	r2, [r8]
 800abce:	43ab      	bics	r3, r5
 800abd0:	d11b      	bne.n	800ac0a <_dtoa_r+0xa2>
 800abd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abd4:	f242 730f 	movw	r3, #9999	; 0x270f
 800abd8:	6013      	str	r3, [r2, #0]
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	b923      	cbnz	r3, 800abe8 <_dtoa_r+0x80>
 800abde:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800abe2:	2d00      	cmp	r5, #0
 800abe4:	f000 84dd 	beq.w	800b5a2 <_dtoa_r+0xa3a>
 800abe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800abea:	b953      	cbnz	r3, 800ac02 <_dtoa_r+0x9a>
 800abec:	4ba3      	ldr	r3, [pc, #652]	; (800ae7c <_dtoa_r+0x314>)
 800abee:	e020      	b.n	800ac32 <_dtoa_r+0xca>
 800abf0:	4ba3      	ldr	r3, [pc, #652]	; (800ae80 <_dtoa_r+0x318>)
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	3308      	adds	r3, #8
 800abf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	9804      	ldr	r0, [sp, #16]
 800abfc:	b015      	add	sp, #84	; 0x54
 800abfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac02:	4b9e      	ldr	r3, [pc, #632]	; (800ae7c <_dtoa_r+0x314>)
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	3303      	adds	r3, #3
 800ac08:	e7f5      	b.n	800abf6 <_dtoa_r+0x8e>
 800ac0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac16:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac1a:	d10c      	bne.n	800ac36 <_dtoa_r+0xce>
 800ac1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac1e:	2301      	movs	r3, #1
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 84b9 	beq.w	800b59c <_dtoa_r+0xa34>
 800ac2a:	4b96      	ldr	r3, [pc, #600]	; (800ae84 <_dtoa_r+0x31c>)
 800ac2c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	e7e1      	b.n	800abfa <_dtoa_r+0x92>
 800ac36:	a913      	add	r1, sp, #76	; 0x4c
 800ac38:	aa12      	add	r2, sp, #72	; 0x48
 800ac3a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f001 fb82 	bl	800c348 <__d2b>
 800ac44:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800ac48:	9001      	str	r0, [sp, #4]
 800ac4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ac4c:	2e00      	cmp	r6, #0
 800ac4e:	d046      	beq.n	800acde <_dtoa_r+0x176>
 800ac50:	9805      	ldr	r0, [sp, #20]
 800ac52:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800ac56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac5a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800ac5e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac62:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800ac66:	2700      	movs	r7, #0
 800ac68:	ee07 aa90 	vmov	s15, sl
 800ac6c:	ec43 2b16 	vmov	d6, r2, r3
 800ac70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ac74:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800ae60 <_dtoa_r+0x2f8>
 800ac78:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ac7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac80:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ae68 <_dtoa_r+0x300>
 800ac84:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ac88:	eeb0 7b46 	vmov.f64	d7, d6
 800ac8c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ae70 <_dtoa_r+0x308>
 800ac90:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac94:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ac98:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ac9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca0:	ee16 ba90 	vmov	fp, s13
 800aca4:	d508      	bpl.n	800acb8 <_dtoa_r+0x150>
 800aca6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800acaa:	eeb4 6b47 	vcmp.f64	d6, d7
 800acae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb2:	bf18      	it	ne
 800acb4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800acb8:	f1bb 0f16 	cmp.w	fp, #22
 800acbc:	d834      	bhi.n	800ad28 <_dtoa_r+0x1c0>
 800acbe:	4b72      	ldr	r3, [pc, #456]	; (800ae88 <_dtoa_r+0x320>)
 800acc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800acc4:	ed93 7b00 	vldr	d7, [r3]
 800acc8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800accc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd4:	dd01      	ble.n	800acda <_dtoa_r+0x172>
 800acd6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800acda:	2300      	movs	r3, #0
 800acdc:	e025      	b.n	800ad2a <_dtoa_r+0x1c2>
 800acde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ace0:	eb01 0a03 	add.w	sl, r1, r3
 800ace4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800ace8:	2b20      	cmp	r3, #32
 800acea:	dd17      	ble.n	800ad1c <_dtoa_r+0x1b4>
 800acec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800acf0:	9a02      	ldr	r2, [sp, #8]
 800acf2:	409d      	lsls	r5, r3
 800acf4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800acf8:	fa22 f303 	lsr.w	r3, r2, r3
 800acfc:	432b      	orrs	r3, r5
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ad06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ad0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad0e:	9805      	ldr	r0, [sp, #20]
 800ad10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad14:	2701      	movs	r7, #1
 800ad16:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800ad1a:	e7a5      	b.n	800ac68 <_dtoa_r+0x100>
 800ad1c:	9a02      	ldr	r2, [sp, #8]
 800ad1e:	f1c3 0320 	rsb	r3, r3, #32
 800ad22:	fa02 f303 	lsl.w	r3, r2, r3
 800ad26:	e7ea      	b.n	800acfe <_dtoa_r+0x196>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	eba1 0a0a 	sub.w	sl, r1, sl
 800ad2e:	9310      	str	r3, [sp, #64]	; 0x40
 800ad30:	f1ba 0301 	subs.w	r3, sl, #1
 800ad34:	9307      	str	r3, [sp, #28]
 800ad36:	bf43      	ittte	mi
 800ad38:	2300      	movmi	r3, #0
 800ad3a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800ad3e:	9307      	strmi	r3, [sp, #28]
 800ad40:	f04f 0a00 	movpl.w	sl, #0
 800ad44:	f1bb 0f00 	cmp.w	fp, #0
 800ad48:	db19      	blt.n	800ad7e <_dtoa_r+0x216>
 800ad4a:	9b07      	ldr	r3, [sp, #28]
 800ad4c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ad50:	445b      	add	r3, fp
 800ad52:	9307      	str	r3, [sp, #28]
 800ad54:	f04f 0800 	mov.w	r8, #0
 800ad58:	9b08      	ldr	r3, [sp, #32]
 800ad5a:	2b09      	cmp	r3, #9
 800ad5c:	d866      	bhi.n	800ae2c <_dtoa_r+0x2c4>
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	bfc4      	itt	gt
 800ad62:	3b04      	subgt	r3, #4
 800ad64:	9308      	strgt	r3, [sp, #32]
 800ad66:	9b08      	ldr	r3, [sp, #32]
 800ad68:	f1a3 0302 	sub.w	r3, r3, #2
 800ad6c:	bfcc      	ite	gt
 800ad6e:	2500      	movgt	r5, #0
 800ad70:	2501      	movle	r5, #1
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d866      	bhi.n	800ae44 <_dtoa_r+0x2dc>
 800ad76:	e8df f003 	tbb	[pc, r3]
 800ad7a:	5755      	.short	0x5755
 800ad7c:	4909      	.short	0x4909
 800ad7e:	2300      	movs	r3, #0
 800ad80:	ebaa 0a0b 	sub.w	sl, sl, fp
 800ad84:	f1cb 0800 	rsb	r8, fp, #0
 800ad88:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad8a:	e7e5      	b.n	800ad58 <_dtoa_r+0x1f0>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dd59      	ble.n	800ae4a <_dtoa_r+0x2e2>
 800ad96:	9306      	str	r3, [sp, #24]
 800ad98:	4699      	mov	r9, r3
 800ad9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	6072      	str	r2, [r6, #4]
 800ada0:	2204      	movs	r2, #4
 800ada2:	f102 0014 	add.w	r0, r2, #20
 800ada6:	4298      	cmp	r0, r3
 800ada8:	6871      	ldr	r1, [r6, #4]
 800adaa:	d953      	bls.n	800ae54 <_dtoa_r+0x2ec>
 800adac:	4620      	mov	r0, r4
 800adae:	f000 ff89 	bl	800bcc4 <_Balloc>
 800adb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adb4:	6030      	str	r0, [r6, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	f1b9 0f0e 	cmp.w	r9, #14
 800adbe:	f200 80c2 	bhi.w	800af46 <_dtoa_r+0x3de>
 800adc2:	2d00      	cmp	r5, #0
 800adc4:	f000 80bf 	beq.w	800af46 <_dtoa_r+0x3de>
 800adc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800add4:	f340 80e6 	ble.w	800afa4 <_dtoa_r+0x43c>
 800add8:	4a2b      	ldr	r2, [pc, #172]	; (800ae88 <_dtoa_r+0x320>)
 800adda:	f00b 030f 	and.w	r3, fp, #15
 800adde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ade2:	ed93 7b00 	vldr	d7, [r3]
 800ade6:	ea4f 132b 	mov.w	r3, fp, asr #4
 800adea:	06da      	lsls	r2, r3, #27
 800adec:	f140 80d8 	bpl.w	800afa0 <_dtoa_r+0x438>
 800adf0:	4a26      	ldr	r2, [pc, #152]	; (800ae8c <_dtoa_r+0x324>)
 800adf2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800adf6:	ed92 6b08 	vldr	d6, [r2, #32]
 800adfa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800adfe:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ae02:	f003 030f 	and.w	r3, r3, #15
 800ae06:	2203      	movs	r2, #3
 800ae08:	4920      	ldr	r1, [pc, #128]	; (800ae8c <_dtoa_r+0x324>)
 800ae0a:	e04a      	b.n	800aea2 <_dtoa_r+0x33a>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae12:	445b      	add	r3, fp
 800ae14:	f103 0901 	add.w	r9, r3, #1
 800ae18:	9306      	str	r3, [sp, #24]
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	bfb8      	it	lt
 800ae20:	2301      	movlt	r3, #1
 800ae22:	e7ba      	b.n	800ad9a <_dtoa_r+0x232>
 800ae24:	2300      	movs	r3, #0
 800ae26:	e7b2      	b.n	800ad8e <_dtoa_r+0x226>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e7f0      	b.n	800ae0e <_dtoa_r+0x2a6>
 800ae2c:	2501      	movs	r5, #1
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800ae34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae38:	9306      	str	r3, [sp, #24]
 800ae3a:	4699      	mov	r9, r3
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2312      	movs	r3, #18
 800ae40:	920a      	str	r2, [sp, #40]	; 0x28
 800ae42:	e7aa      	b.n	800ad9a <_dtoa_r+0x232>
 800ae44:	2301      	movs	r3, #1
 800ae46:	9309      	str	r3, [sp, #36]	; 0x24
 800ae48:	e7f4      	b.n	800ae34 <_dtoa_r+0x2cc>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	9306      	str	r3, [sp, #24]
 800ae4e:	4699      	mov	r9, r3
 800ae50:	461a      	mov	r2, r3
 800ae52:	e7f5      	b.n	800ae40 <_dtoa_r+0x2d8>
 800ae54:	3101      	adds	r1, #1
 800ae56:	6071      	str	r1, [r6, #4]
 800ae58:	0052      	lsls	r2, r2, #1
 800ae5a:	e7a2      	b.n	800ada2 <_dtoa_r+0x23a>
 800ae5c:	f3af 8000 	nop.w
 800ae60:	636f4361 	.word	0x636f4361
 800ae64:	3fd287a7 	.word	0x3fd287a7
 800ae68:	8b60c8b3 	.word	0x8b60c8b3
 800ae6c:	3fc68a28 	.word	0x3fc68a28
 800ae70:	509f79fb 	.word	0x509f79fb
 800ae74:	3fd34413 	.word	0x3fd34413
 800ae78:	7ff00000 	.word	0x7ff00000
 800ae7c:	0800e541 	.word	0x0800e541
 800ae80:	0800e538 	.word	0x0800e538
 800ae84:	0800e674 	.word	0x0800e674
 800ae88:	0800e578 	.word	0x0800e578
 800ae8c:	0800e550 	.word	0x0800e550
 800ae90:	07de      	lsls	r6, r3, #31
 800ae92:	d504      	bpl.n	800ae9e <_dtoa_r+0x336>
 800ae94:	ed91 6b00 	vldr	d6, [r1]
 800ae98:	3201      	adds	r2, #1
 800ae9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae9e:	105b      	asrs	r3, r3, #1
 800aea0:	3108      	adds	r1, #8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1f4      	bne.n	800ae90 <_dtoa_r+0x328>
 800aea6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aeaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aeae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aeb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 80a7 	beq.w	800b008 <_dtoa_r+0x4a0>
 800aeba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aec2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeca:	f140 809d 	bpl.w	800b008 <_dtoa_r+0x4a0>
 800aece:	f1b9 0f00 	cmp.w	r9, #0
 800aed2:	f000 8099 	beq.w	800b008 <_dtoa_r+0x4a0>
 800aed6:	9b06      	ldr	r3, [sp, #24]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	dd30      	ble.n	800af3e <_dtoa_r+0x3d6>
 800aedc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800aee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aee8:	9d06      	ldr	r5, [sp, #24]
 800aeea:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800aeee:	3201      	adds	r2, #1
 800aef0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aef4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800aef8:	ee07 2a90 	vmov	s15, r2
 800aefc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af00:	eea7 5b06 	vfma.f64	d5, d7, d6
 800af04:	ed8d 5b02 	vstr	d5, [sp, #8]
 800af08:	9a03      	ldr	r2, [sp, #12]
 800af0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af0e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800af12:	2d00      	cmp	r5, #0
 800af14:	d17b      	bne.n	800b00e <_dtoa_r+0x4a6>
 800af16:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800af1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800af1e:	ec41 0b17 	vmov	d7, r0, r1
 800af22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2a:	f300 8253 	bgt.w	800b3d4 <_dtoa_r+0x86c>
 800af2e:	eeb1 7b47 	vneg.f64	d7, d7
 800af32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3a:	f100 8249 	bmi.w	800b3d0 <_dtoa_r+0x868>
 800af3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800af42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f2c0 8119 	blt.w	800b180 <_dtoa_r+0x618>
 800af4e:	f1bb 0f0e 	cmp.w	fp, #14
 800af52:	f300 8115 	bgt.w	800b180 <_dtoa_r+0x618>
 800af56:	4bc3      	ldr	r3, [pc, #780]	; (800b264 <_dtoa_r+0x6fc>)
 800af58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af5c:	ed93 6b00 	vldr	d6, [r3]
 800af60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af62:	2b00      	cmp	r3, #0
 800af64:	f280 80ba 	bge.w	800b0dc <_dtoa_r+0x574>
 800af68:	f1b9 0f00 	cmp.w	r9, #0
 800af6c:	f300 80b6 	bgt.w	800b0dc <_dtoa_r+0x574>
 800af70:	f040 822d 	bne.w	800b3ce <_dtoa_r+0x866>
 800af74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800af78:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af88:	464d      	mov	r5, r9
 800af8a:	464f      	mov	r7, r9
 800af8c:	f280 8204 	bge.w	800b398 <_dtoa_r+0x830>
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	9a04      	ldr	r2, [sp, #16]
 800af94:	1c5e      	adds	r6, r3, #1
 800af96:	2331      	movs	r3, #49	; 0x31
 800af98:	7013      	strb	r3, [r2, #0]
 800af9a:	f10b 0b01 	add.w	fp, fp, #1
 800af9e:	e1ff      	b.n	800b3a0 <_dtoa_r+0x838>
 800afa0:	2202      	movs	r2, #2
 800afa2:	e731      	b.n	800ae08 <_dtoa_r+0x2a0>
 800afa4:	d02e      	beq.n	800b004 <_dtoa_r+0x49c>
 800afa6:	f1cb 0300 	rsb	r3, fp, #0
 800afaa:	4aae      	ldr	r2, [pc, #696]	; (800b264 <_dtoa_r+0x6fc>)
 800afac:	f003 010f 	and.w	r1, r3, #15
 800afb0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800afb4:	ed92 7b00 	vldr	d7, [r2]
 800afb8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800afbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800afc0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800afc4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800afc8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800afcc:	49a6      	ldr	r1, [pc, #664]	; (800b268 <_dtoa_r+0x700>)
 800afce:	111b      	asrs	r3, r3, #4
 800afd0:	2000      	movs	r0, #0
 800afd2:	2202      	movs	r2, #2
 800afd4:	b93b      	cbnz	r3, 800afe6 <_dtoa_r+0x47e>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f43f af6b 	beq.w	800aeb2 <_dtoa_r+0x34a>
 800afdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe4:	e765      	b.n	800aeb2 <_dtoa_r+0x34a>
 800afe6:	07dd      	lsls	r5, r3, #31
 800afe8:	d509      	bpl.n	800affe <_dtoa_r+0x496>
 800afea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800afee:	ed91 7b00 	vldr	d7, [r1]
 800aff2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aff6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800affa:	3201      	adds	r2, #1
 800affc:	2001      	movs	r0, #1
 800affe:	105b      	asrs	r3, r3, #1
 800b000:	3108      	adds	r1, #8
 800b002:	e7e7      	b.n	800afd4 <_dtoa_r+0x46c>
 800b004:	2202      	movs	r2, #2
 800b006:	e754      	b.n	800aeb2 <_dtoa_r+0x34a>
 800b008:	465b      	mov	r3, fp
 800b00a:	464d      	mov	r5, r9
 800b00c:	e770      	b.n	800aef0 <_dtoa_r+0x388>
 800b00e:	4a95      	ldr	r2, [pc, #596]	; (800b264 <_dtoa_r+0x6fc>)
 800b010:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800b014:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b01a:	ec41 0b17 	vmov	d7, r0, r1
 800b01e:	b35a      	cbz	r2, 800b078 <_dtoa_r+0x510>
 800b020:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b024:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b028:	9e04      	ldr	r6, [sp, #16]
 800b02a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b02e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b032:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b036:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b03a:	ee14 2a90 	vmov	r2, s9
 800b03e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b042:	3230      	adds	r2, #48	; 0x30
 800b044:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b048:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b050:	f806 2b01 	strb.w	r2, [r6], #1
 800b054:	d43b      	bmi.n	800b0ce <_dtoa_r+0x566>
 800b056:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b05a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b062:	d472      	bmi.n	800b14a <_dtoa_r+0x5e2>
 800b064:	9a04      	ldr	r2, [sp, #16]
 800b066:	1ab2      	subs	r2, r6, r2
 800b068:	4295      	cmp	r5, r2
 800b06a:	f77f af68 	ble.w	800af3e <_dtoa_r+0x3d6>
 800b06e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b072:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b076:	e7de      	b.n	800b036 <_dtoa_r+0x4ce>
 800b078:	9a04      	ldr	r2, [sp, #16]
 800b07a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b07e:	1956      	adds	r6, r2, r5
 800b080:	4611      	mov	r1, r2
 800b082:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b086:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b08a:	ee14 2a90 	vmov	r2, s9
 800b08e:	3230      	adds	r2, #48	; 0x30
 800b090:	f801 2b01 	strb.w	r2, [r1], #1
 800b094:	42b1      	cmp	r1, r6
 800b096:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b09a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b09e:	d11a      	bne.n	800b0d6 <_dtoa_r+0x56e>
 800b0a0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b0a4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b0a8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b0:	dc4b      	bgt.n	800b14a <_dtoa_r+0x5e2>
 800b0b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b0b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0be:	f57f af3e 	bpl.w	800af3e <_dtoa_r+0x3d6>
 800b0c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b0c6:	2a30      	cmp	r2, #48	; 0x30
 800b0c8:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800b0cc:	d001      	beq.n	800b0d2 <_dtoa_r+0x56a>
 800b0ce:	469b      	mov	fp, r3
 800b0d0:	e02a      	b.n	800b128 <_dtoa_r+0x5c0>
 800b0d2:	460e      	mov	r6, r1
 800b0d4:	e7f5      	b.n	800b0c2 <_dtoa_r+0x55a>
 800b0d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b0da:	e7d4      	b.n	800b086 <_dtoa_r+0x51e>
 800b0dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0e0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b0e4:	9e04      	ldr	r6, [sp, #16]
 800b0e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b0ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b0ee:	ee15 3a10 	vmov	r3, s10
 800b0f2:	3330      	adds	r3, #48	; 0x30
 800b0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	1af3      	subs	r3, r6, r3
 800b0fc:	4599      	cmp	r9, r3
 800b0fe:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b102:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b106:	d133      	bne.n	800b170 <_dtoa_r+0x608>
 800b108:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b10c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b114:	dc18      	bgt.n	800b148 <_dtoa_r+0x5e0>
 800b116:	eeb4 7b46 	vcmp.f64	d7, d6
 800b11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11e:	d103      	bne.n	800b128 <_dtoa_r+0x5c0>
 800b120:	ee15 3a10 	vmov	r3, s10
 800b124:	07db      	lsls	r3, r3, #31
 800b126:	d40f      	bmi.n	800b148 <_dtoa_r+0x5e0>
 800b128:	9901      	ldr	r1, [sp, #4]
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 fdfe 	bl	800bd2c <_Bfree>
 800b130:	2300      	movs	r3, #0
 800b132:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b134:	7033      	strb	r3, [r6, #0]
 800b136:	f10b 0301 	add.w	r3, fp, #1
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f43f ad5b 	beq.w	800abfa <_dtoa_r+0x92>
 800b144:	601e      	str	r6, [r3, #0]
 800b146:	e558      	b.n	800abfa <_dtoa_r+0x92>
 800b148:	465b      	mov	r3, fp
 800b14a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b14e:	2939      	cmp	r1, #57	; 0x39
 800b150:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800b154:	d106      	bne.n	800b164 <_dtoa_r+0x5fc>
 800b156:	9904      	ldr	r1, [sp, #16]
 800b158:	4291      	cmp	r1, r2
 800b15a:	d107      	bne.n	800b16c <_dtoa_r+0x604>
 800b15c:	2230      	movs	r2, #48	; 0x30
 800b15e:	700a      	strb	r2, [r1, #0]
 800b160:	3301      	adds	r3, #1
 800b162:	460a      	mov	r2, r1
 800b164:	7811      	ldrb	r1, [r2, #0]
 800b166:	3101      	adds	r1, #1
 800b168:	7011      	strb	r1, [r2, #0]
 800b16a:	e7b0      	b.n	800b0ce <_dtoa_r+0x566>
 800b16c:	4616      	mov	r6, r2
 800b16e:	e7ec      	b.n	800b14a <_dtoa_r+0x5e2>
 800b170:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b174:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17c:	d1b3      	bne.n	800b0e6 <_dtoa_r+0x57e>
 800b17e:	e7d3      	b.n	800b128 <_dtoa_r+0x5c0>
 800b180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b182:	2a00      	cmp	r2, #0
 800b184:	f000 808d 	beq.w	800b2a2 <_dtoa_r+0x73a>
 800b188:	9a08      	ldr	r2, [sp, #32]
 800b18a:	2a01      	cmp	r2, #1
 800b18c:	dc72      	bgt.n	800b274 <_dtoa_r+0x70c>
 800b18e:	2f00      	cmp	r7, #0
 800b190:	d06c      	beq.n	800b26c <_dtoa_r+0x704>
 800b192:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b196:	4645      	mov	r5, r8
 800b198:	4656      	mov	r6, sl
 800b19a:	9a07      	ldr	r2, [sp, #28]
 800b19c:	2101      	movs	r1, #1
 800b19e:	441a      	add	r2, r3
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	449a      	add	sl, r3
 800b1a4:	9207      	str	r2, [sp, #28]
 800b1a6:	f000 fe9f 	bl	800bee8 <__i2b>
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	2e00      	cmp	r6, #0
 800b1ae:	dd0b      	ble.n	800b1c8 <_dtoa_r+0x660>
 800b1b0:	9b07      	ldr	r3, [sp, #28]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dd08      	ble.n	800b1c8 <_dtoa_r+0x660>
 800b1b6:	42b3      	cmp	r3, r6
 800b1b8:	9a07      	ldr	r2, [sp, #28]
 800b1ba:	bfa8      	it	ge
 800b1bc:	4633      	movge	r3, r6
 800b1be:	ebaa 0a03 	sub.w	sl, sl, r3
 800b1c2:	1af6      	subs	r6, r6, r3
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	9307      	str	r3, [sp, #28]
 800b1c8:	f1b8 0f00 	cmp.w	r8, #0
 800b1cc:	d01d      	beq.n	800b20a <_dtoa_r+0x6a2>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d06a      	beq.n	800b2aa <_dtoa_r+0x742>
 800b1d4:	b18d      	cbz	r5, 800b1fa <_dtoa_r+0x692>
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	462a      	mov	r2, r5
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 ff24 	bl	800c028 <__pow5mult>
 800b1e0:	9a01      	ldr	r2, [sp, #4]
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 fe87 	bl	800befa <__multiply>
 800b1ec:	9901      	ldr	r1, [sp, #4]
 800b1ee:	900c      	str	r0, [sp, #48]	; 0x30
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fd9b 	bl	800bd2c <_Bfree>
 800b1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	ebb8 0205 	subs.w	r2, r8, r5
 800b1fe:	d004      	beq.n	800b20a <_dtoa_r+0x6a2>
 800b200:	9901      	ldr	r1, [sp, #4]
 800b202:	4620      	mov	r0, r4
 800b204:	f000 ff10 	bl	800c028 <__pow5mult>
 800b208:	9001      	str	r0, [sp, #4]
 800b20a:	2101      	movs	r1, #1
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 fe6b 	bl	800bee8 <__i2b>
 800b212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b214:	4605      	mov	r5, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 81ca 	beq.w	800b5b0 <_dtoa_r+0xa48>
 800b21c:	461a      	mov	r2, r3
 800b21e:	4601      	mov	r1, r0
 800b220:	4620      	mov	r0, r4
 800b222:	f000 ff01 	bl	800c028 <__pow5mult>
 800b226:	9b08      	ldr	r3, [sp, #32]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	4605      	mov	r5, r0
 800b22c:	dc44      	bgt.n	800b2b8 <_dtoa_r+0x750>
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d13c      	bne.n	800b2ae <_dtoa_r+0x746>
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d137      	bne.n	800b2ae <_dtoa_r+0x746>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b244:	0d1b      	lsrs	r3, r3, #20
 800b246:	051b      	lsls	r3, r3, #20
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d033      	beq.n	800b2b4 <_dtoa_r+0x74c>
 800b24c:	9b07      	ldr	r3, [sp, #28]
 800b24e:	3301      	adds	r3, #1
 800b250:	f10a 0a01 	add.w	sl, sl, #1
 800b254:	9307      	str	r3, [sp, #28]
 800b256:	f04f 0801 	mov.w	r8, #1
 800b25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b25c:	bb73      	cbnz	r3, 800b2bc <_dtoa_r+0x754>
 800b25e:	2001      	movs	r0, #1
 800b260:	e034      	b.n	800b2cc <_dtoa_r+0x764>
 800b262:	bf00      	nop
 800b264:	0800e578 	.word	0x0800e578
 800b268:	0800e550 	.word	0x0800e550
 800b26c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b26e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b272:	e790      	b.n	800b196 <_dtoa_r+0x62e>
 800b274:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800b278:	45a8      	cmp	r8, r5
 800b27a:	bfbf      	itttt	lt
 800b27c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b27e:	eba5 0808 	sublt.w	r8, r5, r8
 800b282:	4443      	addlt	r3, r8
 800b284:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b286:	bfb6      	itet	lt
 800b288:	46a8      	movlt	r8, r5
 800b28a:	eba8 0505 	subge.w	r5, r8, r5
 800b28e:	2500      	movlt	r5, #0
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	bfb9      	ittee	lt
 800b296:	ebaa 0609 	sublt.w	r6, sl, r9
 800b29a:	2300      	movlt	r3, #0
 800b29c:	4656      	movge	r6, sl
 800b29e:	464b      	movge	r3, r9
 800b2a0:	e77b      	b.n	800b19a <_dtoa_r+0x632>
 800b2a2:	4645      	mov	r5, r8
 800b2a4:	4656      	mov	r6, sl
 800b2a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2a8:	e780      	b.n	800b1ac <_dtoa_r+0x644>
 800b2aa:	4642      	mov	r2, r8
 800b2ac:	e7a8      	b.n	800b200 <_dtoa_r+0x698>
 800b2ae:	f04f 0800 	mov.w	r8, #0
 800b2b2:	e7d2      	b.n	800b25a <_dtoa_r+0x6f2>
 800b2b4:	4698      	mov	r8, r3
 800b2b6:	e7d0      	b.n	800b25a <_dtoa_r+0x6f2>
 800b2b8:	f04f 0800 	mov.w	r8, #0
 800b2bc:	692b      	ldr	r3, [r5, #16]
 800b2be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b2c2:	6918      	ldr	r0, [r3, #16]
 800b2c4:	f000 fdc2 	bl	800be4c <__hi0bits>
 800b2c8:	f1c0 0020 	rsb	r0, r0, #32
 800b2cc:	9b07      	ldr	r3, [sp, #28]
 800b2ce:	4418      	add	r0, r3
 800b2d0:	f010 001f 	ands.w	r0, r0, #31
 800b2d4:	d047      	beq.n	800b366 <_dtoa_r+0x7fe>
 800b2d6:	f1c0 0320 	rsb	r3, r0, #32
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	dd3b      	ble.n	800b356 <_dtoa_r+0x7ee>
 800b2de:	9b07      	ldr	r3, [sp, #28]
 800b2e0:	f1c0 001c 	rsb	r0, r0, #28
 800b2e4:	4482      	add	sl, r0
 800b2e6:	4406      	add	r6, r0
 800b2e8:	4403      	add	r3, r0
 800b2ea:	9307      	str	r3, [sp, #28]
 800b2ec:	f1ba 0f00 	cmp.w	sl, #0
 800b2f0:	dd05      	ble.n	800b2fe <_dtoa_r+0x796>
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	9901      	ldr	r1, [sp, #4]
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fee4 	bl	800c0c4 <__lshift>
 800b2fc:	9001      	str	r0, [sp, #4]
 800b2fe:	9b07      	ldr	r3, [sp, #28]
 800b300:	2b00      	cmp	r3, #0
 800b302:	dd05      	ble.n	800b310 <_dtoa_r+0x7a8>
 800b304:	4629      	mov	r1, r5
 800b306:	461a      	mov	r2, r3
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 fedb 	bl	800c0c4 <__lshift>
 800b30e:	4605      	mov	r5, r0
 800b310:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b312:	b353      	cbz	r3, 800b36a <_dtoa_r+0x802>
 800b314:	4629      	mov	r1, r5
 800b316:	9801      	ldr	r0, [sp, #4]
 800b318:	f000 ff28 	bl	800c16c <__mcmp>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	da24      	bge.n	800b36a <_dtoa_r+0x802>
 800b320:	2300      	movs	r3, #0
 800b322:	220a      	movs	r2, #10
 800b324:	9901      	ldr	r1, [sp, #4]
 800b326:	4620      	mov	r0, r4
 800b328:	f000 fd17 	bl	800bd5a <__multadd>
 800b32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b32e:	9001      	str	r0, [sp, #4]
 800b330:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 8142 	beq.w	800b5be <_dtoa_r+0xa56>
 800b33a:	2300      	movs	r3, #0
 800b33c:	4639      	mov	r1, r7
 800b33e:	220a      	movs	r2, #10
 800b340:	4620      	mov	r0, r4
 800b342:	f000 fd0a 	bl	800bd5a <__multadd>
 800b346:	9b06      	ldr	r3, [sp, #24]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	4607      	mov	r7, r0
 800b34c:	dc4b      	bgt.n	800b3e6 <_dtoa_r+0x87e>
 800b34e:	9b08      	ldr	r3, [sp, #32]
 800b350:	2b02      	cmp	r3, #2
 800b352:	dd48      	ble.n	800b3e6 <_dtoa_r+0x87e>
 800b354:	e011      	b.n	800b37a <_dtoa_r+0x812>
 800b356:	d0c9      	beq.n	800b2ec <_dtoa_r+0x784>
 800b358:	9a07      	ldr	r2, [sp, #28]
 800b35a:	331c      	adds	r3, #28
 800b35c:	441a      	add	r2, r3
 800b35e:	449a      	add	sl, r3
 800b360:	441e      	add	r6, r3
 800b362:	4613      	mov	r3, r2
 800b364:	e7c1      	b.n	800b2ea <_dtoa_r+0x782>
 800b366:	4603      	mov	r3, r0
 800b368:	e7f6      	b.n	800b358 <_dtoa_r+0x7f0>
 800b36a:	f1b9 0f00 	cmp.w	r9, #0
 800b36e:	dc34      	bgt.n	800b3da <_dtoa_r+0x872>
 800b370:	9b08      	ldr	r3, [sp, #32]
 800b372:	2b02      	cmp	r3, #2
 800b374:	dd31      	ble.n	800b3da <_dtoa_r+0x872>
 800b376:	f8cd 9018 	str.w	r9, [sp, #24]
 800b37a:	9b06      	ldr	r3, [sp, #24]
 800b37c:	b963      	cbnz	r3, 800b398 <_dtoa_r+0x830>
 800b37e:	4629      	mov	r1, r5
 800b380:	2205      	movs	r2, #5
 800b382:	4620      	mov	r0, r4
 800b384:	f000 fce9 	bl	800bd5a <__multadd>
 800b388:	4601      	mov	r1, r0
 800b38a:	4605      	mov	r5, r0
 800b38c:	9801      	ldr	r0, [sp, #4]
 800b38e:	f000 feed 	bl	800c16c <__mcmp>
 800b392:	2800      	cmp	r0, #0
 800b394:	f73f adfc 	bgt.w	800af90 <_dtoa_r+0x428>
 800b398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39a:	9e04      	ldr	r6, [sp, #16]
 800b39c:	ea6f 0b03 	mvn.w	fp, r3
 800b3a0:	f04f 0900 	mov.w	r9, #0
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 fcc0 	bl	800bd2c <_Bfree>
 800b3ac:	2f00      	cmp	r7, #0
 800b3ae:	f43f aebb 	beq.w	800b128 <_dtoa_r+0x5c0>
 800b3b2:	f1b9 0f00 	cmp.w	r9, #0
 800b3b6:	d005      	beq.n	800b3c4 <_dtoa_r+0x85c>
 800b3b8:	45b9      	cmp	r9, r7
 800b3ba:	d003      	beq.n	800b3c4 <_dtoa_r+0x85c>
 800b3bc:	4649      	mov	r1, r9
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 fcb4 	bl	800bd2c <_Bfree>
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fcb0 	bl	800bd2c <_Bfree>
 800b3cc:	e6ac      	b.n	800b128 <_dtoa_r+0x5c0>
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	462f      	mov	r7, r5
 800b3d2:	e7e1      	b.n	800b398 <_dtoa_r+0x830>
 800b3d4:	469b      	mov	fp, r3
 800b3d6:	462f      	mov	r7, r5
 800b3d8:	e5da      	b.n	800af90 <_dtoa_r+0x428>
 800b3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3dc:	f8cd 9018 	str.w	r9, [sp, #24]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 80f3 	beq.w	800b5cc <_dtoa_r+0xa64>
 800b3e6:	2e00      	cmp	r6, #0
 800b3e8:	dd05      	ble.n	800b3f6 <_dtoa_r+0x88e>
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 fe68 	bl	800c0c4 <__lshift>
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	f1b8 0f00 	cmp.w	r8, #0
 800b3fa:	d04c      	beq.n	800b496 <_dtoa_r+0x92e>
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 fc60 	bl	800bcc4 <_Balloc>
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	3202      	adds	r2, #2
 800b408:	4606      	mov	r6, r0
 800b40a:	0092      	lsls	r2, r2, #2
 800b40c:	f107 010c 	add.w	r1, r7, #12
 800b410:	300c      	adds	r0, #12
 800b412:	f7fd fe09 	bl	8009028 <memcpy>
 800b416:	2201      	movs	r2, #1
 800b418:	4631      	mov	r1, r6
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fe52 	bl	800c0c4 <__lshift>
 800b420:	9b02      	ldr	r3, [sp, #8]
 800b422:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	46b9      	mov	r9, r7
 800b42c:	9307      	str	r3, [sp, #28]
 800b42e:	4607      	mov	r7, r0
 800b430:	4629      	mov	r1, r5
 800b432:	9801      	ldr	r0, [sp, #4]
 800b434:	f7ff fb0a 	bl	800aa4c <quorem>
 800b438:	4649      	mov	r1, r9
 800b43a:	4606      	mov	r6, r0
 800b43c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b440:	9801      	ldr	r0, [sp, #4]
 800b442:	f000 fe93 	bl	800c16c <__mcmp>
 800b446:	463a      	mov	r2, r7
 800b448:	9002      	str	r0, [sp, #8]
 800b44a:	4629      	mov	r1, r5
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fea7 	bl	800c1a0 <__mdiff>
 800b452:	68c3      	ldr	r3, [r0, #12]
 800b454:	4602      	mov	r2, r0
 800b456:	bb03      	cbnz	r3, 800b49a <_dtoa_r+0x932>
 800b458:	4601      	mov	r1, r0
 800b45a:	9009      	str	r0, [sp, #36]	; 0x24
 800b45c:	9801      	ldr	r0, [sp, #4]
 800b45e:	f000 fe85 	bl	800c16c <__mcmp>
 800b462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b464:	4603      	mov	r3, r0
 800b466:	4611      	mov	r1, r2
 800b468:	4620      	mov	r0, r4
 800b46a:	9309      	str	r3, [sp, #36]	; 0x24
 800b46c:	f000 fc5e 	bl	800bd2c <_Bfree>
 800b470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b472:	b9a3      	cbnz	r3, 800b49e <_dtoa_r+0x936>
 800b474:	9a08      	ldr	r2, [sp, #32]
 800b476:	b992      	cbnz	r2, 800b49e <_dtoa_r+0x936>
 800b478:	9a07      	ldr	r2, [sp, #28]
 800b47a:	b982      	cbnz	r2, 800b49e <_dtoa_r+0x936>
 800b47c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b480:	d029      	beq.n	800b4d6 <_dtoa_r+0x96e>
 800b482:	9b02      	ldr	r3, [sp, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	dd01      	ble.n	800b48c <_dtoa_r+0x924>
 800b488:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800b48c:	f10a 0601 	add.w	r6, sl, #1
 800b490:	f88a 8000 	strb.w	r8, [sl]
 800b494:	e786      	b.n	800b3a4 <_dtoa_r+0x83c>
 800b496:	4638      	mov	r0, r7
 800b498:	e7c2      	b.n	800b420 <_dtoa_r+0x8b8>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e7e3      	b.n	800b466 <_dtoa_r+0x8fe>
 800b49e:	9a02      	ldr	r2, [sp, #8]
 800b4a0:	2a00      	cmp	r2, #0
 800b4a2:	db04      	blt.n	800b4ae <_dtoa_r+0x946>
 800b4a4:	d124      	bne.n	800b4f0 <_dtoa_r+0x988>
 800b4a6:	9a08      	ldr	r2, [sp, #32]
 800b4a8:	bb12      	cbnz	r2, 800b4f0 <_dtoa_r+0x988>
 800b4aa:	9a07      	ldr	r2, [sp, #28]
 800b4ac:	bb02      	cbnz	r2, 800b4f0 <_dtoa_r+0x988>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	ddec      	ble.n	800b48c <_dtoa_r+0x924>
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	9901      	ldr	r1, [sp, #4]
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f000 fe04 	bl	800c0c4 <__lshift>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	9001      	str	r0, [sp, #4]
 800b4c0:	f000 fe54 	bl	800c16c <__mcmp>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	dc03      	bgt.n	800b4d0 <_dtoa_r+0x968>
 800b4c8:	d1e0      	bne.n	800b48c <_dtoa_r+0x924>
 800b4ca:	f018 0f01 	tst.w	r8, #1
 800b4ce:	d0dd      	beq.n	800b48c <_dtoa_r+0x924>
 800b4d0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b4d4:	d1d8      	bne.n	800b488 <_dtoa_r+0x920>
 800b4d6:	2339      	movs	r3, #57	; 0x39
 800b4d8:	f10a 0601 	add.w	r6, sl, #1
 800b4dc:	f88a 3000 	strb.w	r3, [sl]
 800b4e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4e4:	2b39      	cmp	r3, #57	; 0x39
 800b4e6:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800b4ea:	d04c      	beq.n	800b586 <_dtoa_r+0xa1e>
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	e051      	b.n	800b594 <_dtoa_r+0xa2c>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f10a 0601 	add.w	r6, sl, #1
 800b4f6:	dd05      	ble.n	800b504 <_dtoa_r+0x99c>
 800b4f8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b4fc:	d0eb      	beq.n	800b4d6 <_dtoa_r+0x96e>
 800b4fe:	f108 0801 	add.w	r8, r8, #1
 800b502:	e7c5      	b.n	800b490 <_dtoa_r+0x928>
 800b504:	9b04      	ldr	r3, [sp, #16]
 800b506:	9a06      	ldr	r2, [sp, #24]
 800b508:	f806 8c01 	strb.w	r8, [r6, #-1]
 800b50c:	1af3      	subs	r3, r6, r3
 800b50e:	4293      	cmp	r3, r2
 800b510:	d021      	beq.n	800b556 <_dtoa_r+0x9ee>
 800b512:	2300      	movs	r3, #0
 800b514:	220a      	movs	r2, #10
 800b516:	9901      	ldr	r1, [sp, #4]
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 fc1e 	bl	800bd5a <__multadd>
 800b51e:	45b9      	cmp	r9, r7
 800b520:	9001      	str	r0, [sp, #4]
 800b522:	f04f 0300 	mov.w	r3, #0
 800b526:	f04f 020a 	mov.w	r2, #10
 800b52a:	4649      	mov	r1, r9
 800b52c:	4620      	mov	r0, r4
 800b52e:	d105      	bne.n	800b53c <_dtoa_r+0x9d4>
 800b530:	f000 fc13 	bl	800bd5a <__multadd>
 800b534:	4681      	mov	r9, r0
 800b536:	4607      	mov	r7, r0
 800b538:	46b2      	mov	sl, r6
 800b53a:	e779      	b.n	800b430 <_dtoa_r+0x8c8>
 800b53c:	f000 fc0d 	bl	800bd5a <__multadd>
 800b540:	4639      	mov	r1, r7
 800b542:	4681      	mov	r9, r0
 800b544:	2300      	movs	r3, #0
 800b546:	220a      	movs	r2, #10
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 fc06 	bl	800bd5a <__multadd>
 800b54e:	4607      	mov	r7, r0
 800b550:	e7f2      	b.n	800b538 <_dtoa_r+0x9d0>
 800b552:	f04f 0900 	mov.w	r9, #0
 800b556:	2201      	movs	r2, #1
 800b558:	9901      	ldr	r1, [sp, #4]
 800b55a:	4620      	mov	r0, r4
 800b55c:	f000 fdb2 	bl	800c0c4 <__lshift>
 800b560:	4629      	mov	r1, r5
 800b562:	9001      	str	r0, [sp, #4]
 800b564:	f000 fe02 	bl	800c16c <__mcmp>
 800b568:	2800      	cmp	r0, #0
 800b56a:	dcb9      	bgt.n	800b4e0 <_dtoa_r+0x978>
 800b56c:	d102      	bne.n	800b574 <_dtoa_r+0xa0c>
 800b56e:	f018 0f01 	tst.w	r8, #1
 800b572:	d1b5      	bne.n	800b4e0 <_dtoa_r+0x978>
 800b574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b578:	2b30      	cmp	r3, #48	; 0x30
 800b57a:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800b57e:	f47f af11 	bne.w	800b3a4 <_dtoa_r+0x83c>
 800b582:	4616      	mov	r6, r2
 800b584:	e7f6      	b.n	800b574 <_dtoa_r+0xa0c>
 800b586:	9b04      	ldr	r3, [sp, #16]
 800b588:	4293      	cmp	r3, r2
 800b58a:	d105      	bne.n	800b598 <_dtoa_r+0xa30>
 800b58c:	9a04      	ldr	r2, [sp, #16]
 800b58e:	f10b 0b01 	add.w	fp, fp, #1
 800b592:	2331      	movs	r3, #49	; 0x31
 800b594:	7013      	strb	r3, [r2, #0]
 800b596:	e705      	b.n	800b3a4 <_dtoa_r+0x83c>
 800b598:	4616      	mov	r6, r2
 800b59a:	e7a1      	b.n	800b4e0 <_dtoa_r+0x978>
 800b59c:	4b16      	ldr	r3, [pc, #88]	; (800b5f8 <_dtoa_r+0xa90>)
 800b59e:	f7ff bb48 	b.w	800ac32 <_dtoa_r+0xca>
 800b5a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f47f ab23 	bne.w	800abf0 <_dtoa_r+0x88>
 800b5aa:	4b14      	ldr	r3, [pc, #80]	; (800b5fc <_dtoa_r+0xa94>)
 800b5ac:	f7ff bb41 	b.w	800ac32 <_dtoa_r+0xca>
 800b5b0:	9b08      	ldr	r3, [sp, #32]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	f77f ae3b 	ble.w	800b22e <_dtoa_r+0x6c6>
 800b5b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b5bc:	e64f      	b.n	800b25e <_dtoa_r+0x6f6>
 800b5be:	9b06      	ldr	r3, [sp, #24]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dc03      	bgt.n	800b5cc <_dtoa_r+0xa64>
 800b5c4:	9b08      	ldr	r3, [sp, #32]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	f73f aed7 	bgt.w	800b37a <_dtoa_r+0x812>
 800b5cc:	9e04      	ldr	r6, [sp, #16]
 800b5ce:	9801      	ldr	r0, [sp, #4]
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7ff fa3b 	bl	800aa4c <quorem>
 800b5d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b5da:	f806 8b01 	strb.w	r8, [r6], #1
 800b5de:	9b04      	ldr	r3, [sp, #16]
 800b5e0:	9a06      	ldr	r2, [sp, #24]
 800b5e2:	1af3      	subs	r3, r6, r3
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	ddb4      	ble.n	800b552 <_dtoa_r+0x9ea>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	220a      	movs	r2, #10
 800b5ec:	9901      	ldr	r1, [sp, #4]
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f000 fbb3 	bl	800bd5a <__multadd>
 800b5f4:	9001      	str	r0, [sp, #4]
 800b5f6:	e7ea      	b.n	800b5ce <_dtoa_r+0xa66>
 800b5f8:	0800e673 	.word	0x0800e673
 800b5fc:	0800e538 	.word	0x0800e538

0800b600 <rshift>:
 800b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b602:	6906      	ldr	r6, [r0, #16]
 800b604:	114b      	asrs	r3, r1, #5
 800b606:	429e      	cmp	r6, r3
 800b608:	f100 0414 	add.w	r4, r0, #20
 800b60c:	dd30      	ble.n	800b670 <rshift+0x70>
 800b60e:	f011 011f 	ands.w	r1, r1, #31
 800b612:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b616:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b61a:	d108      	bne.n	800b62e <rshift+0x2e>
 800b61c:	4621      	mov	r1, r4
 800b61e:	42b2      	cmp	r2, r6
 800b620:	460b      	mov	r3, r1
 800b622:	d211      	bcs.n	800b648 <rshift+0x48>
 800b624:	f852 3b04 	ldr.w	r3, [r2], #4
 800b628:	f841 3b04 	str.w	r3, [r1], #4
 800b62c:	e7f7      	b.n	800b61e <rshift+0x1e>
 800b62e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b632:	f1c1 0c20 	rsb	ip, r1, #32
 800b636:	40cd      	lsrs	r5, r1
 800b638:	3204      	adds	r2, #4
 800b63a:	4623      	mov	r3, r4
 800b63c:	42b2      	cmp	r2, r6
 800b63e:	4617      	mov	r7, r2
 800b640:	d30c      	bcc.n	800b65c <rshift+0x5c>
 800b642:	601d      	str	r5, [r3, #0]
 800b644:	b105      	cbz	r5, 800b648 <rshift+0x48>
 800b646:	3304      	adds	r3, #4
 800b648:	1b1a      	subs	r2, r3, r4
 800b64a:	42a3      	cmp	r3, r4
 800b64c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b650:	bf08      	it	eq
 800b652:	2300      	moveq	r3, #0
 800b654:	6102      	str	r2, [r0, #16]
 800b656:	bf08      	it	eq
 800b658:	6143      	streq	r3, [r0, #20]
 800b65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65c:	683f      	ldr	r7, [r7, #0]
 800b65e:	fa07 f70c 	lsl.w	r7, r7, ip
 800b662:	433d      	orrs	r5, r7
 800b664:	f843 5b04 	str.w	r5, [r3], #4
 800b668:	f852 5b04 	ldr.w	r5, [r2], #4
 800b66c:	40cd      	lsrs	r5, r1
 800b66e:	e7e5      	b.n	800b63c <rshift+0x3c>
 800b670:	4623      	mov	r3, r4
 800b672:	e7e9      	b.n	800b648 <rshift+0x48>

0800b674 <__hexdig_fun>:
 800b674:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b678:	2b09      	cmp	r3, #9
 800b67a:	d802      	bhi.n	800b682 <__hexdig_fun+0xe>
 800b67c:	3820      	subs	r0, #32
 800b67e:	b2c0      	uxtb	r0, r0
 800b680:	4770      	bx	lr
 800b682:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b686:	2b05      	cmp	r3, #5
 800b688:	d801      	bhi.n	800b68e <__hexdig_fun+0x1a>
 800b68a:	3847      	subs	r0, #71	; 0x47
 800b68c:	e7f7      	b.n	800b67e <__hexdig_fun+0xa>
 800b68e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b692:	2b05      	cmp	r3, #5
 800b694:	d801      	bhi.n	800b69a <__hexdig_fun+0x26>
 800b696:	3827      	subs	r0, #39	; 0x27
 800b698:	e7f1      	b.n	800b67e <__hexdig_fun+0xa>
 800b69a:	2000      	movs	r0, #0
 800b69c:	4770      	bx	lr

0800b69e <__gethex>:
 800b69e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a2:	b08b      	sub	sp, #44	; 0x2c
 800b6a4:	468a      	mov	sl, r1
 800b6a6:	9002      	str	r0, [sp, #8]
 800b6a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b6aa:	9306      	str	r3, [sp, #24]
 800b6ac:	4690      	mov	r8, r2
 800b6ae:	f000 fadf 	bl	800bc70 <__localeconv_l>
 800b6b2:	6803      	ldr	r3, [r0, #0]
 800b6b4:	9303      	str	r3, [sp, #12]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7f4 fdc2 	bl	8000240 <strlen>
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	9001      	str	r0, [sp, #4]
 800b6c0:	4403      	add	r3, r0
 800b6c2:	f04f 0b00 	mov.w	fp, #0
 800b6c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b6ca:	9307      	str	r3, [sp, #28]
 800b6cc:	f8da 3000 	ldr.w	r3, [sl]
 800b6d0:	3302      	adds	r3, #2
 800b6d2:	461f      	mov	r7, r3
 800b6d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6d8:	2830      	cmp	r0, #48	; 0x30
 800b6da:	d06c      	beq.n	800b7b6 <__gethex+0x118>
 800b6dc:	f7ff ffca 	bl	800b674 <__hexdig_fun>
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d16a      	bne.n	800b7bc <__gethex+0x11e>
 800b6e6:	9a01      	ldr	r2, [sp, #4]
 800b6e8:	9903      	ldr	r1, [sp, #12]
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f001 fc36 	bl	800cf5c <strncmp>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d166      	bne.n	800b7c2 <__gethex+0x124>
 800b6f4:	9b01      	ldr	r3, [sp, #4]
 800b6f6:	5cf8      	ldrb	r0, [r7, r3]
 800b6f8:	18fe      	adds	r6, r7, r3
 800b6fa:	f7ff ffbb 	bl	800b674 <__hexdig_fun>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d062      	beq.n	800b7c8 <__gethex+0x12a>
 800b702:	4633      	mov	r3, r6
 800b704:	7818      	ldrb	r0, [r3, #0]
 800b706:	2830      	cmp	r0, #48	; 0x30
 800b708:	461f      	mov	r7, r3
 800b70a:	f103 0301 	add.w	r3, r3, #1
 800b70e:	d0f9      	beq.n	800b704 <__gethex+0x66>
 800b710:	f7ff ffb0 	bl	800b674 <__hexdig_fun>
 800b714:	fab0 f580 	clz	r5, r0
 800b718:	096d      	lsrs	r5, r5, #5
 800b71a:	4634      	mov	r4, r6
 800b71c:	f04f 0b01 	mov.w	fp, #1
 800b720:	463a      	mov	r2, r7
 800b722:	4616      	mov	r6, r2
 800b724:	3201      	adds	r2, #1
 800b726:	7830      	ldrb	r0, [r6, #0]
 800b728:	f7ff ffa4 	bl	800b674 <__hexdig_fun>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d1f8      	bne.n	800b722 <__gethex+0x84>
 800b730:	9a01      	ldr	r2, [sp, #4]
 800b732:	9903      	ldr	r1, [sp, #12]
 800b734:	4630      	mov	r0, r6
 800b736:	f001 fc11 	bl	800cf5c <strncmp>
 800b73a:	b950      	cbnz	r0, 800b752 <__gethex+0xb4>
 800b73c:	b954      	cbnz	r4, 800b754 <__gethex+0xb6>
 800b73e:	9b01      	ldr	r3, [sp, #4]
 800b740:	18f4      	adds	r4, r6, r3
 800b742:	4622      	mov	r2, r4
 800b744:	4616      	mov	r6, r2
 800b746:	3201      	adds	r2, #1
 800b748:	7830      	ldrb	r0, [r6, #0]
 800b74a:	f7ff ff93 	bl	800b674 <__hexdig_fun>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d1f8      	bne.n	800b744 <__gethex+0xa6>
 800b752:	b10c      	cbz	r4, 800b758 <__gethex+0xba>
 800b754:	1ba4      	subs	r4, r4, r6
 800b756:	00a4      	lsls	r4, r4, #2
 800b758:	7833      	ldrb	r3, [r6, #0]
 800b75a:	2b50      	cmp	r3, #80	; 0x50
 800b75c:	d001      	beq.n	800b762 <__gethex+0xc4>
 800b75e:	2b70      	cmp	r3, #112	; 0x70
 800b760:	d140      	bne.n	800b7e4 <__gethex+0x146>
 800b762:	7873      	ldrb	r3, [r6, #1]
 800b764:	2b2b      	cmp	r3, #43	; 0x2b
 800b766:	d031      	beq.n	800b7cc <__gethex+0x12e>
 800b768:	2b2d      	cmp	r3, #45	; 0x2d
 800b76a:	d033      	beq.n	800b7d4 <__gethex+0x136>
 800b76c:	1c71      	adds	r1, r6, #1
 800b76e:	f04f 0900 	mov.w	r9, #0
 800b772:	7808      	ldrb	r0, [r1, #0]
 800b774:	f7ff ff7e 	bl	800b674 <__hexdig_fun>
 800b778:	1e43      	subs	r3, r0, #1
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b18      	cmp	r3, #24
 800b77e:	d831      	bhi.n	800b7e4 <__gethex+0x146>
 800b780:	f1a0 0210 	sub.w	r2, r0, #16
 800b784:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b788:	f7ff ff74 	bl	800b674 <__hexdig_fun>
 800b78c:	1e43      	subs	r3, r0, #1
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b18      	cmp	r3, #24
 800b792:	d922      	bls.n	800b7da <__gethex+0x13c>
 800b794:	f1b9 0f00 	cmp.w	r9, #0
 800b798:	d000      	beq.n	800b79c <__gethex+0xfe>
 800b79a:	4252      	negs	r2, r2
 800b79c:	4414      	add	r4, r2
 800b79e:	f8ca 1000 	str.w	r1, [sl]
 800b7a2:	b30d      	cbz	r5, 800b7e8 <__gethex+0x14a>
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	bf0c      	ite	eq
 800b7aa:	2706      	moveq	r7, #6
 800b7ac:	2700      	movne	r7, #0
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	b00b      	add	sp, #44	; 0x2c
 800b7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b6:	f10b 0b01 	add.w	fp, fp, #1
 800b7ba:	e78a      	b.n	800b6d2 <__gethex+0x34>
 800b7bc:	2500      	movs	r5, #0
 800b7be:	462c      	mov	r4, r5
 800b7c0:	e7ae      	b.n	800b720 <__gethex+0x82>
 800b7c2:	463e      	mov	r6, r7
 800b7c4:	2501      	movs	r5, #1
 800b7c6:	e7c7      	b.n	800b758 <__gethex+0xba>
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	e7fb      	b.n	800b7c4 <__gethex+0x126>
 800b7cc:	f04f 0900 	mov.w	r9, #0
 800b7d0:	1cb1      	adds	r1, r6, #2
 800b7d2:	e7ce      	b.n	800b772 <__gethex+0xd4>
 800b7d4:	f04f 0901 	mov.w	r9, #1
 800b7d8:	e7fa      	b.n	800b7d0 <__gethex+0x132>
 800b7da:	230a      	movs	r3, #10
 800b7dc:	fb03 0202 	mla	r2, r3, r2, r0
 800b7e0:	3a10      	subs	r2, #16
 800b7e2:	e7cf      	b.n	800b784 <__gethex+0xe6>
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	e7da      	b.n	800b79e <__gethex+0x100>
 800b7e8:	1bf3      	subs	r3, r6, r7
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	2b07      	cmp	r3, #7
 800b7f0:	dc49      	bgt.n	800b886 <__gethex+0x1e8>
 800b7f2:	9802      	ldr	r0, [sp, #8]
 800b7f4:	f000 fa66 	bl	800bcc4 <_Balloc>
 800b7f8:	9b01      	ldr	r3, [sp, #4]
 800b7fa:	f100 0914 	add.w	r9, r0, #20
 800b7fe:	f04f 0b00 	mov.w	fp, #0
 800b802:	f1c3 0301 	rsb	r3, r3, #1
 800b806:	4605      	mov	r5, r0
 800b808:	f8cd 9010 	str.w	r9, [sp, #16]
 800b80c:	46da      	mov	sl, fp
 800b80e:	9308      	str	r3, [sp, #32]
 800b810:	42b7      	cmp	r7, r6
 800b812:	d33b      	bcc.n	800b88c <__gethex+0x1ee>
 800b814:	9804      	ldr	r0, [sp, #16]
 800b816:	f840 ab04 	str.w	sl, [r0], #4
 800b81a:	eba0 0009 	sub.w	r0, r0, r9
 800b81e:	1080      	asrs	r0, r0, #2
 800b820:	6128      	str	r0, [r5, #16]
 800b822:	0147      	lsls	r7, r0, #5
 800b824:	4650      	mov	r0, sl
 800b826:	f000 fb11 	bl	800be4c <__hi0bits>
 800b82a:	f8d8 6000 	ldr.w	r6, [r8]
 800b82e:	1a3f      	subs	r7, r7, r0
 800b830:	42b7      	cmp	r7, r6
 800b832:	dd64      	ble.n	800b8fe <__gethex+0x260>
 800b834:	1bbf      	subs	r7, r7, r6
 800b836:	4639      	mov	r1, r7
 800b838:	4628      	mov	r0, r5
 800b83a:	f000 fe22 	bl	800c482 <__any_on>
 800b83e:	4682      	mov	sl, r0
 800b840:	b178      	cbz	r0, 800b862 <__gethex+0x1c4>
 800b842:	1e7b      	subs	r3, r7, #1
 800b844:	1159      	asrs	r1, r3, #5
 800b846:	f003 021f 	and.w	r2, r3, #31
 800b84a:	f04f 0a01 	mov.w	sl, #1
 800b84e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b852:	fa0a f202 	lsl.w	r2, sl, r2
 800b856:	420a      	tst	r2, r1
 800b858:	d003      	beq.n	800b862 <__gethex+0x1c4>
 800b85a:	4553      	cmp	r3, sl
 800b85c:	dc46      	bgt.n	800b8ec <__gethex+0x24e>
 800b85e:	f04f 0a02 	mov.w	sl, #2
 800b862:	4639      	mov	r1, r7
 800b864:	4628      	mov	r0, r5
 800b866:	f7ff fecb 	bl	800b600 <rshift>
 800b86a:	443c      	add	r4, r7
 800b86c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b870:	42a3      	cmp	r3, r4
 800b872:	da52      	bge.n	800b91a <__gethex+0x27c>
 800b874:	4629      	mov	r1, r5
 800b876:	9802      	ldr	r0, [sp, #8]
 800b878:	f000 fa58 	bl	800bd2c <_Bfree>
 800b87c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b87e:	2300      	movs	r3, #0
 800b880:	6013      	str	r3, [r2, #0]
 800b882:	27a3      	movs	r7, #163	; 0xa3
 800b884:	e793      	b.n	800b7ae <__gethex+0x110>
 800b886:	3101      	adds	r1, #1
 800b888:	105b      	asrs	r3, r3, #1
 800b88a:	e7b0      	b.n	800b7ee <__gethex+0x150>
 800b88c:	1e73      	subs	r3, r6, #1
 800b88e:	9305      	str	r3, [sp, #20]
 800b890:	9a07      	ldr	r2, [sp, #28]
 800b892:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b896:	4293      	cmp	r3, r2
 800b898:	d018      	beq.n	800b8cc <__gethex+0x22e>
 800b89a:	f1bb 0f20 	cmp.w	fp, #32
 800b89e:	d107      	bne.n	800b8b0 <__gethex+0x212>
 800b8a0:	9b04      	ldr	r3, [sp, #16]
 800b8a2:	f8c3 a000 	str.w	sl, [r3]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	f04f 0a00 	mov.w	sl, #0
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	46d3      	mov	fp, sl
 800b8b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b8b4:	f7ff fede 	bl	800b674 <__hexdig_fun>
 800b8b8:	f000 000f 	and.w	r0, r0, #15
 800b8bc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b8c4:	f10b 0b04 	add.w	fp, fp, #4
 800b8c8:	9b05      	ldr	r3, [sp, #20]
 800b8ca:	e00d      	b.n	800b8e8 <__gethex+0x24a>
 800b8cc:	9b05      	ldr	r3, [sp, #20]
 800b8ce:	9a08      	ldr	r2, [sp, #32]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	42bb      	cmp	r3, r7
 800b8d4:	d3e1      	bcc.n	800b89a <__gethex+0x1fc>
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	9a01      	ldr	r2, [sp, #4]
 800b8da:	9903      	ldr	r1, [sp, #12]
 800b8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b8de:	f001 fb3d 	bl	800cf5c <strncmp>
 800b8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d1d8      	bne.n	800b89a <__gethex+0x1fc>
 800b8e8:	461e      	mov	r6, r3
 800b8ea:	e791      	b.n	800b810 <__gethex+0x172>
 800b8ec:	1eb9      	subs	r1, r7, #2
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f000 fdc7 	bl	800c482 <__any_on>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d0b2      	beq.n	800b85e <__gethex+0x1c0>
 800b8f8:	f04f 0a03 	mov.w	sl, #3
 800b8fc:	e7b1      	b.n	800b862 <__gethex+0x1c4>
 800b8fe:	da09      	bge.n	800b914 <__gethex+0x276>
 800b900:	1bf7      	subs	r7, r6, r7
 800b902:	4629      	mov	r1, r5
 800b904:	463a      	mov	r2, r7
 800b906:	9802      	ldr	r0, [sp, #8]
 800b908:	f000 fbdc 	bl	800c0c4 <__lshift>
 800b90c:	1be4      	subs	r4, r4, r7
 800b90e:	4605      	mov	r5, r0
 800b910:	f100 0914 	add.w	r9, r0, #20
 800b914:	f04f 0a00 	mov.w	sl, #0
 800b918:	e7a8      	b.n	800b86c <__gethex+0x1ce>
 800b91a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b91e:	42a0      	cmp	r0, r4
 800b920:	dd6a      	ble.n	800b9f8 <__gethex+0x35a>
 800b922:	1b04      	subs	r4, r0, r4
 800b924:	42a6      	cmp	r6, r4
 800b926:	dc2e      	bgt.n	800b986 <__gethex+0x2e8>
 800b928:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d022      	beq.n	800b976 <__gethex+0x2d8>
 800b930:	2b03      	cmp	r3, #3
 800b932:	d024      	beq.n	800b97e <__gethex+0x2e0>
 800b934:	2b01      	cmp	r3, #1
 800b936:	d115      	bne.n	800b964 <__gethex+0x2c6>
 800b938:	42a6      	cmp	r6, r4
 800b93a:	d113      	bne.n	800b964 <__gethex+0x2c6>
 800b93c:	2e01      	cmp	r6, #1
 800b93e:	dc0b      	bgt.n	800b958 <__gethex+0x2ba>
 800b940:	9a06      	ldr	r2, [sp, #24]
 800b942:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	2301      	movs	r3, #1
 800b94a:	612b      	str	r3, [r5, #16]
 800b94c:	f8c9 3000 	str.w	r3, [r9]
 800b950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b952:	2762      	movs	r7, #98	; 0x62
 800b954:	601d      	str	r5, [r3, #0]
 800b956:	e72a      	b.n	800b7ae <__gethex+0x110>
 800b958:	1e71      	subs	r1, r6, #1
 800b95a:	4628      	mov	r0, r5
 800b95c:	f000 fd91 	bl	800c482 <__any_on>
 800b960:	2800      	cmp	r0, #0
 800b962:	d1ed      	bne.n	800b940 <__gethex+0x2a2>
 800b964:	4629      	mov	r1, r5
 800b966:	9802      	ldr	r0, [sp, #8]
 800b968:	f000 f9e0 	bl	800bd2c <_Bfree>
 800b96c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b96e:	2300      	movs	r3, #0
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	2750      	movs	r7, #80	; 0x50
 800b974:	e71b      	b.n	800b7ae <__gethex+0x110>
 800b976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d0e1      	beq.n	800b940 <__gethex+0x2a2>
 800b97c:	e7f2      	b.n	800b964 <__gethex+0x2c6>
 800b97e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1dd      	bne.n	800b940 <__gethex+0x2a2>
 800b984:	e7ee      	b.n	800b964 <__gethex+0x2c6>
 800b986:	1e67      	subs	r7, r4, #1
 800b988:	f1ba 0f00 	cmp.w	sl, #0
 800b98c:	d131      	bne.n	800b9f2 <__gethex+0x354>
 800b98e:	b127      	cbz	r7, 800b99a <__gethex+0x2fc>
 800b990:	4639      	mov	r1, r7
 800b992:	4628      	mov	r0, r5
 800b994:	f000 fd75 	bl	800c482 <__any_on>
 800b998:	4682      	mov	sl, r0
 800b99a:	117a      	asrs	r2, r7, #5
 800b99c:	2301      	movs	r3, #1
 800b99e:	f007 071f 	and.w	r7, r7, #31
 800b9a2:	fa03 f707 	lsl.w	r7, r3, r7
 800b9a6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	421f      	tst	r7, r3
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	bf18      	it	ne
 800b9b2:	f04a 0a02 	orrne.w	sl, sl, #2
 800b9b6:	1b36      	subs	r6, r6, r4
 800b9b8:	f7ff fe22 	bl	800b600 <rshift>
 800b9bc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b9c0:	2702      	movs	r7, #2
 800b9c2:	f1ba 0f00 	cmp.w	sl, #0
 800b9c6:	d048      	beq.n	800ba5a <__gethex+0x3bc>
 800b9c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d015      	beq.n	800b9fc <__gethex+0x35e>
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d017      	beq.n	800ba04 <__gethex+0x366>
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d109      	bne.n	800b9ec <__gethex+0x34e>
 800b9d8:	f01a 0f02 	tst.w	sl, #2
 800b9dc:	d006      	beq.n	800b9ec <__gethex+0x34e>
 800b9de:	f8d9 3000 	ldr.w	r3, [r9]
 800b9e2:	ea4a 0a03 	orr.w	sl, sl, r3
 800b9e6:	f01a 0f01 	tst.w	sl, #1
 800b9ea:	d10e      	bne.n	800ba0a <__gethex+0x36c>
 800b9ec:	f047 0710 	orr.w	r7, r7, #16
 800b9f0:	e033      	b.n	800ba5a <__gethex+0x3bc>
 800b9f2:	f04f 0a01 	mov.w	sl, #1
 800b9f6:	e7d0      	b.n	800b99a <__gethex+0x2fc>
 800b9f8:	2701      	movs	r7, #1
 800b9fa:	e7e2      	b.n	800b9c2 <__gethex+0x324>
 800b9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9fe:	f1c3 0301 	rsb	r3, r3, #1
 800ba02:	9315      	str	r3, [sp, #84]	; 0x54
 800ba04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0f0      	beq.n	800b9ec <__gethex+0x34e>
 800ba0a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ba0e:	f105 0314 	add.w	r3, r5, #20
 800ba12:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ba16:	eb03 010a 	add.w	r1, r3, sl
 800ba1a:	f04f 0c00 	mov.w	ip, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba24:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ba28:	d01c      	beq.n	800ba64 <__gethex+0x3c6>
 800ba2a:	3201      	adds	r2, #1
 800ba2c:	6002      	str	r2, [r0, #0]
 800ba2e:	2f02      	cmp	r7, #2
 800ba30:	f105 0314 	add.w	r3, r5, #20
 800ba34:	d138      	bne.n	800baa8 <__gethex+0x40a>
 800ba36:	f8d8 2000 	ldr.w	r2, [r8]
 800ba3a:	3a01      	subs	r2, #1
 800ba3c:	42b2      	cmp	r2, r6
 800ba3e:	d10a      	bne.n	800ba56 <__gethex+0x3b8>
 800ba40:	1171      	asrs	r1, r6, #5
 800ba42:	2201      	movs	r2, #1
 800ba44:	f006 061f 	and.w	r6, r6, #31
 800ba48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba4c:	fa02 f606 	lsl.w	r6, r2, r6
 800ba50:	421e      	tst	r6, r3
 800ba52:	bf18      	it	ne
 800ba54:	4617      	movne	r7, r2
 800ba56:	f047 0720 	orr.w	r7, r7, #32
 800ba5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba5c:	601d      	str	r5, [r3, #0]
 800ba5e:	9b06      	ldr	r3, [sp, #24]
 800ba60:	601c      	str	r4, [r3, #0]
 800ba62:	e6a4      	b.n	800b7ae <__gethex+0x110>
 800ba64:	4299      	cmp	r1, r3
 800ba66:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba6a:	d8d8      	bhi.n	800ba1e <__gethex+0x380>
 800ba6c:	68ab      	ldr	r3, [r5, #8]
 800ba6e:	4599      	cmp	r9, r3
 800ba70:	db12      	blt.n	800ba98 <__gethex+0x3fa>
 800ba72:	6869      	ldr	r1, [r5, #4]
 800ba74:	9802      	ldr	r0, [sp, #8]
 800ba76:	3101      	adds	r1, #1
 800ba78:	f000 f924 	bl	800bcc4 <_Balloc>
 800ba7c:	692a      	ldr	r2, [r5, #16]
 800ba7e:	3202      	adds	r2, #2
 800ba80:	f105 010c 	add.w	r1, r5, #12
 800ba84:	4683      	mov	fp, r0
 800ba86:	0092      	lsls	r2, r2, #2
 800ba88:	300c      	adds	r0, #12
 800ba8a:	f7fd facd 	bl	8009028 <memcpy>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	9802      	ldr	r0, [sp, #8]
 800ba92:	f000 f94b 	bl	800bd2c <_Bfree>
 800ba96:	465d      	mov	r5, fp
 800ba98:	692b      	ldr	r3, [r5, #16]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800baa0:	612a      	str	r2, [r5, #16]
 800baa2:	2201      	movs	r2, #1
 800baa4:	615a      	str	r2, [r3, #20]
 800baa6:	e7c2      	b.n	800ba2e <__gethex+0x390>
 800baa8:	692a      	ldr	r2, [r5, #16]
 800baaa:	454a      	cmp	r2, r9
 800baac:	dd0b      	ble.n	800bac6 <__gethex+0x428>
 800baae:	2101      	movs	r1, #1
 800bab0:	4628      	mov	r0, r5
 800bab2:	f7ff fda5 	bl	800b600 <rshift>
 800bab6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baba:	3401      	adds	r4, #1
 800babc:	42a3      	cmp	r3, r4
 800babe:	f6ff aed9 	blt.w	800b874 <__gethex+0x1d6>
 800bac2:	2701      	movs	r7, #1
 800bac4:	e7c7      	b.n	800ba56 <__gethex+0x3b8>
 800bac6:	f016 061f 	ands.w	r6, r6, #31
 800baca:	d0fa      	beq.n	800bac2 <__gethex+0x424>
 800bacc:	449a      	add	sl, r3
 800bace:	f1c6 0620 	rsb	r6, r6, #32
 800bad2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bad6:	f000 f9b9 	bl	800be4c <__hi0bits>
 800bada:	42b0      	cmp	r0, r6
 800badc:	dbe7      	blt.n	800baae <__gethex+0x410>
 800bade:	e7f0      	b.n	800bac2 <__gethex+0x424>

0800bae0 <L_shift>:
 800bae0:	f1c2 0208 	rsb	r2, r2, #8
 800bae4:	0092      	lsls	r2, r2, #2
 800bae6:	b570      	push	{r4, r5, r6, lr}
 800bae8:	f1c2 0620 	rsb	r6, r2, #32
 800baec:	6843      	ldr	r3, [r0, #4]
 800baee:	6804      	ldr	r4, [r0, #0]
 800baf0:	fa03 f506 	lsl.w	r5, r3, r6
 800baf4:	432c      	orrs	r4, r5
 800baf6:	40d3      	lsrs	r3, r2
 800baf8:	6004      	str	r4, [r0, #0]
 800bafa:	f840 3f04 	str.w	r3, [r0, #4]!
 800bafe:	4288      	cmp	r0, r1
 800bb00:	d3f4      	bcc.n	800baec <L_shift+0xc>
 800bb02:	bd70      	pop	{r4, r5, r6, pc}

0800bb04 <__match>:
 800bb04:	b530      	push	{r4, r5, lr}
 800bb06:	6803      	ldr	r3, [r0, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb0e:	b914      	cbnz	r4, 800bb16 <__match+0x12>
 800bb10:	6003      	str	r3, [r0, #0]
 800bb12:	2001      	movs	r0, #1
 800bb14:	bd30      	pop	{r4, r5, pc}
 800bb16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb1e:	2d19      	cmp	r5, #25
 800bb20:	bf98      	it	ls
 800bb22:	3220      	addls	r2, #32
 800bb24:	42a2      	cmp	r2, r4
 800bb26:	d0f0      	beq.n	800bb0a <__match+0x6>
 800bb28:	2000      	movs	r0, #0
 800bb2a:	e7f3      	b.n	800bb14 <__match+0x10>

0800bb2c <__hexnan>:
 800bb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	680b      	ldr	r3, [r1, #0]
 800bb32:	6801      	ldr	r1, [r0, #0]
 800bb34:	115f      	asrs	r7, r3, #5
 800bb36:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bb3a:	f013 031f 	ands.w	r3, r3, #31
 800bb3e:	b087      	sub	sp, #28
 800bb40:	bf18      	it	ne
 800bb42:	3704      	addne	r7, #4
 800bb44:	2500      	movs	r5, #0
 800bb46:	1f3e      	subs	r6, r7, #4
 800bb48:	4682      	mov	sl, r0
 800bb4a:	4690      	mov	r8, r2
 800bb4c:	9301      	str	r3, [sp, #4]
 800bb4e:	f847 5c04 	str.w	r5, [r7, #-4]
 800bb52:	46b1      	mov	r9, r6
 800bb54:	4634      	mov	r4, r6
 800bb56:	9502      	str	r5, [sp, #8]
 800bb58:	46ab      	mov	fp, r5
 800bb5a:	784a      	ldrb	r2, [r1, #1]
 800bb5c:	1c4b      	adds	r3, r1, #1
 800bb5e:	9303      	str	r3, [sp, #12]
 800bb60:	b342      	cbz	r2, 800bbb4 <__hexnan+0x88>
 800bb62:	4610      	mov	r0, r2
 800bb64:	9105      	str	r1, [sp, #20]
 800bb66:	9204      	str	r2, [sp, #16]
 800bb68:	f7ff fd84 	bl	800b674 <__hexdig_fun>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d143      	bne.n	800bbf8 <__hexnan+0xcc>
 800bb70:	9a04      	ldr	r2, [sp, #16]
 800bb72:	9905      	ldr	r1, [sp, #20]
 800bb74:	2a20      	cmp	r2, #32
 800bb76:	d818      	bhi.n	800bbaa <__hexnan+0x7e>
 800bb78:	9b02      	ldr	r3, [sp, #8]
 800bb7a:	459b      	cmp	fp, r3
 800bb7c:	dd13      	ble.n	800bba6 <__hexnan+0x7a>
 800bb7e:	454c      	cmp	r4, r9
 800bb80:	d206      	bcs.n	800bb90 <__hexnan+0x64>
 800bb82:	2d07      	cmp	r5, #7
 800bb84:	dc04      	bgt.n	800bb90 <__hexnan+0x64>
 800bb86:	462a      	mov	r2, r5
 800bb88:	4649      	mov	r1, r9
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7ff ffa8 	bl	800bae0 <L_shift>
 800bb90:	4544      	cmp	r4, r8
 800bb92:	d944      	bls.n	800bc1e <__hexnan+0xf2>
 800bb94:	2300      	movs	r3, #0
 800bb96:	f1a4 0904 	sub.w	r9, r4, #4
 800bb9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb9e:	f8cd b008 	str.w	fp, [sp, #8]
 800bba2:	464c      	mov	r4, r9
 800bba4:	461d      	mov	r5, r3
 800bba6:	9903      	ldr	r1, [sp, #12]
 800bba8:	e7d7      	b.n	800bb5a <__hexnan+0x2e>
 800bbaa:	2a29      	cmp	r2, #41	; 0x29
 800bbac:	d14a      	bne.n	800bc44 <__hexnan+0x118>
 800bbae:	3102      	adds	r1, #2
 800bbb0:	f8ca 1000 	str.w	r1, [sl]
 800bbb4:	f1bb 0f00 	cmp.w	fp, #0
 800bbb8:	d044      	beq.n	800bc44 <__hexnan+0x118>
 800bbba:	454c      	cmp	r4, r9
 800bbbc:	d206      	bcs.n	800bbcc <__hexnan+0xa0>
 800bbbe:	2d07      	cmp	r5, #7
 800bbc0:	dc04      	bgt.n	800bbcc <__hexnan+0xa0>
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7ff ff8a 	bl	800bae0 <L_shift>
 800bbcc:	4544      	cmp	r4, r8
 800bbce:	d928      	bls.n	800bc22 <__hexnan+0xf6>
 800bbd0:	4643      	mov	r3, r8
 800bbd2:	f854 2b04 	ldr.w	r2, [r4], #4
 800bbd6:	f843 2b04 	str.w	r2, [r3], #4
 800bbda:	42a6      	cmp	r6, r4
 800bbdc:	d2f9      	bcs.n	800bbd2 <__hexnan+0xa6>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f843 2b04 	str.w	r2, [r3], #4
 800bbe4:	429e      	cmp	r6, r3
 800bbe6:	d2fb      	bcs.n	800bbe0 <__hexnan+0xb4>
 800bbe8:	6833      	ldr	r3, [r6, #0]
 800bbea:	b91b      	cbnz	r3, 800bbf4 <__hexnan+0xc8>
 800bbec:	4546      	cmp	r6, r8
 800bbee:	d127      	bne.n	800bc40 <__hexnan+0x114>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	6033      	str	r3, [r6, #0]
 800bbf4:	2005      	movs	r0, #5
 800bbf6:	e026      	b.n	800bc46 <__hexnan+0x11a>
 800bbf8:	3501      	adds	r5, #1
 800bbfa:	2d08      	cmp	r5, #8
 800bbfc:	f10b 0b01 	add.w	fp, fp, #1
 800bc00:	dd06      	ble.n	800bc10 <__hexnan+0xe4>
 800bc02:	4544      	cmp	r4, r8
 800bc04:	d9cf      	bls.n	800bba6 <__hexnan+0x7a>
 800bc06:	2300      	movs	r3, #0
 800bc08:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc0c:	2501      	movs	r5, #1
 800bc0e:	3c04      	subs	r4, #4
 800bc10:	6822      	ldr	r2, [r4, #0]
 800bc12:	f000 000f 	and.w	r0, r0, #15
 800bc16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc1a:	6020      	str	r0, [r4, #0]
 800bc1c:	e7c3      	b.n	800bba6 <__hexnan+0x7a>
 800bc1e:	2508      	movs	r5, #8
 800bc20:	e7c1      	b.n	800bba6 <__hexnan+0x7a>
 800bc22:	9b01      	ldr	r3, [sp, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0df      	beq.n	800bbe8 <__hexnan+0xbc>
 800bc28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc2c:	f1c3 0320 	rsb	r3, r3, #32
 800bc30:	fa22 f303 	lsr.w	r3, r2, r3
 800bc34:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bc38:	401a      	ands	r2, r3
 800bc3a:	f847 2c04 	str.w	r2, [r7, #-4]
 800bc3e:	e7d3      	b.n	800bbe8 <__hexnan+0xbc>
 800bc40:	3e04      	subs	r6, #4
 800bc42:	e7d1      	b.n	800bbe8 <__hexnan+0xbc>
 800bc44:	2004      	movs	r0, #4
 800bc46:	b007      	add	sp, #28
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc4c <__locale_ctype_ptr_l>:
 800bc4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bc50:	4770      	bx	lr
	...

0800bc54 <__locale_ctype_ptr>:
 800bc54:	4b04      	ldr	r3, [pc, #16]	; (800bc68 <__locale_ctype_ptr+0x14>)
 800bc56:	4a05      	ldr	r2, [pc, #20]	; (800bc6c <__locale_ctype_ptr+0x18>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bf08      	it	eq
 800bc60:	4613      	moveq	r3, r2
 800bc62:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800bc66:	4770      	bx	lr
 800bc68:	20000014 	.word	0x20000014
 800bc6c:	20000078 	.word	0x20000078

0800bc70 <__localeconv_l>:
 800bc70:	30f0      	adds	r0, #240	; 0xf0
 800bc72:	4770      	bx	lr

0800bc74 <_localeconv_r>:
 800bc74:	4b04      	ldr	r3, [pc, #16]	; (800bc88 <_localeconv_r+0x14>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6a18      	ldr	r0, [r3, #32]
 800bc7a:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <_localeconv_r+0x18>)
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	bf08      	it	eq
 800bc80:	4618      	moveq	r0, r3
 800bc82:	30f0      	adds	r0, #240	; 0xf0
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	20000014 	.word	0x20000014
 800bc8c:	20000078 	.word	0x20000078

0800bc90 <malloc>:
 800bc90:	4b02      	ldr	r3, [pc, #8]	; (800bc9c <malloc+0xc>)
 800bc92:	4601      	mov	r1, r0
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	f000 bc71 	b.w	800c57c <_malloc_r>
 800bc9a:	bf00      	nop
 800bc9c:	20000014 	.word	0x20000014

0800bca0 <__ascii_mbtowc>:
 800bca0:	b082      	sub	sp, #8
 800bca2:	b901      	cbnz	r1, 800bca6 <__ascii_mbtowc+0x6>
 800bca4:	a901      	add	r1, sp, #4
 800bca6:	b142      	cbz	r2, 800bcba <__ascii_mbtowc+0x1a>
 800bca8:	b14b      	cbz	r3, 800bcbe <__ascii_mbtowc+0x1e>
 800bcaa:	7813      	ldrb	r3, [r2, #0]
 800bcac:	600b      	str	r3, [r1, #0]
 800bcae:	7812      	ldrb	r2, [r2, #0]
 800bcb0:	1c10      	adds	r0, r2, #0
 800bcb2:	bf18      	it	ne
 800bcb4:	2001      	movne	r0, #1
 800bcb6:	b002      	add	sp, #8
 800bcb8:	4770      	bx	lr
 800bcba:	4610      	mov	r0, r2
 800bcbc:	e7fb      	b.n	800bcb6 <__ascii_mbtowc+0x16>
 800bcbe:	f06f 0001 	mvn.w	r0, #1
 800bcc2:	e7f8      	b.n	800bcb6 <__ascii_mbtowc+0x16>

0800bcc4 <_Balloc>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcc8:	4604      	mov	r4, r0
 800bcca:	460e      	mov	r6, r1
 800bccc:	b93d      	cbnz	r5, 800bcde <_Balloc+0x1a>
 800bcce:	2010      	movs	r0, #16
 800bcd0:	f7ff ffde 	bl	800bc90 <malloc>
 800bcd4:	6260      	str	r0, [r4, #36]	; 0x24
 800bcd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcda:	6005      	str	r5, [r0, #0]
 800bcdc:	60c5      	str	r5, [r0, #12]
 800bcde:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bce0:	68eb      	ldr	r3, [r5, #12]
 800bce2:	b183      	cbz	r3, 800bd06 <_Balloc+0x42>
 800bce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bcec:	b9b8      	cbnz	r0, 800bd1e <_Balloc+0x5a>
 800bcee:	2101      	movs	r1, #1
 800bcf0:	fa01 f506 	lsl.w	r5, r1, r6
 800bcf4:	1d6a      	adds	r2, r5, #5
 800bcf6:	0092      	lsls	r2, r2, #2
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fbe3 	bl	800c4c4 <_calloc_r>
 800bcfe:	b160      	cbz	r0, 800bd1a <_Balloc+0x56>
 800bd00:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bd04:	e00e      	b.n	800bd24 <_Balloc+0x60>
 800bd06:	2221      	movs	r2, #33	; 0x21
 800bd08:	2104      	movs	r1, #4
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f000 fbda 	bl	800c4c4 <_calloc_r>
 800bd10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd12:	60e8      	str	r0, [r5, #12]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e4      	bne.n	800bce4 <_Balloc+0x20>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	bd70      	pop	{r4, r5, r6, pc}
 800bd1e:	6802      	ldr	r2, [r0, #0]
 800bd20:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bd24:	2300      	movs	r3, #0
 800bd26:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd2a:	e7f7      	b.n	800bd1c <_Balloc+0x58>

0800bd2c <_Bfree>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd30:	4606      	mov	r6, r0
 800bd32:	460d      	mov	r5, r1
 800bd34:	b93c      	cbnz	r4, 800bd46 <_Bfree+0x1a>
 800bd36:	2010      	movs	r0, #16
 800bd38:	f7ff ffaa 	bl	800bc90 <malloc>
 800bd3c:	6270      	str	r0, [r6, #36]	; 0x24
 800bd3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd42:	6004      	str	r4, [r0, #0]
 800bd44:	60c4      	str	r4, [r0, #12]
 800bd46:	b13d      	cbz	r5, 800bd58 <_Bfree+0x2c>
 800bd48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd4a:	686a      	ldr	r2, [r5, #4]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd52:	6029      	str	r1, [r5, #0]
 800bd54:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bd58:	bd70      	pop	{r4, r5, r6, pc}

0800bd5a <__multadd>:
 800bd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5e:	690d      	ldr	r5, [r1, #16]
 800bd60:	461f      	mov	r7, r3
 800bd62:	4606      	mov	r6, r0
 800bd64:	460c      	mov	r4, r1
 800bd66:	f101 0c14 	add.w	ip, r1, #20
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f8dc 0000 	ldr.w	r0, [ip]
 800bd70:	b281      	uxth	r1, r0
 800bd72:	fb02 7101 	mla	r1, r2, r1, r7
 800bd76:	0c0f      	lsrs	r7, r1, #16
 800bd78:	0c00      	lsrs	r0, r0, #16
 800bd7a:	fb02 7000 	mla	r0, r2, r0, r7
 800bd7e:	b289      	uxth	r1, r1
 800bd80:	3301      	adds	r3, #1
 800bd82:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bd86:	429d      	cmp	r5, r3
 800bd88:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bd8c:	f84c 1b04 	str.w	r1, [ip], #4
 800bd90:	dcec      	bgt.n	800bd6c <__multadd+0x12>
 800bd92:	b1d7      	cbz	r7, 800bdca <__multadd+0x70>
 800bd94:	68a3      	ldr	r3, [r4, #8]
 800bd96:	42ab      	cmp	r3, r5
 800bd98:	dc12      	bgt.n	800bdc0 <__multadd+0x66>
 800bd9a:	6861      	ldr	r1, [r4, #4]
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	3101      	adds	r1, #1
 800bda0:	f7ff ff90 	bl	800bcc4 <_Balloc>
 800bda4:	6922      	ldr	r2, [r4, #16]
 800bda6:	3202      	adds	r2, #2
 800bda8:	f104 010c 	add.w	r1, r4, #12
 800bdac:	4680      	mov	r8, r0
 800bdae:	0092      	lsls	r2, r2, #2
 800bdb0:	300c      	adds	r0, #12
 800bdb2:	f7fd f939 	bl	8009028 <memcpy>
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f7ff ffb7 	bl	800bd2c <_Bfree>
 800bdbe:	4644      	mov	r4, r8
 800bdc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdc4:	3501      	adds	r5, #1
 800bdc6:	615f      	str	r7, [r3, #20]
 800bdc8:	6125      	str	r5, [r4, #16]
 800bdca:	4620      	mov	r0, r4
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bdd0 <__s2b>:
 800bdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	4615      	mov	r5, r2
 800bdd8:	461f      	mov	r7, r3
 800bdda:	2209      	movs	r2, #9
 800bddc:	3308      	adds	r3, #8
 800bdde:	4606      	mov	r6, r0
 800bde0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bde4:	2100      	movs	r1, #0
 800bde6:	2201      	movs	r2, #1
 800bde8:	429a      	cmp	r2, r3
 800bdea:	db20      	blt.n	800be2e <__s2b+0x5e>
 800bdec:	4630      	mov	r0, r6
 800bdee:	f7ff ff69 	bl	800bcc4 <_Balloc>
 800bdf2:	9b08      	ldr	r3, [sp, #32]
 800bdf4:	6143      	str	r3, [r0, #20]
 800bdf6:	2d09      	cmp	r5, #9
 800bdf8:	f04f 0301 	mov.w	r3, #1
 800bdfc:	6103      	str	r3, [r0, #16]
 800bdfe:	dd19      	ble.n	800be34 <__s2b+0x64>
 800be00:	f104 0809 	add.w	r8, r4, #9
 800be04:	46c1      	mov	r9, r8
 800be06:	442c      	add	r4, r5
 800be08:	f819 3b01 	ldrb.w	r3, [r9], #1
 800be0c:	4601      	mov	r1, r0
 800be0e:	3b30      	subs	r3, #48	; 0x30
 800be10:	220a      	movs	r2, #10
 800be12:	4630      	mov	r0, r6
 800be14:	f7ff ffa1 	bl	800bd5a <__multadd>
 800be18:	45a1      	cmp	r9, r4
 800be1a:	d1f5      	bne.n	800be08 <__s2b+0x38>
 800be1c:	eb08 0405 	add.w	r4, r8, r5
 800be20:	3c08      	subs	r4, #8
 800be22:	1b2d      	subs	r5, r5, r4
 800be24:	1963      	adds	r3, r4, r5
 800be26:	42bb      	cmp	r3, r7
 800be28:	db07      	blt.n	800be3a <__s2b+0x6a>
 800be2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2e:	0052      	lsls	r2, r2, #1
 800be30:	3101      	adds	r1, #1
 800be32:	e7d9      	b.n	800bde8 <__s2b+0x18>
 800be34:	340a      	adds	r4, #10
 800be36:	2509      	movs	r5, #9
 800be38:	e7f3      	b.n	800be22 <__s2b+0x52>
 800be3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be3e:	4601      	mov	r1, r0
 800be40:	3b30      	subs	r3, #48	; 0x30
 800be42:	220a      	movs	r2, #10
 800be44:	4630      	mov	r0, r6
 800be46:	f7ff ff88 	bl	800bd5a <__multadd>
 800be4a:	e7eb      	b.n	800be24 <__s2b+0x54>

0800be4c <__hi0bits>:
 800be4c:	0c02      	lsrs	r2, r0, #16
 800be4e:	0412      	lsls	r2, r2, #16
 800be50:	4603      	mov	r3, r0
 800be52:	b9b2      	cbnz	r2, 800be82 <__hi0bits+0x36>
 800be54:	0403      	lsls	r3, r0, #16
 800be56:	2010      	movs	r0, #16
 800be58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be5c:	bf04      	itt	eq
 800be5e:	021b      	lsleq	r3, r3, #8
 800be60:	3008      	addeq	r0, #8
 800be62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be66:	bf04      	itt	eq
 800be68:	011b      	lsleq	r3, r3, #4
 800be6a:	3004      	addeq	r0, #4
 800be6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be70:	bf04      	itt	eq
 800be72:	009b      	lsleq	r3, r3, #2
 800be74:	3002      	addeq	r0, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	db06      	blt.n	800be88 <__hi0bits+0x3c>
 800be7a:	005b      	lsls	r3, r3, #1
 800be7c:	d503      	bpl.n	800be86 <__hi0bits+0x3a>
 800be7e:	3001      	adds	r0, #1
 800be80:	4770      	bx	lr
 800be82:	2000      	movs	r0, #0
 800be84:	e7e8      	b.n	800be58 <__hi0bits+0xc>
 800be86:	2020      	movs	r0, #32
 800be88:	4770      	bx	lr

0800be8a <__lo0bits>:
 800be8a:	6803      	ldr	r3, [r0, #0]
 800be8c:	f013 0207 	ands.w	r2, r3, #7
 800be90:	4601      	mov	r1, r0
 800be92:	d00b      	beq.n	800beac <__lo0bits+0x22>
 800be94:	07da      	lsls	r2, r3, #31
 800be96:	d423      	bmi.n	800bee0 <__lo0bits+0x56>
 800be98:	0798      	lsls	r0, r3, #30
 800be9a:	bf49      	itett	mi
 800be9c:	085b      	lsrmi	r3, r3, #1
 800be9e:	089b      	lsrpl	r3, r3, #2
 800bea0:	2001      	movmi	r0, #1
 800bea2:	600b      	strmi	r3, [r1, #0]
 800bea4:	bf5c      	itt	pl
 800bea6:	600b      	strpl	r3, [r1, #0]
 800bea8:	2002      	movpl	r0, #2
 800beaa:	4770      	bx	lr
 800beac:	b298      	uxth	r0, r3
 800beae:	b9a8      	cbnz	r0, 800bedc <__lo0bits+0x52>
 800beb0:	0c1b      	lsrs	r3, r3, #16
 800beb2:	2010      	movs	r0, #16
 800beb4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800beb8:	bf04      	itt	eq
 800beba:	0a1b      	lsreq	r3, r3, #8
 800bebc:	3008      	addeq	r0, #8
 800bebe:	071a      	lsls	r2, r3, #28
 800bec0:	bf04      	itt	eq
 800bec2:	091b      	lsreq	r3, r3, #4
 800bec4:	3004      	addeq	r0, #4
 800bec6:	079a      	lsls	r2, r3, #30
 800bec8:	bf04      	itt	eq
 800beca:	089b      	lsreq	r3, r3, #2
 800becc:	3002      	addeq	r0, #2
 800bece:	07da      	lsls	r2, r3, #31
 800bed0:	d402      	bmi.n	800bed8 <__lo0bits+0x4e>
 800bed2:	085b      	lsrs	r3, r3, #1
 800bed4:	d006      	beq.n	800bee4 <__lo0bits+0x5a>
 800bed6:	3001      	adds	r0, #1
 800bed8:	600b      	str	r3, [r1, #0]
 800beda:	4770      	bx	lr
 800bedc:	4610      	mov	r0, r2
 800bede:	e7e9      	b.n	800beb4 <__lo0bits+0x2a>
 800bee0:	2000      	movs	r0, #0
 800bee2:	4770      	bx	lr
 800bee4:	2020      	movs	r0, #32
 800bee6:	4770      	bx	lr

0800bee8 <__i2b>:
 800bee8:	b510      	push	{r4, lr}
 800beea:	460c      	mov	r4, r1
 800beec:	2101      	movs	r1, #1
 800beee:	f7ff fee9 	bl	800bcc4 <_Balloc>
 800bef2:	2201      	movs	r2, #1
 800bef4:	6144      	str	r4, [r0, #20]
 800bef6:	6102      	str	r2, [r0, #16]
 800bef8:	bd10      	pop	{r4, pc}

0800befa <__multiply>:
 800befa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befe:	4614      	mov	r4, r2
 800bf00:	690a      	ldr	r2, [r1, #16]
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	bfb8      	it	lt
 800bf08:	460b      	movlt	r3, r1
 800bf0a:	4688      	mov	r8, r1
 800bf0c:	bfbc      	itt	lt
 800bf0e:	46a0      	movlt	r8, r4
 800bf10:	461c      	movlt	r4, r3
 800bf12:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf16:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf1e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf22:	eb07 0609 	add.w	r6, r7, r9
 800bf26:	42b3      	cmp	r3, r6
 800bf28:	bfb8      	it	lt
 800bf2a:	3101      	addlt	r1, #1
 800bf2c:	f7ff feca 	bl	800bcc4 <_Balloc>
 800bf30:	f100 0514 	add.w	r5, r0, #20
 800bf34:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bf38:	462b      	mov	r3, r5
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	4573      	cmp	r3, lr
 800bf3e:	d316      	bcc.n	800bf6e <__multiply+0x74>
 800bf40:	f104 0214 	add.w	r2, r4, #20
 800bf44:	f108 0114 	add.w	r1, r8, #20
 800bf48:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bf4c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	9b00      	ldr	r3, [sp, #0]
 800bf54:	9201      	str	r2, [sp, #4]
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d80c      	bhi.n	800bf74 <__multiply+0x7a>
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	dd03      	ble.n	800bf66 <__multiply+0x6c>
 800bf5e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d05d      	beq.n	800c022 <__multiply+0x128>
 800bf66:	6106      	str	r6, [r0, #16]
 800bf68:	b003      	add	sp, #12
 800bf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6e:	f843 2b04 	str.w	r2, [r3], #4
 800bf72:	e7e3      	b.n	800bf3c <__multiply+0x42>
 800bf74:	f8b2 b000 	ldrh.w	fp, [r2]
 800bf78:	f1bb 0f00 	cmp.w	fp, #0
 800bf7c:	d023      	beq.n	800bfc6 <__multiply+0xcc>
 800bf7e:	4689      	mov	r9, r1
 800bf80:	46ac      	mov	ip, r5
 800bf82:	f04f 0800 	mov.w	r8, #0
 800bf86:	f859 4b04 	ldr.w	r4, [r9], #4
 800bf8a:	f8dc a000 	ldr.w	sl, [ip]
 800bf8e:	b2a3      	uxth	r3, r4
 800bf90:	fa1f fa8a 	uxth.w	sl, sl
 800bf94:	fb0b a303 	mla	r3, fp, r3, sl
 800bf98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bf9c:	f8dc 4000 	ldr.w	r4, [ip]
 800bfa0:	4443      	add	r3, r8
 800bfa2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bfa6:	fb0b 840a 	mla	r4, fp, sl, r8
 800bfaa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bfae:	46e2      	mov	sl, ip
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bfb6:	454f      	cmp	r7, r9
 800bfb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bfbc:	f84a 3b04 	str.w	r3, [sl], #4
 800bfc0:	d82b      	bhi.n	800c01a <__multiply+0x120>
 800bfc2:	f8cc 8004 	str.w	r8, [ip, #4]
 800bfc6:	9b01      	ldr	r3, [sp, #4]
 800bfc8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bfcc:	3204      	adds	r2, #4
 800bfce:	f1ba 0f00 	cmp.w	sl, #0
 800bfd2:	d020      	beq.n	800c016 <__multiply+0x11c>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	4689      	mov	r9, r1
 800bfd8:	46a8      	mov	r8, r5
 800bfda:	f04f 0b00 	mov.w	fp, #0
 800bfde:	f8b9 c000 	ldrh.w	ip, [r9]
 800bfe2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bfe6:	fb0a 440c 	mla	r4, sl, ip, r4
 800bfea:	445c      	add	r4, fp
 800bfec:	46c4      	mov	ip, r8
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bff4:	f84c 3b04 	str.w	r3, [ip], #4
 800bff8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bffc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c000:	0c1b      	lsrs	r3, r3, #16
 800c002:	fb0a b303 	mla	r3, sl, r3, fp
 800c006:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c00a:	454f      	cmp	r7, r9
 800c00c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c010:	d805      	bhi.n	800c01e <__multiply+0x124>
 800c012:	f8c8 3004 	str.w	r3, [r8, #4]
 800c016:	3504      	adds	r5, #4
 800c018:	e79b      	b.n	800bf52 <__multiply+0x58>
 800c01a:	46d4      	mov	ip, sl
 800c01c:	e7b3      	b.n	800bf86 <__multiply+0x8c>
 800c01e:	46e0      	mov	r8, ip
 800c020:	e7dd      	b.n	800bfde <__multiply+0xe4>
 800c022:	3e01      	subs	r6, #1
 800c024:	e799      	b.n	800bf5a <__multiply+0x60>
	...

0800c028 <__pow5mult>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	4615      	mov	r5, r2
 800c02e:	f012 0203 	ands.w	r2, r2, #3
 800c032:	4606      	mov	r6, r0
 800c034:	460f      	mov	r7, r1
 800c036:	d007      	beq.n	800c048 <__pow5mult+0x20>
 800c038:	3a01      	subs	r2, #1
 800c03a:	4c21      	ldr	r4, [pc, #132]	; (800c0c0 <__pow5mult+0x98>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c042:	f7ff fe8a 	bl	800bd5a <__multadd>
 800c046:	4607      	mov	r7, r0
 800c048:	10ad      	asrs	r5, r5, #2
 800c04a:	d035      	beq.n	800c0b8 <__pow5mult+0x90>
 800c04c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c04e:	b93c      	cbnz	r4, 800c060 <__pow5mult+0x38>
 800c050:	2010      	movs	r0, #16
 800c052:	f7ff fe1d 	bl	800bc90 <malloc>
 800c056:	6270      	str	r0, [r6, #36]	; 0x24
 800c058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c05c:	6004      	str	r4, [r0, #0]
 800c05e:	60c4      	str	r4, [r0, #12]
 800c060:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c068:	b94c      	cbnz	r4, 800c07e <__pow5mult+0x56>
 800c06a:	f240 2171 	movw	r1, #625	; 0x271
 800c06e:	4630      	mov	r0, r6
 800c070:	f7ff ff3a 	bl	800bee8 <__i2b>
 800c074:	2300      	movs	r3, #0
 800c076:	f8c8 0008 	str.w	r0, [r8, #8]
 800c07a:	4604      	mov	r4, r0
 800c07c:	6003      	str	r3, [r0, #0]
 800c07e:	f04f 0800 	mov.w	r8, #0
 800c082:	07eb      	lsls	r3, r5, #31
 800c084:	d50a      	bpl.n	800c09c <__pow5mult+0x74>
 800c086:	4639      	mov	r1, r7
 800c088:	4622      	mov	r2, r4
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7ff ff35 	bl	800befa <__multiply>
 800c090:	4639      	mov	r1, r7
 800c092:	4681      	mov	r9, r0
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff fe49 	bl	800bd2c <_Bfree>
 800c09a:	464f      	mov	r7, r9
 800c09c:	106d      	asrs	r5, r5, #1
 800c09e:	d00b      	beq.n	800c0b8 <__pow5mult+0x90>
 800c0a0:	6820      	ldr	r0, [r4, #0]
 800c0a2:	b938      	cbnz	r0, 800c0b4 <__pow5mult+0x8c>
 800c0a4:	4622      	mov	r2, r4
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f7ff ff26 	bl	800befa <__multiply>
 800c0ae:	6020      	str	r0, [r4, #0]
 800c0b0:	f8c0 8000 	str.w	r8, [r0]
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	e7e4      	b.n	800c082 <__pow5mult+0x5a>
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0be:	bf00      	nop
 800c0c0:	0800e640 	.word	0x0800e640

0800c0c4 <__lshift>:
 800c0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	6849      	ldr	r1, [r1, #4]
 800c0d2:	eb0a 0903 	add.w	r9, sl, r3
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	4607      	mov	r7, r0
 800c0da:	4616      	mov	r6, r2
 800c0dc:	f109 0501 	add.w	r5, r9, #1
 800c0e0:	42ab      	cmp	r3, r5
 800c0e2:	db32      	blt.n	800c14a <__lshift+0x86>
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff fded 	bl	800bcc4 <_Balloc>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	f100 0114 	add.w	r1, r0, #20
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4553      	cmp	r3, sl
 800c0f6:	db2b      	blt.n	800c150 <__lshift+0x8c>
 800c0f8:	6920      	ldr	r0, [r4, #16]
 800c0fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0fe:	f104 0314 	add.w	r3, r4, #20
 800c102:	f016 021f 	ands.w	r2, r6, #31
 800c106:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c10a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c10e:	d025      	beq.n	800c15c <__lshift+0x98>
 800c110:	f1c2 0e20 	rsb	lr, r2, #32
 800c114:	2000      	movs	r0, #0
 800c116:	681e      	ldr	r6, [r3, #0]
 800c118:	468a      	mov	sl, r1
 800c11a:	4096      	lsls	r6, r2
 800c11c:	4330      	orrs	r0, r6
 800c11e:	f84a 0b04 	str.w	r0, [sl], #4
 800c122:	f853 0b04 	ldr.w	r0, [r3], #4
 800c126:	459c      	cmp	ip, r3
 800c128:	fa20 f00e 	lsr.w	r0, r0, lr
 800c12c:	d814      	bhi.n	800c158 <__lshift+0x94>
 800c12e:	6048      	str	r0, [r1, #4]
 800c130:	b108      	cbz	r0, 800c136 <__lshift+0x72>
 800c132:	f109 0502 	add.w	r5, r9, #2
 800c136:	3d01      	subs	r5, #1
 800c138:	4638      	mov	r0, r7
 800c13a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c13e:	4621      	mov	r1, r4
 800c140:	f7ff fdf4 	bl	800bd2c <_Bfree>
 800c144:	4640      	mov	r0, r8
 800c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14a:	3101      	adds	r1, #1
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	e7c7      	b.n	800c0e0 <__lshift+0x1c>
 800c150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c154:	3301      	adds	r3, #1
 800c156:	e7cd      	b.n	800c0f4 <__lshift+0x30>
 800c158:	4651      	mov	r1, sl
 800c15a:	e7dc      	b.n	800c116 <__lshift+0x52>
 800c15c:	3904      	subs	r1, #4
 800c15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c162:	f841 2f04 	str.w	r2, [r1, #4]!
 800c166:	459c      	cmp	ip, r3
 800c168:	d8f9      	bhi.n	800c15e <__lshift+0x9a>
 800c16a:	e7e4      	b.n	800c136 <__lshift+0x72>

0800c16c <__mcmp>:
 800c16c:	6903      	ldr	r3, [r0, #16]
 800c16e:	690a      	ldr	r2, [r1, #16]
 800c170:	1a9b      	subs	r3, r3, r2
 800c172:	b530      	push	{r4, r5, lr}
 800c174:	d10c      	bne.n	800c190 <__mcmp+0x24>
 800c176:	0092      	lsls	r2, r2, #2
 800c178:	3014      	adds	r0, #20
 800c17a:	3114      	adds	r1, #20
 800c17c:	1884      	adds	r4, r0, r2
 800c17e:	4411      	add	r1, r2
 800c180:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c184:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c188:	4295      	cmp	r5, r2
 800c18a:	d003      	beq.n	800c194 <__mcmp+0x28>
 800c18c:	d305      	bcc.n	800c19a <__mcmp+0x2e>
 800c18e:	2301      	movs	r3, #1
 800c190:	4618      	mov	r0, r3
 800c192:	bd30      	pop	{r4, r5, pc}
 800c194:	42a0      	cmp	r0, r4
 800c196:	d3f3      	bcc.n	800c180 <__mcmp+0x14>
 800c198:	e7fa      	b.n	800c190 <__mcmp+0x24>
 800c19a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c19e:	e7f7      	b.n	800c190 <__mcmp+0x24>

0800c1a0 <__mdiff>:
 800c1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a4:	460d      	mov	r5, r1
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	4614      	mov	r4, r2
 800c1ae:	f7ff ffdd 	bl	800c16c <__mcmp>
 800c1b2:	1e06      	subs	r6, r0, #0
 800c1b4:	d108      	bne.n	800c1c8 <__mdiff+0x28>
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f7ff fd83 	bl	800bcc4 <_Balloc>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c8:	bfa4      	itt	ge
 800c1ca:	4623      	movge	r3, r4
 800c1cc:	462c      	movge	r4, r5
 800c1ce:	4638      	mov	r0, r7
 800c1d0:	6861      	ldr	r1, [r4, #4]
 800c1d2:	bfa6      	itte	ge
 800c1d4:	461d      	movge	r5, r3
 800c1d6:	2600      	movge	r6, #0
 800c1d8:	2601      	movlt	r6, #1
 800c1da:	f7ff fd73 	bl	800bcc4 <_Balloc>
 800c1de:	692b      	ldr	r3, [r5, #16]
 800c1e0:	60c6      	str	r6, [r0, #12]
 800c1e2:	6926      	ldr	r6, [r4, #16]
 800c1e4:	f105 0914 	add.w	r9, r5, #20
 800c1e8:	f104 0214 	add.w	r2, r4, #20
 800c1ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c1f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c1f4:	f100 0514 	add.w	r5, r0, #20
 800c1f8:	f04f 0e00 	mov.w	lr, #0
 800c1fc:	f852 ab04 	ldr.w	sl, [r2], #4
 800c200:	f859 4b04 	ldr.w	r4, [r9], #4
 800c204:	fa1e f18a 	uxtah	r1, lr, sl
 800c208:	b2a3      	uxth	r3, r4
 800c20a:	1ac9      	subs	r1, r1, r3
 800c20c:	0c23      	lsrs	r3, r4, #16
 800c20e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c212:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c216:	b289      	uxth	r1, r1
 800c218:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c21c:	45c8      	cmp	r8, r9
 800c21e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c222:	4694      	mov	ip, r2
 800c224:	f845 3b04 	str.w	r3, [r5], #4
 800c228:	d8e8      	bhi.n	800c1fc <__mdiff+0x5c>
 800c22a:	45bc      	cmp	ip, r7
 800c22c:	d304      	bcc.n	800c238 <__mdiff+0x98>
 800c22e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c232:	b183      	cbz	r3, 800c256 <__mdiff+0xb6>
 800c234:	6106      	str	r6, [r0, #16]
 800c236:	e7c5      	b.n	800c1c4 <__mdiff+0x24>
 800c238:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c23c:	fa1e f381 	uxtah	r3, lr, r1
 800c240:	141a      	asrs	r2, r3, #16
 800c242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c246:	b29b      	uxth	r3, r3
 800c248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c24c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c250:	f845 3b04 	str.w	r3, [r5], #4
 800c254:	e7e9      	b.n	800c22a <__mdiff+0x8a>
 800c256:	3e01      	subs	r6, #1
 800c258:	e7e9      	b.n	800c22e <__mdiff+0x8e>
	...

0800c25c <__ulp>:
 800c25c:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <__ulp+0x4c>)
 800c25e:	ee10 2a90 	vmov	r2, s1
 800c262:	401a      	ands	r2, r3
 800c264:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	dd04      	ble.n	800c276 <__ulp+0x1a>
 800c26c:	2000      	movs	r0, #0
 800c26e:	4619      	mov	r1, r3
 800c270:	ec41 0b10 	vmov	d0, r0, r1
 800c274:	4770      	bx	lr
 800c276:	425b      	negs	r3, r3
 800c278:	151b      	asrs	r3, r3, #20
 800c27a:	2b13      	cmp	r3, #19
 800c27c:	f04f 0000 	mov.w	r0, #0
 800c280:	f04f 0100 	mov.w	r1, #0
 800c284:	dc04      	bgt.n	800c290 <__ulp+0x34>
 800c286:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c28a:	fa42 f103 	asr.w	r1, r2, r3
 800c28e:	e7ef      	b.n	800c270 <__ulp+0x14>
 800c290:	3b14      	subs	r3, #20
 800c292:	2b1e      	cmp	r3, #30
 800c294:	f04f 0201 	mov.w	r2, #1
 800c298:	bfda      	itte	le
 800c29a:	f1c3 031f 	rsble	r3, r3, #31
 800c29e:	fa02 f303 	lslle.w	r3, r2, r3
 800c2a2:	4613      	movgt	r3, r2
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	e7e3      	b.n	800c270 <__ulp+0x14>
 800c2a8:	7ff00000 	.word	0x7ff00000

0800c2ac <__b2d>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	6905      	ldr	r5, [r0, #16]
 800c2b0:	f100 0714 	add.w	r7, r0, #20
 800c2b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c2b8:	1f2e      	subs	r6, r5, #4
 800c2ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f7ff fdc4 	bl	800be4c <__hi0bits>
 800c2c4:	f1c0 0320 	rsb	r3, r0, #32
 800c2c8:	280a      	cmp	r0, #10
 800c2ca:	600b      	str	r3, [r1, #0]
 800c2cc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c344 <__b2d+0x98>
 800c2d0:	dc14      	bgt.n	800c2fc <__b2d+0x50>
 800c2d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c2d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c2da:	42b7      	cmp	r7, r6
 800c2dc:	ea41 030c 	orr.w	r3, r1, ip
 800c2e0:	bf34      	ite	cc
 800c2e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c2e6:	2100      	movcs	r1, #0
 800c2e8:	3015      	adds	r0, #21
 800c2ea:	fa04 f000 	lsl.w	r0, r4, r0
 800c2ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800c2f2:	ea40 0201 	orr.w	r2, r0, r1
 800c2f6:	ec43 2b10 	vmov	d0, r2, r3
 800c2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2fc:	42b7      	cmp	r7, r6
 800c2fe:	bf3a      	itte	cc
 800c300:	f1a5 0608 	subcc.w	r6, r5, #8
 800c304:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c308:	2100      	movcs	r1, #0
 800c30a:	380b      	subs	r0, #11
 800c30c:	d015      	beq.n	800c33a <__b2d+0x8e>
 800c30e:	4084      	lsls	r4, r0
 800c310:	f1c0 0520 	rsb	r5, r0, #32
 800c314:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c318:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c31c:	42be      	cmp	r6, r7
 800c31e:	fa21 fc05 	lsr.w	ip, r1, r5
 800c322:	ea44 030c 	orr.w	r3, r4, ip
 800c326:	bf8c      	ite	hi
 800c328:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c32c:	2400      	movls	r4, #0
 800c32e:	fa01 f000 	lsl.w	r0, r1, r0
 800c332:	40ec      	lsrs	r4, r5
 800c334:	ea40 0204 	orr.w	r2, r0, r4
 800c338:	e7dd      	b.n	800c2f6 <__b2d+0x4a>
 800c33a:	ea44 030c 	orr.w	r3, r4, ip
 800c33e:	460a      	mov	r2, r1
 800c340:	e7d9      	b.n	800c2f6 <__b2d+0x4a>
 800c342:	bf00      	nop
 800c344:	3ff00000 	.word	0x3ff00000

0800c348 <__d2b>:
 800c348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c34c:	460e      	mov	r6, r1
 800c34e:	2101      	movs	r1, #1
 800c350:	ec59 8b10 	vmov	r8, r9, d0
 800c354:	4615      	mov	r5, r2
 800c356:	f7ff fcb5 	bl	800bcc4 <_Balloc>
 800c35a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c35e:	4607      	mov	r7, r0
 800c360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c364:	bb34      	cbnz	r4, 800c3b4 <__d2b+0x6c>
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	f1b8 0300 	subs.w	r3, r8, #0
 800c36c:	d027      	beq.n	800c3be <__d2b+0x76>
 800c36e:	a802      	add	r0, sp, #8
 800c370:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c374:	f7ff fd89 	bl	800be8a <__lo0bits>
 800c378:	9900      	ldr	r1, [sp, #0]
 800c37a:	b1f0      	cbz	r0, 800c3ba <__d2b+0x72>
 800c37c:	9a01      	ldr	r2, [sp, #4]
 800c37e:	f1c0 0320 	rsb	r3, r0, #32
 800c382:	fa02 f303 	lsl.w	r3, r2, r3
 800c386:	430b      	orrs	r3, r1
 800c388:	40c2      	lsrs	r2, r0
 800c38a:	617b      	str	r3, [r7, #20]
 800c38c:	9201      	str	r2, [sp, #4]
 800c38e:	9b01      	ldr	r3, [sp, #4]
 800c390:	61bb      	str	r3, [r7, #24]
 800c392:	2b00      	cmp	r3, #0
 800c394:	bf14      	ite	ne
 800c396:	2102      	movne	r1, #2
 800c398:	2101      	moveq	r1, #1
 800c39a:	6139      	str	r1, [r7, #16]
 800c39c:	b1c4      	cbz	r4, 800c3d0 <__d2b+0x88>
 800c39e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c3a2:	4404      	add	r4, r0
 800c3a4:	6034      	str	r4, [r6, #0]
 800c3a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3aa:	6028      	str	r0, [r5, #0]
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	b003      	add	sp, #12
 800c3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3b8:	e7d5      	b.n	800c366 <__d2b+0x1e>
 800c3ba:	6179      	str	r1, [r7, #20]
 800c3bc:	e7e7      	b.n	800c38e <__d2b+0x46>
 800c3be:	a801      	add	r0, sp, #4
 800c3c0:	f7ff fd63 	bl	800be8a <__lo0bits>
 800c3c4:	9b01      	ldr	r3, [sp, #4]
 800c3c6:	617b      	str	r3, [r7, #20]
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	6139      	str	r1, [r7, #16]
 800c3cc:	3020      	adds	r0, #32
 800c3ce:	e7e5      	b.n	800c39c <__d2b+0x54>
 800c3d0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c3d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3d8:	6030      	str	r0, [r6, #0]
 800c3da:	6918      	ldr	r0, [r3, #16]
 800c3dc:	f7ff fd36 	bl	800be4c <__hi0bits>
 800c3e0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c3e4:	e7e1      	b.n	800c3aa <__d2b+0x62>

0800c3e6 <__ratio>:
 800c3e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	4688      	mov	r8, r1
 800c3ec:	4669      	mov	r1, sp
 800c3ee:	4681      	mov	r9, r0
 800c3f0:	f7ff ff5c 	bl	800c2ac <__b2d>
 800c3f4:	a901      	add	r1, sp, #4
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	ec57 6b10 	vmov	r6, r7, d0
 800c3fc:	ee10 4a10 	vmov	r4, s0
 800c400:	f7ff ff54 	bl	800c2ac <__b2d>
 800c404:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c408:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c40c:	eba3 0c02 	sub.w	ip, r3, r2
 800c410:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c41a:	ec51 0b10 	vmov	r0, r1, d0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	ee10 aa10 	vmov	sl, s0
 800c424:	bfce      	itee	gt
 800c426:	463a      	movgt	r2, r7
 800c428:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c42c:	460a      	movle	r2, r1
 800c42e:	463d      	mov	r5, r7
 800c430:	468b      	mov	fp, r1
 800c432:	bfcc      	ite	gt
 800c434:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c438:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c43c:	ec45 4b17 	vmov	d7, r4, r5
 800c440:	ec4b ab16 	vmov	d6, sl, fp
 800c444:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800c448:	b003      	add	sp, #12
 800c44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c44e <__copybits>:
 800c44e:	3901      	subs	r1, #1
 800c450:	b510      	push	{r4, lr}
 800c452:	1149      	asrs	r1, r1, #5
 800c454:	6914      	ldr	r4, [r2, #16]
 800c456:	3101      	adds	r1, #1
 800c458:	f102 0314 	add.w	r3, r2, #20
 800c45c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c460:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c464:	42a3      	cmp	r3, r4
 800c466:	4602      	mov	r2, r0
 800c468:	d303      	bcc.n	800c472 <__copybits+0x24>
 800c46a:	2300      	movs	r3, #0
 800c46c:	428a      	cmp	r2, r1
 800c46e:	d305      	bcc.n	800c47c <__copybits+0x2e>
 800c470:	bd10      	pop	{r4, pc}
 800c472:	f853 2b04 	ldr.w	r2, [r3], #4
 800c476:	f840 2b04 	str.w	r2, [r0], #4
 800c47a:	e7f3      	b.n	800c464 <__copybits+0x16>
 800c47c:	f842 3b04 	str.w	r3, [r2], #4
 800c480:	e7f4      	b.n	800c46c <__copybits+0x1e>

0800c482 <__any_on>:
 800c482:	f100 0214 	add.w	r2, r0, #20
 800c486:	6900      	ldr	r0, [r0, #16]
 800c488:	114b      	asrs	r3, r1, #5
 800c48a:	4298      	cmp	r0, r3
 800c48c:	b510      	push	{r4, lr}
 800c48e:	db11      	blt.n	800c4b4 <__any_on+0x32>
 800c490:	dd0a      	ble.n	800c4a8 <__any_on+0x26>
 800c492:	f011 011f 	ands.w	r1, r1, #31
 800c496:	d007      	beq.n	800c4a8 <__any_on+0x26>
 800c498:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c49c:	fa24 f001 	lsr.w	r0, r4, r1
 800c4a0:	fa00 f101 	lsl.w	r1, r0, r1
 800c4a4:	428c      	cmp	r4, r1
 800c4a6:	d10b      	bne.n	800c4c0 <__any_on+0x3e>
 800c4a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d803      	bhi.n	800c4b8 <__any_on+0x36>
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	bd10      	pop	{r4, pc}
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	e7f7      	b.n	800c4a8 <__any_on+0x26>
 800c4b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	d0f5      	beq.n	800c4ac <__any_on+0x2a>
 800c4c0:	2001      	movs	r0, #1
 800c4c2:	e7f6      	b.n	800c4b2 <__any_on+0x30>

0800c4c4 <_calloc_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	fb02 f401 	mul.w	r4, r2, r1
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	f000 f856 	bl	800c57c <_malloc_r>
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	b118      	cbz	r0, 800c4dc <_calloc_r+0x18>
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	f7fc fdb1 	bl	800903e <memset>
 800c4dc:	4628      	mov	r0, r5
 800c4de:	bd38      	pop	{r3, r4, r5, pc}

0800c4e0 <_free_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	d045      	beq.n	800c574 <_free_r+0x94>
 800c4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ec:	1f0c      	subs	r4, r1, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bfb8      	it	lt
 800c4f2:	18e4      	addlt	r4, r4, r3
 800c4f4:	f000 fe30 	bl	800d158 <__malloc_lock>
 800c4f8:	4a1f      	ldr	r2, [pc, #124]	; (800c578 <_free_r+0x98>)
 800c4fa:	6813      	ldr	r3, [r2, #0]
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	b933      	cbnz	r3, 800c50e <_free_r+0x2e>
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	6014      	str	r4, [r2, #0]
 800c504:	4628      	mov	r0, r5
 800c506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c50a:	f000 be26 	b.w	800d15a <__malloc_unlock>
 800c50e:	42a3      	cmp	r3, r4
 800c510:	d90c      	bls.n	800c52c <_free_r+0x4c>
 800c512:	6821      	ldr	r1, [r4, #0]
 800c514:	1862      	adds	r2, r4, r1
 800c516:	4293      	cmp	r3, r2
 800c518:	bf04      	itt	eq
 800c51a:	681a      	ldreq	r2, [r3, #0]
 800c51c:	685b      	ldreq	r3, [r3, #4]
 800c51e:	6063      	str	r3, [r4, #4]
 800c520:	bf04      	itt	eq
 800c522:	1852      	addeq	r2, r2, r1
 800c524:	6022      	streq	r2, [r4, #0]
 800c526:	6004      	str	r4, [r0, #0]
 800c528:	e7ec      	b.n	800c504 <_free_r+0x24>
 800c52a:	4613      	mov	r3, r2
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	b10a      	cbz	r2, 800c534 <_free_r+0x54>
 800c530:	42a2      	cmp	r2, r4
 800c532:	d9fa      	bls.n	800c52a <_free_r+0x4a>
 800c534:	6819      	ldr	r1, [r3, #0]
 800c536:	1858      	adds	r0, r3, r1
 800c538:	42a0      	cmp	r0, r4
 800c53a:	d10b      	bne.n	800c554 <_free_r+0x74>
 800c53c:	6820      	ldr	r0, [r4, #0]
 800c53e:	4401      	add	r1, r0
 800c540:	1858      	adds	r0, r3, r1
 800c542:	4282      	cmp	r2, r0
 800c544:	6019      	str	r1, [r3, #0]
 800c546:	d1dd      	bne.n	800c504 <_free_r+0x24>
 800c548:	6810      	ldr	r0, [r2, #0]
 800c54a:	6852      	ldr	r2, [r2, #4]
 800c54c:	605a      	str	r2, [r3, #4]
 800c54e:	4401      	add	r1, r0
 800c550:	6019      	str	r1, [r3, #0]
 800c552:	e7d7      	b.n	800c504 <_free_r+0x24>
 800c554:	d902      	bls.n	800c55c <_free_r+0x7c>
 800c556:	230c      	movs	r3, #12
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	e7d3      	b.n	800c504 <_free_r+0x24>
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	1821      	adds	r1, r4, r0
 800c560:	428a      	cmp	r2, r1
 800c562:	bf04      	itt	eq
 800c564:	6811      	ldreq	r1, [r2, #0]
 800c566:	6852      	ldreq	r2, [r2, #4]
 800c568:	6062      	str	r2, [r4, #4]
 800c56a:	bf04      	itt	eq
 800c56c:	1809      	addeq	r1, r1, r0
 800c56e:	6021      	streq	r1, [r4, #0]
 800c570:	605c      	str	r4, [r3, #4]
 800c572:	e7c7      	b.n	800c504 <_free_r+0x24>
 800c574:	bd38      	pop	{r3, r4, r5, pc}
 800c576:	bf00      	nop
 800c578:	20000290 	.word	0x20000290

0800c57c <_malloc_r>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	1ccd      	adds	r5, r1, #3
 800c580:	f025 0503 	bic.w	r5, r5, #3
 800c584:	3508      	adds	r5, #8
 800c586:	2d0c      	cmp	r5, #12
 800c588:	bf38      	it	cc
 800c58a:	250c      	movcc	r5, #12
 800c58c:	2d00      	cmp	r5, #0
 800c58e:	4606      	mov	r6, r0
 800c590:	db01      	blt.n	800c596 <_malloc_r+0x1a>
 800c592:	42a9      	cmp	r1, r5
 800c594:	d903      	bls.n	800c59e <_malloc_r+0x22>
 800c596:	230c      	movs	r3, #12
 800c598:	6033      	str	r3, [r6, #0]
 800c59a:	2000      	movs	r0, #0
 800c59c:	bd70      	pop	{r4, r5, r6, pc}
 800c59e:	f000 fddb 	bl	800d158 <__malloc_lock>
 800c5a2:	4a21      	ldr	r2, [pc, #132]	; (800c628 <_malloc_r+0xac>)
 800c5a4:	6814      	ldr	r4, [r2, #0]
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	b991      	cbnz	r1, 800c5d0 <_malloc_r+0x54>
 800c5aa:	4c20      	ldr	r4, [pc, #128]	; (800c62c <_malloc_r+0xb0>)
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	b91b      	cbnz	r3, 800c5b8 <_malloc_r+0x3c>
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f000 fc91 	bl	800ced8 <_sbrk_r>
 800c5b6:	6020      	str	r0, [r4, #0]
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f000 fc8c 	bl	800ced8 <_sbrk_r>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d124      	bne.n	800c60e <_malloc_r+0x92>
 800c5c4:	230c      	movs	r3, #12
 800c5c6:	6033      	str	r3, [r6, #0]
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f000 fdc6 	bl	800d15a <__malloc_unlock>
 800c5ce:	e7e4      	b.n	800c59a <_malloc_r+0x1e>
 800c5d0:	680b      	ldr	r3, [r1, #0]
 800c5d2:	1b5b      	subs	r3, r3, r5
 800c5d4:	d418      	bmi.n	800c608 <_malloc_r+0x8c>
 800c5d6:	2b0b      	cmp	r3, #11
 800c5d8:	d90f      	bls.n	800c5fa <_malloc_r+0x7e>
 800c5da:	600b      	str	r3, [r1, #0]
 800c5dc:	50cd      	str	r5, [r1, r3]
 800c5de:	18cc      	adds	r4, r1, r3
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f000 fdba 	bl	800d15a <__malloc_unlock>
 800c5e6:	f104 000b 	add.w	r0, r4, #11
 800c5ea:	1d23      	adds	r3, r4, #4
 800c5ec:	f020 0007 	bic.w	r0, r0, #7
 800c5f0:	1ac3      	subs	r3, r0, r3
 800c5f2:	d0d3      	beq.n	800c59c <_malloc_r+0x20>
 800c5f4:	425a      	negs	r2, r3
 800c5f6:	50e2      	str	r2, [r4, r3]
 800c5f8:	e7d0      	b.n	800c59c <_malloc_r+0x20>
 800c5fa:	428c      	cmp	r4, r1
 800c5fc:	684b      	ldr	r3, [r1, #4]
 800c5fe:	bf16      	itet	ne
 800c600:	6063      	strne	r3, [r4, #4]
 800c602:	6013      	streq	r3, [r2, #0]
 800c604:	460c      	movne	r4, r1
 800c606:	e7eb      	b.n	800c5e0 <_malloc_r+0x64>
 800c608:	460c      	mov	r4, r1
 800c60a:	6849      	ldr	r1, [r1, #4]
 800c60c:	e7cc      	b.n	800c5a8 <_malloc_r+0x2c>
 800c60e:	1cc4      	adds	r4, r0, #3
 800c610:	f024 0403 	bic.w	r4, r4, #3
 800c614:	42a0      	cmp	r0, r4
 800c616:	d005      	beq.n	800c624 <_malloc_r+0xa8>
 800c618:	1a21      	subs	r1, r4, r0
 800c61a:	4630      	mov	r0, r6
 800c61c:	f000 fc5c 	bl	800ced8 <_sbrk_r>
 800c620:	3001      	adds	r0, #1
 800c622:	d0cf      	beq.n	800c5c4 <_malloc_r+0x48>
 800c624:	6025      	str	r5, [r4, #0]
 800c626:	e7db      	b.n	800c5e0 <_malloc_r+0x64>
 800c628:	20000290 	.word	0x20000290
 800c62c:	20000294 	.word	0x20000294

0800c630 <__ssputs_r>:
 800c630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	688e      	ldr	r6, [r1, #8]
 800c636:	429e      	cmp	r6, r3
 800c638:	4682      	mov	sl, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	4690      	mov	r8, r2
 800c63e:	4699      	mov	r9, r3
 800c640:	d837      	bhi.n	800c6b2 <__ssputs_r+0x82>
 800c642:	898a      	ldrh	r2, [r1, #12]
 800c644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c648:	d031      	beq.n	800c6ae <__ssputs_r+0x7e>
 800c64a:	6825      	ldr	r5, [r4, #0]
 800c64c:	6909      	ldr	r1, [r1, #16]
 800c64e:	1a6f      	subs	r7, r5, r1
 800c650:	6965      	ldr	r5, [r4, #20]
 800c652:	2302      	movs	r3, #2
 800c654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c658:	fb95 f5f3 	sdiv	r5, r5, r3
 800c65c:	f109 0301 	add.w	r3, r9, #1
 800c660:	443b      	add	r3, r7
 800c662:	429d      	cmp	r5, r3
 800c664:	bf38      	it	cc
 800c666:	461d      	movcc	r5, r3
 800c668:	0553      	lsls	r3, r2, #21
 800c66a:	d530      	bpl.n	800c6ce <__ssputs_r+0x9e>
 800c66c:	4629      	mov	r1, r5
 800c66e:	f7ff ff85 	bl	800c57c <_malloc_r>
 800c672:	4606      	mov	r6, r0
 800c674:	b950      	cbnz	r0, 800c68c <__ssputs_r+0x5c>
 800c676:	230c      	movs	r3, #12
 800c678:	f8ca 3000 	str.w	r3, [sl]
 800c67c:	89a3      	ldrh	r3, [r4, #12]
 800c67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c68c:	463a      	mov	r2, r7
 800c68e:	6921      	ldr	r1, [r4, #16]
 800c690:	f7fc fcca 	bl	8009028 <memcpy>
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c69e:	81a3      	strh	r3, [r4, #12]
 800c6a0:	6126      	str	r6, [r4, #16]
 800c6a2:	6165      	str	r5, [r4, #20]
 800c6a4:	443e      	add	r6, r7
 800c6a6:	1bed      	subs	r5, r5, r7
 800c6a8:	6026      	str	r6, [r4, #0]
 800c6aa:	60a5      	str	r5, [r4, #8]
 800c6ac:	464e      	mov	r6, r9
 800c6ae:	454e      	cmp	r6, r9
 800c6b0:	d900      	bls.n	800c6b4 <__ssputs_r+0x84>
 800c6b2:	464e      	mov	r6, r9
 800c6b4:	4632      	mov	r2, r6
 800c6b6:	4641      	mov	r1, r8
 800c6b8:	6820      	ldr	r0, [r4, #0]
 800c6ba:	f000 fd34 	bl	800d126 <memmove>
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	1b9b      	subs	r3, r3, r6
 800c6c2:	60a3      	str	r3, [r4, #8]
 800c6c4:	6823      	ldr	r3, [r4, #0]
 800c6c6:	441e      	add	r6, r3
 800c6c8:	6026      	str	r6, [r4, #0]
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	e7dc      	b.n	800c688 <__ssputs_r+0x58>
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	f000 fd44 	bl	800d15c <_realloc_r>
 800c6d4:	4606      	mov	r6, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d1e2      	bne.n	800c6a0 <__ssputs_r+0x70>
 800c6da:	6921      	ldr	r1, [r4, #16]
 800c6dc:	4650      	mov	r0, sl
 800c6de:	f7ff feff 	bl	800c4e0 <_free_r>
 800c6e2:	e7c8      	b.n	800c676 <__ssputs_r+0x46>

0800c6e4 <_svfiprintf_r>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	461d      	mov	r5, r3
 800c6ea:	898b      	ldrh	r3, [r1, #12]
 800c6ec:	061f      	lsls	r7, r3, #24
 800c6ee:	b09d      	sub	sp, #116	; 0x74
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	4616      	mov	r6, r2
 800c6f6:	d50f      	bpl.n	800c718 <_svfiprintf_r+0x34>
 800c6f8:	690b      	ldr	r3, [r1, #16]
 800c6fa:	b96b      	cbnz	r3, 800c718 <_svfiprintf_r+0x34>
 800c6fc:	2140      	movs	r1, #64	; 0x40
 800c6fe:	f7ff ff3d 	bl	800c57c <_malloc_r>
 800c702:	6020      	str	r0, [r4, #0]
 800c704:	6120      	str	r0, [r4, #16]
 800c706:	b928      	cbnz	r0, 800c714 <_svfiprintf_r+0x30>
 800c708:	230c      	movs	r3, #12
 800c70a:	f8c8 3000 	str.w	r3, [r8]
 800c70e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c712:	e0c8      	b.n	800c8a6 <_svfiprintf_r+0x1c2>
 800c714:	2340      	movs	r3, #64	; 0x40
 800c716:	6163      	str	r3, [r4, #20]
 800c718:	2300      	movs	r3, #0
 800c71a:	9309      	str	r3, [sp, #36]	; 0x24
 800c71c:	2320      	movs	r3, #32
 800c71e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c722:	2330      	movs	r3, #48	; 0x30
 800c724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c728:	9503      	str	r5, [sp, #12]
 800c72a:	f04f 0b01 	mov.w	fp, #1
 800c72e:	4637      	mov	r7, r6
 800c730:	463d      	mov	r5, r7
 800c732:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c736:	b10b      	cbz	r3, 800c73c <_svfiprintf_r+0x58>
 800c738:	2b25      	cmp	r3, #37	; 0x25
 800c73a:	d13e      	bne.n	800c7ba <_svfiprintf_r+0xd6>
 800c73c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c740:	d00b      	beq.n	800c75a <_svfiprintf_r+0x76>
 800c742:	4653      	mov	r3, sl
 800c744:	4632      	mov	r2, r6
 800c746:	4621      	mov	r1, r4
 800c748:	4640      	mov	r0, r8
 800c74a:	f7ff ff71 	bl	800c630 <__ssputs_r>
 800c74e:	3001      	adds	r0, #1
 800c750:	f000 80a4 	beq.w	800c89c <_svfiprintf_r+0x1b8>
 800c754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c756:	4453      	add	r3, sl
 800c758:	9309      	str	r3, [sp, #36]	; 0x24
 800c75a:	783b      	ldrb	r3, [r7, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 809d 	beq.w	800c89c <_svfiprintf_r+0x1b8>
 800c762:	2300      	movs	r3, #0
 800c764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c76c:	9304      	str	r3, [sp, #16]
 800c76e:	9307      	str	r3, [sp, #28]
 800c770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c774:	931a      	str	r3, [sp, #104]	; 0x68
 800c776:	462f      	mov	r7, r5
 800c778:	2205      	movs	r2, #5
 800c77a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c77e:	4850      	ldr	r0, [pc, #320]	; (800c8c0 <_svfiprintf_r+0x1dc>)
 800c780:	f7f3 fd66 	bl	8000250 <memchr>
 800c784:	9b04      	ldr	r3, [sp, #16]
 800c786:	b9d0      	cbnz	r0, 800c7be <_svfiprintf_r+0xda>
 800c788:	06d9      	lsls	r1, r3, #27
 800c78a:	bf44      	itt	mi
 800c78c:	2220      	movmi	r2, #32
 800c78e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c792:	071a      	lsls	r2, r3, #28
 800c794:	bf44      	itt	mi
 800c796:	222b      	movmi	r2, #43	; 0x2b
 800c798:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c79c:	782a      	ldrb	r2, [r5, #0]
 800c79e:	2a2a      	cmp	r2, #42	; 0x2a
 800c7a0:	d015      	beq.n	800c7ce <_svfiprintf_r+0xea>
 800c7a2:	9a07      	ldr	r2, [sp, #28]
 800c7a4:	462f      	mov	r7, r5
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	250a      	movs	r5, #10
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b0:	3b30      	subs	r3, #48	; 0x30
 800c7b2:	2b09      	cmp	r3, #9
 800c7b4:	d94d      	bls.n	800c852 <_svfiprintf_r+0x16e>
 800c7b6:	b1b8      	cbz	r0, 800c7e8 <_svfiprintf_r+0x104>
 800c7b8:	e00f      	b.n	800c7da <_svfiprintf_r+0xf6>
 800c7ba:	462f      	mov	r7, r5
 800c7bc:	e7b8      	b.n	800c730 <_svfiprintf_r+0x4c>
 800c7be:	4a40      	ldr	r2, [pc, #256]	; (800c8c0 <_svfiprintf_r+0x1dc>)
 800c7c0:	1a80      	subs	r0, r0, r2
 800c7c2:	fa0b f000 	lsl.w	r0, fp, r0
 800c7c6:	4318      	orrs	r0, r3
 800c7c8:	9004      	str	r0, [sp, #16]
 800c7ca:	463d      	mov	r5, r7
 800c7cc:	e7d3      	b.n	800c776 <_svfiprintf_r+0x92>
 800c7ce:	9a03      	ldr	r2, [sp, #12]
 800c7d0:	1d11      	adds	r1, r2, #4
 800c7d2:	6812      	ldr	r2, [r2, #0]
 800c7d4:	9103      	str	r1, [sp, #12]
 800c7d6:	2a00      	cmp	r2, #0
 800c7d8:	db01      	blt.n	800c7de <_svfiprintf_r+0xfa>
 800c7da:	9207      	str	r2, [sp, #28]
 800c7dc:	e004      	b.n	800c7e8 <_svfiprintf_r+0x104>
 800c7de:	4252      	negs	r2, r2
 800c7e0:	f043 0302 	orr.w	r3, r3, #2
 800c7e4:	9207      	str	r2, [sp, #28]
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	783b      	ldrb	r3, [r7, #0]
 800c7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c7ec:	d10c      	bne.n	800c808 <_svfiprintf_r+0x124>
 800c7ee:	787b      	ldrb	r3, [r7, #1]
 800c7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f2:	d133      	bne.n	800c85c <_svfiprintf_r+0x178>
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	9203      	str	r2, [sp, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bfb8      	it	lt
 800c800:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c804:	3702      	adds	r7, #2
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	4d2e      	ldr	r5, [pc, #184]	; (800c8c4 <_svfiprintf_r+0x1e0>)
 800c80a:	7839      	ldrb	r1, [r7, #0]
 800c80c:	2203      	movs	r2, #3
 800c80e:	4628      	mov	r0, r5
 800c810:	f7f3 fd1e 	bl	8000250 <memchr>
 800c814:	b138      	cbz	r0, 800c826 <_svfiprintf_r+0x142>
 800c816:	2340      	movs	r3, #64	; 0x40
 800c818:	1b40      	subs	r0, r0, r5
 800c81a:	fa03 f000 	lsl.w	r0, r3, r0
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	4303      	orrs	r3, r0
 800c822:	3701      	adds	r7, #1
 800c824:	9304      	str	r3, [sp, #16]
 800c826:	7839      	ldrb	r1, [r7, #0]
 800c828:	4827      	ldr	r0, [pc, #156]	; (800c8c8 <_svfiprintf_r+0x1e4>)
 800c82a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c82e:	2206      	movs	r2, #6
 800c830:	1c7e      	adds	r6, r7, #1
 800c832:	f7f3 fd0d 	bl	8000250 <memchr>
 800c836:	2800      	cmp	r0, #0
 800c838:	d038      	beq.n	800c8ac <_svfiprintf_r+0x1c8>
 800c83a:	4b24      	ldr	r3, [pc, #144]	; (800c8cc <_svfiprintf_r+0x1e8>)
 800c83c:	bb13      	cbnz	r3, 800c884 <_svfiprintf_r+0x1a0>
 800c83e:	9b03      	ldr	r3, [sp, #12]
 800c840:	3307      	adds	r3, #7
 800c842:	f023 0307 	bic.w	r3, r3, #7
 800c846:	3308      	adds	r3, #8
 800c848:	9303      	str	r3, [sp, #12]
 800c84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c84c:	444b      	add	r3, r9
 800c84e:	9309      	str	r3, [sp, #36]	; 0x24
 800c850:	e76d      	b.n	800c72e <_svfiprintf_r+0x4a>
 800c852:	fb05 3202 	mla	r2, r5, r2, r3
 800c856:	2001      	movs	r0, #1
 800c858:	460f      	mov	r7, r1
 800c85a:	e7a6      	b.n	800c7aa <_svfiprintf_r+0xc6>
 800c85c:	2300      	movs	r3, #0
 800c85e:	3701      	adds	r7, #1
 800c860:	9305      	str	r3, [sp, #20]
 800c862:	4619      	mov	r1, r3
 800c864:	250a      	movs	r5, #10
 800c866:	4638      	mov	r0, r7
 800c868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c86c:	3a30      	subs	r2, #48	; 0x30
 800c86e:	2a09      	cmp	r2, #9
 800c870:	d903      	bls.n	800c87a <_svfiprintf_r+0x196>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d0c8      	beq.n	800c808 <_svfiprintf_r+0x124>
 800c876:	9105      	str	r1, [sp, #20]
 800c878:	e7c6      	b.n	800c808 <_svfiprintf_r+0x124>
 800c87a:	fb05 2101 	mla	r1, r5, r1, r2
 800c87e:	2301      	movs	r3, #1
 800c880:	4607      	mov	r7, r0
 800c882:	e7f0      	b.n	800c866 <_svfiprintf_r+0x182>
 800c884:	ab03      	add	r3, sp, #12
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	4622      	mov	r2, r4
 800c88a:	4b11      	ldr	r3, [pc, #68]	; (800c8d0 <_svfiprintf_r+0x1ec>)
 800c88c:	a904      	add	r1, sp, #16
 800c88e:	4640      	mov	r0, r8
 800c890:	f7fc fc62 	bl	8009158 <_printf_float>
 800c894:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c898:	4681      	mov	r9, r0
 800c89a:	d1d6      	bne.n	800c84a <_svfiprintf_r+0x166>
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	065b      	lsls	r3, r3, #25
 800c8a0:	f53f af35 	bmi.w	800c70e <_svfiprintf_r+0x2a>
 800c8a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8a6:	b01d      	add	sp, #116	; 0x74
 800c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ac:	ab03      	add	r3, sp, #12
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	4b07      	ldr	r3, [pc, #28]	; (800c8d0 <_svfiprintf_r+0x1ec>)
 800c8b4:	a904      	add	r1, sp, #16
 800c8b6:	4640      	mov	r0, r8
 800c8b8:	f7fc fef0 	bl	800969c <_printf_i>
 800c8bc:	e7ea      	b.n	800c894 <_svfiprintf_r+0x1b0>
 800c8be:	bf00      	nop
 800c8c0:	0800e64c 	.word	0x0800e64c
 800c8c4:	0800e652 	.word	0x0800e652
 800c8c8:	0800e656 	.word	0x0800e656
 800c8cc:	08009159 	.word	0x08009159
 800c8d0:	0800c631 	.word	0x0800c631

0800c8d4 <_sungetc_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	1c4b      	adds	r3, r1, #1
 800c8d8:	4614      	mov	r4, r2
 800c8da:	d103      	bne.n	800c8e4 <_sungetc_r+0x10>
 800c8dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	8993      	ldrh	r3, [r2, #12]
 800c8e6:	f023 0320 	bic.w	r3, r3, #32
 800c8ea:	8193      	strh	r3, [r2, #12]
 800c8ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8ee:	6852      	ldr	r2, [r2, #4]
 800c8f0:	b2cd      	uxtb	r5, r1
 800c8f2:	b18b      	cbz	r3, 800c918 <_sungetc_r+0x44>
 800c8f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	dd08      	ble.n	800c90c <_sungetc_r+0x38>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	1e5a      	subs	r2, r3, #1
 800c8fe:	6022      	str	r2, [r4, #0]
 800c900:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c904:	6863      	ldr	r3, [r4, #4]
 800c906:	3301      	adds	r3, #1
 800c908:	6063      	str	r3, [r4, #4]
 800c90a:	e7e9      	b.n	800c8e0 <_sungetc_r+0xc>
 800c90c:	4621      	mov	r1, r4
 800c90e:	f000 fbc3 	bl	800d098 <__submore>
 800c912:	2800      	cmp	r0, #0
 800c914:	d0f1      	beq.n	800c8fa <_sungetc_r+0x26>
 800c916:	e7e1      	b.n	800c8dc <_sungetc_r+0x8>
 800c918:	6921      	ldr	r1, [r4, #16]
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	b151      	cbz	r1, 800c934 <_sungetc_r+0x60>
 800c91e:	4299      	cmp	r1, r3
 800c920:	d208      	bcs.n	800c934 <_sungetc_r+0x60>
 800c922:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c926:	42a9      	cmp	r1, r5
 800c928:	d104      	bne.n	800c934 <_sungetc_r+0x60>
 800c92a:	3b01      	subs	r3, #1
 800c92c:	3201      	adds	r2, #1
 800c92e:	6023      	str	r3, [r4, #0]
 800c930:	6062      	str	r2, [r4, #4]
 800c932:	e7d5      	b.n	800c8e0 <_sungetc_r+0xc>
 800c934:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c93c:	6363      	str	r3, [r4, #52]	; 0x34
 800c93e:	2303      	movs	r3, #3
 800c940:	63a3      	str	r3, [r4, #56]	; 0x38
 800c942:	4623      	mov	r3, r4
 800c944:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	2301      	movs	r3, #1
 800c94c:	e7dc      	b.n	800c908 <_sungetc_r+0x34>

0800c94e <__ssrefill_r>:
 800c94e:	b510      	push	{r4, lr}
 800c950:	460c      	mov	r4, r1
 800c952:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c954:	b169      	cbz	r1, 800c972 <__ssrefill_r+0x24>
 800c956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c95a:	4299      	cmp	r1, r3
 800c95c:	d001      	beq.n	800c962 <__ssrefill_r+0x14>
 800c95e:	f7ff fdbf 	bl	800c4e0 <_free_r>
 800c962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c964:	6063      	str	r3, [r4, #4]
 800c966:	2000      	movs	r0, #0
 800c968:	6360      	str	r0, [r4, #52]	; 0x34
 800c96a:	b113      	cbz	r3, 800c972 <__ssrefill_r+0x24>
 800c96c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	bd10      	pop	{r4, pc}
 800c972:	6923      	ldr	r3, [r4, #16]
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	2300      	movs	r3, #0
 800c978:	6063      	str	r3, [r4, #4]
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	f043 0320 	orr.w	r3, r3, #32
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c986:	e7f3      	b.n	800c970 <__ssrefill_r+0x22>

0800c988 <__ssvfiscanf_r>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c990:	460c      	mov	r4, r1
 800c992:	2100      	movs	r1, #0
 800c994:	9144      	str	r1, [sp, #272]	; 0x110
 800c996:	9145      	str	r1, [sp, #276]	; 0x114
 800c998:	499f      	ldr	r1, [pc, #636]	; (800cc18 <__ssvfiscanf_r+0x290>)
 800c99a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c99c:	f10d 0804 	add.w	r8, sp, #4
 800c9a0:	499e      	ldr	r1, [pc, #632]	; (800cc1c <__ssvfiscanf_r+0x294>)
 800c9a2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800cc20 <__ssvfiscanf_r+0x298>
 800c9a6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	4692      	mov	sl, r2
 800c9ae:	91a1      	str	r1, [sp, #644]	; 0x284
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	270a      	movs	r7, #10
 800c9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 812a 	beq.w	800cc12 <__ssvfiscanf_r+0x28a>
 800c9be:	4655      	mov	r5, sl
 800c9c0:	f7ff f948 	bl	800bc54 <__locale_ctype_ptr>
 800c9c4:	f815 bb01 	ldrb.w	fp, [r5], #1
 800c9c8:	4458      	add	r0, fp
 800c9ca:	7843      	ldrb	r3, [r0, #1]
 800c9cc:	f013 0308 	ands.w	r3, r3, #8
 800c9d0:	d01c      	beq.n	800ca0c <__ssvfiscanf_r+0x84>
 800c9d2:	6863      	ldr	r3, [r4, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	dd12      	ble.n	800c9fe <__ssvfiscanf_r+0x76>
 800c9d8:	f7ff f93c 	bl	800bc54 <__locale_ctype_ptr>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	781a      	ldrb	r2, [r3, #0]
 800c9e0:	4410      	add	r0, r2
 800c9e2:	7842      	ldrb	r2, [r0, #1]
 800c9e4:	0712      	lsls	r2, r2, #28
 800c9e6:	d401      	bmi.n	800c9ec <__ssvfiscanf_r+0x64>
 800c9e8:	46aa      	mov	sl, r5
 800c9ea:	e7e3      	b.n	800c9b4 <__ssvfiscanf_r+0x2c>
 800c9ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c9ee:	3201      	adds	r2, #1
 800c9f0:	9245      	str	r2, [sp, #276]	; 0x114
 800c9f2:	6862      	ldr	r2, [r4, #4]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	3a01      	subs	r2, #1
 800c9f8:	6062      	str	r2, [r4, #4]
 800c9fa:	6023      	str	r3, [r4, #0]
 800c9fc:	e7e9      	b.n	800c9d2 <__ssvfiscanf_r+0x4a>
 800c9fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca00:	4621      	mov	r1, r4
 800ca02:	4630      	mov	r0, r6
 800ca04:	4798      	blx	r3
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d0e6      	beq.n	800c9d8 <__ssvfiscanf_r+0x50>
 800ca0a:	e7ed      	b.n	800c9e8 <__ssvfiscanf_r+0x60>
 800ca0c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ca10:	f040 8082 	bne.w	800cb18 <__ssvfiscanf_r+0x190>
 800ca14:	9343      	str	r3, [sp, #268]	; 0x10c
 800ca16:	9341      	str	r3, [sp, #260]	; 0x104
 800ca18:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ca1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca1e:	d103      	bne.n	800ca28 <__ssvfiscanf_r+0xa0>
 800ca20:	2310      	movs	r3, #16
 800ca22:	9341      	str	r3, [sp, #260]	; 0x104
 800ca24:	f10a 0502 	add.w	r5, sl, #2
 800ca28:	46aa      	mov	sl, r5
 800ca2a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ca2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ca32:	2a09      	cmp	r2, #9
 800ca34:	d922      	bls.n	800ca7c <__ssvfiscanf_r+0xf4>
 800ca36:	2203      	movs	r2, #3
 800ca38:	4879      	ldr	r0, [pc, #484]	; (800cc20 <__ssvfiscanf_r+0x298>)
 800ca3a:	f7f3 fc09 	bl	8000250 <memchr>
 800ca3e:	b138      	cbz	r0, 800ca50 <__ssvfiscanf_r+0xc8>
 800ca40:	eba0 0309 	sub.w	r3, r0, r9
 800ca44:	2001      	movs	r0, #1
 800ca46:	4098      	lsls	r0, r3
 800ca48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca4a:	4318      	orrs	r0, r3
 800ca4c:	9041      	str	r0, [sp, #260]	; 0x104
 800ca4e:	46aa      	mov	sl, r5
 800ca50:	f89a 3000 	ldrb.w	r3, [sl]
 800ca54:	2b67      	cmp	r3, #103	; 0x67
 800ca56:	f10a 0501 	add.w	r5, sl, #1
 800ca5a:	d82b      	bhi.n	800cab4 <__ssvfiscanf_r+0x12c>
 800ca5c:	2b65      	cmp	r3, #101	; 0x65
 800ca5e:	f080 809f 	bcs.w	800cba0 <__ssvfiscanf_r+0x218>
 800ca62:	2b47      	cmp	r3, #71	; 0x47
 800ca64:	d810      	bhi.n	800ca88 <__ssvfiscanf_r+0x100>
 800ca66:	2b45      	cmp	r3, #69	; 0x45
 800ca68:	f080 809a 	bcs.w	800cba0 <__ssvfiscanf_r+0x218>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d06c      	beq.n	800cb4a <__ssvfiscanf_r+0x1c2>
 800ca70:	2b25      	cmp	r3, #37	; 0x25
 800ca72:	d051      	beq.n	800cb18 <__ssvfiscanf_r+0x190>
 800ca74:	2303      	movs	r3, #3
 800ca76:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca78:	9742      	str	r7, [sp, #264]	; 0x108
 800ca7a:	e027      	b.n	800cacc <__ssvfiscanf_r+0x144>
 800ca7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca7e:	fb07 1303 	mla	r3, r7, r3, r1
 800ca82:	3b30      	subs	r3, #48	; 0x30
 800ca84:	9343      	str	r3, [sp, #268]	; 0x10c
 800ca86:	e7cf      	b.n	800ca28 <__ssvfiscanf_r+0xa0>
 800ca88:	2b5b      	cmp	r3, #91	; 0x5b
 800ca8a:	d06a      	beq.n	800cb62 <__ssvfiscanf_r+0x1da>
 800ca8c:	d80c      	bhi.n	800caa8 <__ssvfiscanf_r+0x120>
 800ca8e:	2b58      	cmp	r3, #88	; 0x58
 800ca90:	d1f0      	bne.n	800ca74 <__ssvfiscanf_r+0xec>
 800ca92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca98:	9241      	str	r2, [sp, #260]	; 0x104
 800ca9a:	2210      	movs	r2, #16
 800ca9c:	9242      	str	r2, [sp, #264]	; 0x108
 800ca9e:	2b6e      	cmp	r3, #110	; 0x6e
 800caa0:	bf8c      	ite	hi
 800caa2:	2304      	movhi	r3, #4
 800caa4:	2303      	movls	r3, #3
 800caa6:	e010      	b.n	800caca <__ssvfiscanf_r+0x142>
 800caa8:	2b63      	cmp	r3, #99	; 0x63
 800caaa:	d065      	beq.n	800cb78 <__ssvfiscanf_r+0x1f0>
 800caac:	2b64      	cmp	r3, #100	; 0x64
 800caae:	d1e1      	bne.n	800ca74 <__ssvfiscanf_r+0xec>
 800cab0:	9742      	str	r7, [sp, #264]	; 0x108
 800cab2:	e7f4      	b.n	800ca9e <__ssvfiscanf_r+0x116>
 800cab4:	2b70      	cmp	r3, #112	; 0x70
 800cab6:	d04b      	beq.n	800cb50 <__ssvfiscanf_r+0x1c8>
 800cab8:	d826      	bhi.n	800cb08 <__ssvfiscanf_r+0x180>
 800caba:	2b6e      	cmp	r3, #110	; 0x6e
 800cabc:	d062      	beq.n	800cb84 <__ssvfiscanf_r+0x1fc>
 800cabe:	d84c      	bhi.n	800cb5a <__ssvfiscanf_r+0x1d2>
 800cac0:	2b69      	cmp	r3, #105	; 0x69
 800cac2:	d1d7      	bne.n	800ca74 <__ssvfiscanf_r+0xec>
 800cac4:	2300      	movs	r3, #0
 800cac6:	9342      	str	r3, [sp, #264]	; 0x108
 800cac8:	2303      	movs	r3, #3
 800caca:	9347      	str	r3, [sp, #284]	; 0x11c
 800cacc:	6863      	ldr	r3, [r4, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dd68      	ble.n	800cba4 <__ssvfiscanf_r+0x21c>
 800cad2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cad4:	0659      	lsls	r1, r3, #25
 800cad6:	d407      	bmi.n	800cae8 <__ssvfiscanf_r+0x160>
 800cad8:	f7ff f8bc 	bl	800bc54 <__locale_ctype_ptr>
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	781a      	ldrb	r2, [r3, #0]
 800cae0:	4410      	add	r0, r2
 800cae2:	7842      	ldrb	r2, [r0, #1]
 800cae4:	0712      	lsls	r2, r2, #28
 800cae6:	d464      	bmi.n	800cbb2 <__ssvfiscanf_r+0x22a>
 800cae8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800caea:	2b02      	cmp	r3, #2
 800caec:	dc73      	bgt.n	800cbd6 <__ssvfiscanf_r+0x24e>
 800caee:	466b      	mov	r3, sp
 800caf0:	4622      	mov	r2, r4
 800caf2:	a941      	add	r1, sp, #260	; 0x104
 800caf4:	4630      	mov	r0, r6
 800caf6:	f000 f897 	bl	800cc28 <_scanf_chars>
 800cafa:	2801      	cmp	r0, #1
 800cafc:	f000 8089 	beq.w	800cc12 <__ssvfiscanf_r+0x28a>
 800cb00:	2802      	cmp	r0, #2
 800cb02:	f47f af71 	bne.w	800c9e8 <__ssvfiscanf_r+0x60>
 800cb06:	e01d      	b.n	800cb44 <__ssvfiscanf_r+0x1bc>
 800cb08:	2b75      	cmp	r3, #117	; 0x75
 800cb0a:	d0d1      	beq.n	800cab0 <__ssvfiscanf_r+0x128>
 800cb0c:	2b78      	cmp	r3, #120	; 0x78
 800cb0e:	d0c0      	beq.n	800ca92 <__ssvfiscanf_r+0x10a>
 800cb10:	2b73      	cmp	r3, #115	; 0x73
 800cb12:	d1af      	bne.n	800ca74 <__ssvfiscanf_r+0xec>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e7d8      	b.n	800caca <__ssvfiscanf_r+0x142>
 800cb18:	6863      	ldr	r3, [r4, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	dd0c      	ble.n	800cb38 <__ssvfiscanf_r+0x1b0>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	781a      	ldrb	r2, [r3, #0]
 800cb22:	455a      	cmp	r2, fp
 800cb24:	d175      	bne.n	800cc12 <__ssvfiscanf_r+0x28a>
 800cb26:	3301      	adds	r3, #1
 800cb28:	6862      	ldr	r2, [r4, #4]
 800cb2a:	6023      	str	r3, [r4, #0]
 800cb2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cb2e:	3a01      	subs	r2, #1
 800cb30:	3301      	adds	r3, #1
 800cb32:	6062      	str	r2, [r4, #4]
 800cb34:	9345      	str	r3, [sp, #276]	; 0x114
 800cb36:	e757      	b.n	800c9e8 <__ssvfiscanf_r+0x60>
 800cb38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	4798      	blx	r3
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d0ec      	beq.n	800cb1e <__ssvfiscanf_r+0x196>
 800cb44:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d159      	bne.n	800cbfe <__ssvfiscanf_r+0x276>
 800cb4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb4e:	e05c      	b.n	800cc0a <__ssvfiscanf_r+0x282>
 800cb50:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cb52:	f042 0220 	orr.w	r2, r2, #32
 800cb56:	9241      	str	r2, [sp, #260]	; 0x104
 800cb58:	e79b      	b.n	800ca92 <__ssvfiscanf_r+0x10a>
 800cb5a:	2308      	movs	r3, #8
 800cb5c:	9342      	str	r3, [sp, #264]	; 0x108
 800cb5e:	2304      	movs	r3, #4
 800cb60:	e7b3      	b.n	800caca <__ssvfiscanf_r+0x142>
 800cb62:	4629      	mov	r1, r5
 800cb64:	4640      	mov	r0, r8
 800cb66:	f000 f9c7 	bl	800cef8 <__sccl>
 800cb6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb70:	9341      	str	r3, [sp, #260]	; 0x104
 800cb72:	4605      	mov	r5, r0
 800cb74:	2301      	movs	r3, #1
 800cb76:	e7a8      	b.n	800caca <__ssvfiscanf_r+0x142>
 800cb78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb7e:	9341      	str	r3, [sp, #260]	; 0x104
 800cb80:	2300      	movs	r3, #0
 800cb82:	e7a2      	b.n	800caca <__ssvfiscanf_r+0x142>
 800cb84:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cb86:	06c3      	lsls	r3, r0, #27
 800cb88:	f53f af2e 	bmi.w	800c9e8 <__ssvfiscanf_r+0x60>
 800cb8c:	9b00      	ldr	r3, [sp, #0]
 800cb8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb90:	1d19      	adds	r1, r3, #4
 800cb92:	9100      	str	r1, [sp, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	07c0      	lsls	r0, r0, #31
 800cb98:	bf4c      	ite	mi
 800cb9a:	801a      	strhmi	r2, [r3, #0]
 800cb9c:	601a      	strpl	r2, [r3, #0]
 800cb9e:	e723      	b.n	800c9e8 <__ssvfiscanf_r+0x60>
 800cba0:	2305      	movs	r3, #5
 800cba2:	e792      	b.n	800caca <__ssvfiscanf_r+0x142>
 800cba4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cba6:	4621      	mov	r1, r4
 800cba8:	4630      	mov	r0, r6
 800cbaa:	4798      	blx	r3
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d090      	beq.n	800cad2 <__ssvfiscanf_r+0x14a>
 800cbb0:	e7c8      	b.n	800cb44 <__ssvfiscanf_r+0x1bc>
 800cbb2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbb4:	3201      	adds	r2, #1
 800cbb6:	9245      	str	r2, [sp, #276]	; 0x114
 800cbb8:	6862      	ldr	r2, [r4, #4]
 800cbba:	3a01      	subs	r2, #1
 800cbbc:	2a00      	cmp	r2, #0
 800cbbe:	6062      	str	r2, [r4, #4]
 800cbc0:	dd02      	ble.n	800cbc8 <__ssvfiscanf_r+0x240>
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	e787      	b.n	800cad8 <__ssvfiscanf_r+0x150>
 800cbc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4630      	mov	r0, r6
 800cbce:	4798      	blx	r3
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d081      	beq.n	800cad8 <__ssvfiscanf_r+0x150>
 800cbd4:	e7b6      	b.n	800cb44 <__ssvfiscanf_r+0x1bc>
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	dc06      	bgt.n	800cbe8 <__ssvfiscanf_r+0x260>
 800cbda:	466b      	mov	r3, sp
 800cbdc:	4622      	mov	r2, r4
 800cbde:	a941      	add	r1, sp, #260	; 0x104
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f000 f885 	bl	800ccf0 <_scanf_i>
 800cbe6:	e788      	b.n	800cafa <__ssvfiscanf_r+0x172>
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	; (800cc24 <__ssvfiscanf_r+0x29c>)
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f43f aefc 	beq.w	800c9e8 <__ssvfiscanf_r+0x60>
 800cbf0:	466b      	mov	r3, sp
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	a941      	add	r1, sp, #260	; 0x104
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7fc fe62 	bl	80098c0 <_scanf_float>
 800cbfc:	e77d      	b.n	800cafa <__ssvfiscanf_r+0x172>
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cc04:	bf18      	it	ne
 800cc06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800cc0a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc12:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc14:	e7f9      	b.n	800cc0a <__ssvfiscanf_r+0x282>
 800cc16:	bf00      	nop
 800cc18:	0800c8d5 	.word	0x0800c8d5
 800cc1c:	0800c94f 	.word	0x0800c94f
 800cc20:	0800e652 	.word	0x0800e652
 800cc24:	080098c1 	.word	0x080098c1

0800cc28 <_scanf_chars>:
 800cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2c:	4615      	mov	r5, r2
 800cc2e:	688a      	ldr	r2, [r1, #8]
 800cc30:	4680      	mov	r8, r0
 800cc32:	460c      	mov	r4, r1
 800cc34:	b932      	cbnz	r2, 800cc44 <_scanf_chars+0x1c>
 800cc36:	698a      	ldr	r2, [r1, #24]
 800cc38:	2a00      	cmp	r2, #0
 800cc3a:	bf14      	ite	ne
 800cc3c:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800cc40:	2201      	moveq	r2, #1
 800cc42:	608a      	str	r2, [r1, #8]
 800cc44:	6822      	ldr	r2, [r4, #0]
 800cc46:	06d1      	lsls	r1, r2, #27
 800cc48:	bf5f      	itttt	pl
 800cc4a:	681a      	ldrpl	r2, [r3, #0]
 800cc4c:	1d11      	addpl	r1, r2, #4
 800cc4e:	6019      	strpl	r1, [r3, #0]
 800cc50:	6817      	ldrpl	r7, [r2, #0]
 800cc52:	2600      	movs	r6, #0
 800cc54:	69a3      	ldr	r3, [r4, #24]
 800cc56:	b1db      	cbz	r3, 800cc90 <_scanf_chars+0x68>
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d107      	bne.n	800cc6c <_scanf_chars+0x44>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	6962      	ldr	r2, [r4, #20]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	5cd3      	ldrb	r3, [r2, r3]
 800cc64:	b9a3      	cbnz	r3, 800cc90 <_scanf_chars+0x68>
 800cc66:	2e00      	cmp	r6, #0
 800cc68:	d132      	bne.n	800ccd0 <_scanf_chars+0xa8>
 800cc6a:	e006      	b.n	800cc7a <_scanf_chars+0x52>
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d007      	beq.n	800cc80 <_scanf_chars+0x58>
 800cc70:	2e00      	cmp	r6, #0
 800cc72:	d12d      	bne.n	800ccd0 <_scanf_chars+0xa8>
 800cc74:	69a3      	ldr	r3, [r4, #24]
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d12a      	bne.n	800ccd0 <_scanf_chars+0xa8>
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc80:	f7fe ffe8 	bl	800bc54 <__locale_ctype_ptr>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	4418      	add	r0, r3
 800cc8a:	7843      	ldrb	r3, [r0, #1]
 800cc8c:	071b      	lsls	r3, r3, #28
 800cc8e:	d4ef      	bmi.n	800cc70 <_scanf_chars+0x48>
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	06da      	lsls	r2, r3, #27
 800cc94:	bf5e      	ittt	pl
 800cc96:	682b      	ldrpl	r3, [r5, #0]
 800cc98:	781b      	ldrbpl	r3, [r3, #0]
 800cc9a:	703b      	strbpl	r3, [r7, #0]
 800cc9c:	682a      	ldr	r2, [r5, #0]
 800cc9e:	686b      	ldr	r3, [r5, #4]
 800cca0:	f102 0201 	add.w	r2, r2, #1
 800cca4:	602a      	str	r2, [r5, #0]
 800cca6:	68a2      	ldr	r2, [r4, #8]
 800cca8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ccac:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ccb0:	606b      	str	r3, [r5, #4]
 800ccb2:	f106 0601 	add.w	r6, r6, #1
 800ccb6:	bf58      	it	pl
 800ccb8:	3701      	addpl	r7, #1
 800ccba:	60a2      	str	r2, [r4, #8]
 800ccbc:	b142      	cbz	r2, 800ccd0 <_scanf_chars+0xa8>
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	dcc8      	bgt.n	800cc54 <_scanf_chars+0x2c>
 800ccc2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	4640      	mov	r0, r8
 800ccca:	4798      	blx	r3
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d0c1      	beq.n	800cc54 <_scanf_chars+0x2c>
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	f013 0310 	ands.w	r3, r3, #16
 800ccd6:	d105      	bne.n	800cce4 <_scanf_chars+0xbc>
 800ccd8:	68e2      	ldr	r2, [r4, #12]
 800ccda:	3201      	adds	r2, #1
 800ccdc:	60e2      	str	r2, [r4, #12]
 800ccde:	69a2      	ldr	r2, [r4, #24]
 800cce0:	b102      	cbz	r2, 800cce4 <_scanf_chars+0xbc>
 800cce2:	703b      	strb	r3, [r7, #0]
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	441e      	add	r6, r3
 800cce8:	6126      	str	r6, [r4, #16]
 800ccea:	2000      	movs	r0, #0
 800ccec:	e7c6      	b.n	800cc7c <_scanf_chars+0x54>
	...

0800ccf0 <_scanf_i>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	469a      	mov	sl, r3
 800ccf6:	4b74      	ldr	r3, [pc, #464]	; (800cec8 <_scanf_i+0x1d8>)
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	4683      	mov	fp, r0
 800ccfc:	4616      	mov	r6, r2
 800ccfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd02:	b087      	sub	sp, #28
 800cd04:	ab03      	add	r3, sp, #12
 800cd06:	68a7      	ldr	r7, [r4, #8]
 800cd08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cd0c:	4b6f      	ldr	r3, [pc, #444]	; (800cecc <_scanf_i+0x1dc>)
 800cd0e:	69a1      	ldr	r1, [r4, #24]
 800cd10:	4a6f      	ldr	r2, [pc, #444]	; (800ced0 <_scanf_i+0x1e0>)
 800cd12:	2903      	cmp	r1, #3
 800cd14:	bf08      	it	eq
 800cd16:	461a      	moveq	r2, r3
 800cd18:	1e7b      	subs	r3, r7, #1
 800cd1a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800cd1e:	bf84      	itt	hi
 800cd20:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cd24:	60a3      	strhi	r3, [r4, #8]
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	9200      	str	r2, [sp, #0]
 800cd2a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cd2e:	bf88      	it	hi
 800cd30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cd34:	f104 091c 	add.w	r9, r4, #28
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	bf8c      	ite	hi
 800cd3c:	197f      	addhi	r7, r7, r5
 800cd3e:	2700      	movls	r7, #0
 800cd40:	464b      	mov	r3, r9
 800cd42:	f04f 0800 	mov.w	r8, #0
 800cd46:	9301      	str	r3, [sp, #4]
 800cd48:	6831      	ldr	r1, [r6, #0]
 800cd4a:	ab03      	add	r3, sp, #12
 800cd4c:	2202      	movs	r2, #2
 800cd4e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cd52:	7809      	ldrb	r1, [r1, #0]
 800cd54:	f7f3 fa7c 	bl	8000250 <memchr>
 800cd58:	9b01      	ldr	r3, [sp, #4]
 800cd5a:	b330      	cbz	r0, 800cdaa <_scanf_i+0xba>
 800cd5c:	f1b8 0f01 	cmp.w	r8, #1
 800cd60:	d15a      	bne.n	800ce18 <_scanf_i+0x128>
 800cd62:	6862      	ldr	r2, [r4, #4]
 800cd64:	b92a      	cbnz	r2, 800cd72 <_scanf_i+0x82>
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	2108      	movs	r1, #8
 800cd6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd6e:	6061      	str	r1, [r4, #4]
 800cd70:	6022      	str	r2, [r4, #0]
 800cd72:	6822      	ldr	r2, [r4, #0]
 800cd74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cd78:	6022      	str	r2, [r4, #0]
 800cd7a:	68a2      	ldr	r2, [r4, #8]
 800cd7c:	1e51      	subs	r1, r2, #1
 800cd7e:	60a1      	str	r1, [r4, #8]
 800cd80:	b19a      	cbz	r2, 800cdaa <_scanf_i+0xba>
 800cd82:	6832      	ldr	r2, [r6, #0]
 800cd84:	1c51      	adds	r1, r2, #1
 800cd86:	6031      	str	r1, [r6, #0]
 800cd88:	7812      	ldrb	r2, [r2, #0]
 800cd8a:	701a      	strb	r2, [r3, #0]
 800cd8c:	1c5d      	adds	r5, r3, #1
 800cd8e:	6873      	ldr	r3, [r6, #4]
 800cd90:	3b01      	subs	r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	6073      	str	r3, [r6, #4]
 800cd96:	dc07      	bgt.n	800cda8 <_scanf_i+0xb8>
 800cd98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd9c:	4631      	mov	r1, r6
 800cd9e:	4658      	mov	r0, fp
 800cda0:	4798      	blx	r3
 800cda2:	2800      	cmp	r0, #0
 800cda4:	f040 8086 	bne.w	800ceb4 <_scanf_i+0x1c4>
 800cda8:	462b      	mov	r3, r5
 800cdaa:	f108 0801 	add.w	r8, r8, #1
 800cdae:	f1b8 0f03 	cmp.w	r8, #3
 800cdb2:	d1c8      	bne.n	800cd46 <_scanf_i+0x56>
 800cdb4:	6862      	ldr	r2, [r4, #4]
 800cdb6:	b90a      	cbnz	r2, 800cdbc <_scanf_i+0xcc>
 800cdb8:	220a      	movs	r2, #10
 800cdba:	6062      	str	r2, [r4, #4]
 800cdbc:	6862      	ldr	r2, [r4, #4]
 800cdbe:	4945      	ldr	r1, [pc, #276]	; (800ced4 <_scanf_i+0x1e4>)
 800cdc0:	6960      	ldr	r0, [r4, #20]
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	1a89      	subs	r1, r1, r2
 800cdc6:	f000 f897 	bl	800cef8 <__sccl>
 800cdca:	9b01      	ldr	r3, [sp, #4]
 800cdcc:	f04f 0800 	mov.w	r8, #0
 800cdd0:	461d      	mov	r5, r3
 800cdd2:	68a3      	ldr	r3, [r4, #8]
 800cdd4:	6822      	ldr	r2, [r4, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d03a      	beq.n	800ce50 <_scanf_i+0x160>
 800cdda:	6831      	ldr	r1, [r6, #0]
 800cddc:	6960      	ldr	r0, [r4, #20]
 800cdde:	f891 c000 	ldrb.w	ip, [r1]
 800cde2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d032      	beq.n	800ce50 <_scanf_i+0x160>
 800cdea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cdee:	d121      	bne.n	800ce34 <_scanf_i+0x144>
 800cdf0:	0510      	lsls	r0, r2, #20
 800cdf2:	d51f      	bpl.n	800ce34 <_scanf_i+0x144>
 800cdf4:	f108 0801 	add.w	r8, r8, #1
 800cdf8:	b117      	cbz	r7, 800ce00 <_scanf_i+0x110>
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	3f01      	subs	r7, #1
 800cdfe:	60a3      	str	r3, [r4, #8]
 800ce00:	6873      	ldr	r3, [r6, #4]
 800ce02:	3b01      	subs	r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	6073      	str	r3, [r6, #4]
 800ce08:	dd1b      	ble.n	800ce42 <_scanf_i+0x152>
 800ce0a:	6833      	ldr	r3, [r6, #0]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	6033      	str	r3, [r6, #0]
 800ce10:	68a3      	ldr	r3, [r4, #8]
 800ce12:	3b01      	subs	r3, #1
 800ce14:	60a3      	str	r3, [r4, #8]
 800ce16:	e7dc      	b.n	800cdd2 <_scanf_i+0xe2>
 800ce18:	f1b8 0f02 	cmp.w	r8, #2
 800ce1c:	d1ad      	bne.n	800cd7a <_scanf_i+0x8a>
 800ce1e:	6822      	ldr	r2, [r4, #0]
 800ce20:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ce24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ce28:	d1bf      	bne.n	800cdaa <_scanf_i+0xba>
 800ce2a:	2110      	movs	r1, #16
 800ce2c:	6061      	str	r1, [r4, #4]
 800ce2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce32:	e7a1      	b.n	800cd78 <_scanf_i+0x88>
 800ce34:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ce38:	6022      	str	r2, [r4, #0]
 800ce3a:	780b      	ldrb	r3, [r1, #0]
 800ce3c:	702b      	strb	r3, [r5, #0]
 800ce3e:	3501      	adds	r5, #1
 800ce40:	e7de      	b.n	800ce00 <_scanf_i+0x110>
 800ce42:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce46:	4631      	mov	r1, r6
 800ce48:	4658      	mov	r0, fp
 800ce4a:	4798      	blx	r3
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d0df      	beq.n	800ce10 <_scanf_i+0x120>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	05d9      	lsls	r1, r3, #23
 800ce54:	d50c      	bpl.n	800ce70 <_scanf_i+0x180>
 800ce56:	454d      	cmp	r5, r9
 800ce58:	d908      	bls.n	800ce6c <_scanf_i+0x17c>
 800ce5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ce5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce62:	4632      	mov	r2, r6
 800ce64:	4658      	mov	r0, fp
 800ce66:	4798      	blx	r3
 800ce68:	1e6f      	subs	r7, r5, #1
 800ce6a:	463d      	mov	r5, r7
 800ce6c:	454d      	cmp	r5, r9
 800ce6e:	d029      	beq.n	800cec4 <_scanf_i+0x1d4>
 800ce70:	6822      	ldr	r2, [r4, #0]
 800ce72:	f012 0210 	ands.w	r2, r2, #16
 800ce76:	d113      	bne.n	800cea0 <_scanf_i+0x1b0>
 800ce78:	702a      	strb	r2, [r5, #0]
 800ce7a:	6863      	ldr	r3, [r4, #4]
 800ce7c:	9e00      	ldr	r6, [sp, #0]
 800ce7e:	4649      	mov	r1, r9
 800ce80:	4658      	mov	r0, fp
 800ce82:	47b0      	blx	r6
 800ce84:	f8da 3000 	ldr.w	r3, [sl]
 800ce88:	6821      	ldr	r1, [r4, #0]
 800ce8a:	1d1a      	adds	r2, r3, #4
 800ce8c:	f8ca 2000 	str.w	r2, [sl]
 800ce90:	f011 0f20 	tst.w	r1, #32
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	d010      	beq.n	800ceba <_scanf_i+0x1ca>
 800ce98:	6018      	str	r0, [r3, #0]
 800ce9a:	68e3      	ldr	r3, [r4, #12]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	60e3      	str	r3, [r4, #12]
 800cea0:	eba5 0509 	sub.w	r5, r5, r9
 800cea4:	44a8      	add	r8, r5
 800cea6:	6925      	ldr	r5, [r4, #16]
 800cea8:	4445      	add	r5, r8
 800ceaa:	6125      	str	r5, [r4, #16]
 800ceac:	2000      	movs	r0, #0
 800ceae:	b007      	add	sp, #28
 800ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb4:	f04f 0800 	mov.w	r8, #0
 800ceb8:	e7ca      	b.n	800ce50 <_scanf_i+0x160>
 800ceba:	07ca      	lsls	r2, r1, #31
 800cebc:	bf4c      	ite	mi
 800cebe:	8018      	strhmi	r0, [r3, #0]
 800cec0:	6018      	strpl	r0, [r3, #0]
 800cec2:	e7ea      	b.n	800ce9a <_scanf_i+0x1aa>
 800cec4:	2001      	movs	r0, #1
 800cec6:	e7f2      	b.n	800ceae <_scanf_i+0x1be>
 800cec8:	0800e48c 	.word	0x0800e48c
 800cecc:	0800aa29 	.word	0x0800aa29
 800ced0:	0800d075 	.word	0x0800d075
 800ced4:	0800e66d 	.word	0x0800e66d

0800ced8 <_sbrk_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4c06      	ldr	r4, [pc, #24]	; (800cef4 <_sbrk_r+0x1c>)
 800cedc:	2300      	movs	r3, #0
 800cede:	4605      	mov	r5, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	f7f6 fe2a 	bl	8003b3c <_sbrk>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_sbrk_r+0x1a>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_sbrk_r+0x1a>
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	200008f4 	.word	0x200008f4

0800cef8 <__sccl>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	780b      	ldrb	r3, [r1, #0]
 800cefc:	2b5e      	cmp	r3, #94	; 0x5e
 800cefe:	bf13      	iteet	ne
 800cf00:	1c4a      	addne	r2, r1, #1
 800cf02:	1c8a      	addeq	r2, r1, #2
 800cf04:	784b      	ldrbeq	r3, [r1, #1]
 800cf06:	2100      	movne	r1, #0
 800cf08:	bf08      	it	eq
 800cf0a:	2101      	moveq	r1, #1
 800cf0c:	1e44      	subs	r4, r0, #1
 800cf0e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800cf12:	f804 1f01 	strb.w	r1, [r4, #1]!
 800cf16:	42ac      	cmp	r4, r5
 800cf18:	d1fb      	bne.n	800cf12 <__sccl+0x1a>
 800cf1a:	b913      	cbnz	r3, 800cf22 <__sccl+0x2a>
 800cf1c:	3a01      	subs	r2, #1
 800cf1e:	4610      	mov	r0, r2
 800cf20:	bd70      	pop	{r4, r5, r6, pc}
 800cf22:	f081 0401 	eor.w	r4, r1, #1
 800cf26:	54c4      	strb	r4, [r0, r3]
 800cf28:	1c51      	adds	r1, r2, #1
 800cf2a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800cf2e:	2d2d      	cmp	r5, #45	; 0x2d
 800cf30:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800cf34:	460a      	mov	r2, r1
 800cf36:	d006      	beq.n	800cf46 <__sccl+0x4e>
 800cf38:	2d5d      	cmp	r5, #93	; 0x5d
 800cf3a:	d0f0      	beq.n	800cf1e <__sccl+0x26>
 800cf3c:	b90d      	cbnz	r5, 800cf42 <__sccl+0x4a>
 800cf3e:	4632      	mov	r2, r6
 800cf40:	e7ed      	b.n	800cf1e <__sccl+0x26>
 800cf42:	462b      	mov	r3, r5
 800cf44:	e7ef      	b.n	800cf26 <__sccl+0x2e>
 800cf46:	780e      	ldrb	r6, [r1, #0]
 800cf48:	2e5d      	cmp	r6, #93	; 0x5d
 800cf4a:	d0fa      	beq.n	800cf42 <__sccl+0x4a>
 800cf4c:	42b3      	cmp	r3, r6
 800cf4e:	dcf8      	bgt.n	800cf42 <__sccl+0x4a>
 800cf50:	3301      	adds	r3, #1
 800cf52:	429e      	cmp	r6, r3
 800cf54:	54c4      	strb	r4, [r0, r3]
 800cf56:	dcfb      	bgt.n	800cf50 <__sccl+0x58>
 800cf58:	3102      	adds	r1, #2
 800cf5a:	e7e6      	b.n	800cf2a <__sccl+0x32>

0800cf5c <strncmp>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	b16a      	cbz	r2, 800cf7c <strncmp+0x20>
 800cf60:	3901      	subs	r1, #1
 800cf62:	1884      	adds	r4, r0, r2
 800cf64:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cf68:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d103      	bne.n	800cf78 <strncmp+0x1c>
 800cf70:	42a0      	cmp	r0, r4
 800cf72:	d001      	beq.n	800cf78 <strncmp+0x1c>
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1f5      	bne.n	800cf64 <strncmp+0x8>
 800cf78:	1a98      	subs	r0, r3, r2
 800cf7a:	bd10      	pop	{r4, pc}
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	e7fc      	b.n	800cf7a <strncmp+0x1e>

0800cf80 <_strtoul_l.isra.0>:
 800cf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf84:	4680      	mov	r8, r0
 800cf86:	4689      	mov	r9, r1
 800cf88:	4692      	mov	sl, r2
 800cf8a:	461e      	mov	r6, r3
 800cf8c:	460f      	mov	r7, r1
 800cf8e:	463d      	mov	r5, r7
 800cf90:	9808      	ldr	r0, [sp, #32]
 800cf92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf96:	f7fe fe59 	bl	800bc4c <__locale_ctype_ptr_l>
 800cf9a:	4420      	add	r0, r4
 800cf9c:	7843      	ldrb	r3, [r0, #1]
 800cf9e:	f013 0308 	ands.w	r3, r3, #8
 800cfa2:	d130      	bne.n	800d006 <_strtoul_l.isra.0+0x86>
 800cfa4:	2c2d      	cmp	r4, #45	; 0x2d
 800cfa6:	d130      	bne.n	800d00a <_strtoul_l.isra.0+0x8a>
 800cfa8:	787c      	ldrb	r4, [r7, #1]
 800cfaa:	1cbd      	adds	r5, r7, #2
 800cfac:	2101      	movs	r1, #1
 800cfae:	2e00      	cmp	r6, #0
 800cfb0:	d05c      	beq.n	800d06c <_strtoul_l.isra.0+0xec>
 800cfb2:	2e10      	cmp	r6, #16
 800cfb4:	d109      	bne.n	800cfca <_strtoul_l.isra.0+0x4a>
 800cfb6:	2c30      	cmp	r4, #48	; 0x30
 800cfb8:	d107      	bne.n	800cfca <_strtoul_l.isra.0+0x4a>
 800cfba:	782b      	ldrb	r3, [r5, #0]
 800cfbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfc0:	2b58      	cmp	r3, #88	; 0x58
 800cfc2:	d14e      	bne.n	800d062 <_strtoul_l.isra.0+0xe2>
 800cfc4:	786c      	ldrb	r4, [r5, #1]
 800cfc6:	2610      	movs	r6, #16
 800cfc8:	3502      	adds	r5, #2
 800cfca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfce:	2300      	movs	r3, #0
 800cfd0:	fbb2 f2f6 	udiv	r2, r2, r6
 800cfd4:	fb06 fc02 	mul.w	ip, r6, r2
 800cfd8:	ea6f 0c0c 	mvn.w	ip, ip
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800cfe2:	2f09      	cmp	r7, #9
 800cfe4:	d817      	bhi.n	800d016 <_strtoul_l.isra.0+0x96>
 800cfe6:	463c      	mov	r4, r7
 800cfe8:	42a6      	cmp	r6, r4
 800cfea:	dd23      	ble.n	800d034 <_strtoul_l.isra.0+0xb4>
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	db1e      	blt.n	800d02e <_strtoul_l.isra.0+0xae>
 800cff0:	4282      	cmp	r2, r0
 800cff2:	d31c      	bcc.n	800d02e <_strtoul_l.isra.0+0xae>
 800cff4:	d101      	bne.n	800cffa <_strtoul_l.isra.0+0x7a>
 800cff6:	45a4      	cmp	ip, r4
 800cff8:	db19      	blt.n	800d02e <_strtoul_l.isra.0+0xae>
 800cffa:	fb00 4006 	mla	r0, r0, r6, r4
 800cffe:	2301      	movs	r3, #1
 800d000:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d004:	e7eb      	b.n	800cfde <_strtoul_l.isra.0+0x5e>
 800d006:	462f      	mov	r7, r5
 800d008:	e7c1      	b.n	800cf8e <_strtoul_l.isra.0+0xe>
 800d00a:	2c2b      	cmp	r4, #43	; 0x2b
 800d00c:	bf04      	itt	eq
 800d00e:	1cbd      	addeq	r5, r7, #2
 800d010:	787c      	ldrbeq	r4, [r7, #1]
 800d012:	4619      	mov	r1, r3
 800d014:	e7cb      	b.n	800cfae <_strtoul_l.isra.0+0x2e>
 800d016:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d01a:	2f19      	cmp	r7, #25
 800d01c:	d801      	bhi.n	800d022 <_strtoul_l.isra.0+0xa2>
 800d01e:	3c37      	subs	r4, #55	; 0x37
 800d020:	e7e2      	b.n	800cfe8 <_strtoul_l.isra.0+0x68>
 800d022:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d026:	2f19      	cmp	r7, #25
 800d028:	d804      	bhi.n	800d034 <_strtoul_l.isra.0+0xb4>
 800d02a:	3c57      	subs	r4, #87	; 0x57
 800d02c:	e7dc      	b.n	800cfe8 <_strtoul_l.isra.0+0x68>
 800d02e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d032:	e7e5      	b.n	800d000 <_strtoul_l.isra.0+0x80>
 800d034:	2b00      	cmp	r3, #0
 800d036:	da09      	bge.n	800d04c <_strtoul_l.isra.0+0xcc>
 800d038:	2322      	movs	r3, #34	; 0x22
 800d03a:	f8c8 3000 	str.w	r3, [r8]
 800d03e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d042:	f1ba 0f00 	cmp.w	sl, #0
 800d046:	d107      	bne.n	800d058 <_strtoul_l.isra.0+0xd8>
 800d048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04c:	b101      	cbz	r1, 800d050 <_strtoul_l.isra.0+0xd0>
 800d04e:	4240      	negs	r0, r0
 800d050:	f1ba 0f00 	cmp.w	sl, #0
 800d054:	d0f8      	beq.n	800d048 <_strtoul_l.isra.0+0xc8>
 800d056:	b10b      	cbz	r3, 800d05c <_strtoul_l.isra.0+0xdc>
 800d058:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800d05c:	f8ca 9000 	str.w	r9, [sl]
 800d060:	e7f2      	b.n	800d048 <_strtoul_l.isra.0+0xc8>
 800d062:	2430      	movs	r4, #48	; 0x30
 800d064:	2e00      	cmp	r6, #0
 800d066:	d1b0      	bne.n	800cfca <_strtoul_l.isra.0+0x4a>
 800d068:	2608      	movs	r6, #8
 800d06a:	e7ae      	b.n	800cfca <_strtoul_l.isra.0+0x4a>
 800d06c:	2c30      	cmp	r4, #48	; 0x30
 800d06e:	d0a4      	beq.n	800cfba <_strtoul_l.isra.0+0x3a>
 800d070:	260a      	movs	r6, #10
 800d072:	e7aa      	b.n	800cfca <_strtoul_l.isra.0+0x4a>

0800d074 <_strtoul_r>:
 800d074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d076:	4c06      	ldr	r4, [pc, #24]	; (800d090 <_strtoul_r+0x1c>)
 800d078:	4d06      	ldr	r5, [pc, #24]	; (800d094 <_strtoul_r+0x20>)
 800d07a:	6824      	ldr	r4, [r4, #0]
 800d07c:	6a24      	ldr	r4, [r4, #32]
 800d07e:	2c00      	cmp	r4, #0
 800d080:	bf08      	it	eq
 800d082:	462c      	moveq	r4, r5
 800d084:	9400      	str	r4, [sp, #0]
 800d086:	f7ff ff7b 	bl	800cf80 <_strtoul_l.isra.0>
 800d08a:	b003      	add	sp, #12
 800d08c:	bd30      	pop	{r4, r5, pc}
 800d08e:	bf00      	nop
 800d090:	20000014 	.word	0x20000014
 800d094:	20000078 	.word	0x20000078

0800d098 <__submore>:
 800d098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09c:	460c      	mov	r4, r1
 800d09e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d0a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0a4:	4299      	cmp	r1, r3
 800d0a6:	d11d      	bne.n	800d0e4 <__submore+0x4c>
 800d0a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d0ac:	f7ff fa66 	bl	800c57c <_malloc_r>
 800d0b0:	b918      	cbnz	r0, 800d0ba <__submore+0x22>
 800d0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0be:	63a3      	str	r3, [r4, #56]	; 0x38
 800d0c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d0c4:	6360      	str	r0, [r4, #52]	; 0x34
 800d0c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d0ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d0ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d0d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d0d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d0da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d0de:	6020      	str	r0, [r4, #0]
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e7e8      	b.n	800d0b6 <__submore+0x1e>
 800d0e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d0e6:	0077      	lsls	r7, r6, #1
 800d0e8:	463a      	mov	r2, r7
 800d0ea:	f000 f837 	bl	800d15c <_realloc_r>
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d0de      	beq.n	800d0b2 <__submore+0x1a>
 800d0f4:	eb00 0806 	add.w	r8, r0, r6
 800d0f8:	4601      	mov	r1, r0
 800d0fa:	4632      	mov	r2, r6
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	f7fb ff93 	bl	8009028 <memcpy>
 800d102:	f8c4 8000 	str.w	r8, [r4]
 800d106:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d10a:	e7e9      	b.n	800d0e0 <__submore+0x48>

0800d10c <__ascii_wctomb>:
 800d10c:	b149      	cbz	r1, 800d122 <__ascii_wctomb+0x16>
 800d10e:	2aff      	cmp	r2, #255	; 0xff
 800d110:	bf85      	ittet	hi
 800d112:	238a      	movhi	r3, #138	; 0x8a
 800d114:	6003      	strhi	r3, [r0, #0]
 800d116:	700a      	strbls	r2, [r1, #0]
 800d118:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d11c:	bf98      	it	ls
 800d11e:	2001      	movls	r0, #1
 800d120:	4770      	bx	lr
 800d122:	4608      	mov	r0, r1
 800d124:	4770      	bx	lr

0800d126 <memmove>:
 800d126:	4288      	cmp	r0, r1
 800d128:	b510      	push	{r4, lr}
 800d12a:	eb01 0302 	add.w	r3, r1, r2
 800d12e:	d807      	bhi.n	800d140 <memmove+0x1a>
 800d130:	1e42      	subs	r2, r0, #1
 800d132:	4299      	cmp	r1, r3
 800d134:	d00a      	beq.n	800d14c <memmove+0x26>
 800d136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d13a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d13e:	e7f8      	b.n	800d132 <memmove+0xc>
 800d140:	4283      	cmp	r3, r0
 800d142:	d9f5      	bls.n	800d130 <memmove+0xa>
 800d144:	1881      	adds	r1, r0, r2
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	42d3      	cmn	r3, r2
 800d14a:	d100      	bne.n	800d14e <memmove+0x28>
 800d14c:	bd10      	pop	{r4, pc}
 800d14e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d152:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d156:	e7f7      	b.n	800d148 <memmove+0x22>

0800d158 <__malloc_lock>:
 800d158:	4770      	bx	lr

0800d15a <__malloc_unlock>:
 800d15a:	4770      	bx	lr

0800d15c <_realloc_r>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	4607      	mov	r7, r0
 800d160:	4614      	mov	r4, r2
 800d162:	460e      	mov	r6, r1
 800d164:	b921      	cbnz	r1, 800d170 <_realloc_r+0x14>
 800d166:	4611      	mov	r1, r2
 800d168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d16c:	f7ff ba06 	b.w	800c57c <_malloc_r>
 800d170:	b922      	cbnz	r2, 800d17c <_realloc_r+0x20>
 800d172:	f7ff f9b5 	bl	800c4e0 <_free_r>
 800d176:	4625      	mov	r5, r4
 800d178:	4628      	mov	r0, r5
 800d17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d17c:	f000 f814 	bl	800d1a8 <_malloc_usable_size_r>
 800d180:	42a0      	cmp	r0, r4
 800d182:	d20f      	bcs.n	800d1a4 <_realloc_r+0x48>
 800d184:	4621      	mov	r1, r4
 800d186:	4638      	mov	r0, r7
 800d188:	f7ff f9f8 	bl	800c57c <_malloc_r>
 800d18c:	4605      	mov	r5, r0
 800d18e:	2800      	cmp	r0, #0
 800d190:	d0f2      	beq.n	800d178 <_realloc_r+0x1c>
 800d192:	4631      	mov	r1, r6
 800d194:	4622      	mov	r2, r4
 800d196:	f7fb ff47 	bl	8009028 <memcpy>
 800d19a:	4631      	mov	r1, r6
 800d19c:	4638      	mov	r0, r7
 800d19e:	f7ff f99f 	bl	800c4e0 <_free_r>
 800d1a2:	e7e9      	b.n	800d178 <_realloc_r+0x1c>
 800d1a4:	4635      	mov	r5, r6
 800d1a6:	e7e7      	b.n	800d178 <_realloc_r+0x1c>

0800d1a8 <_malloc_usable_size_r>:
 800d1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ac:	1f18      	subs	r0, r3, #4
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfbc      	itt	lt
 800d1b2:	580b      	ldrlt	r3, [r1, r0]
 800d1b4:	18c0      	addlt	r0, r0, r3
 800d1b6:	4770      	bx	lr

0800d1b8 <atan>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	eeb0 7b40 	vmov.f64	d7, d0
 800d1be:	ee17 5a90 	vmov	r5, s15
 800d1c2:	4b73      	ldr	r3, [pc, #460]	; (800d390 <atan+0x1d8>)
 800d1c4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d1c8:	429c      	cmp	r4, r3
 800d1ca:	dd13      	ble.n	800d1f4 <atan+0x3c>
 800d1cc:	4b71      	ldr	r3, [pc, #452]	; (800d394 <atan+0x1dc>)
 800d1ce:	429c      	cmp	r4, r3
 800d1d0:	dc03      	bgt.n	800d1da <atan+0x22>
 800d1d2:	d107      	bne.n	800d1e4 <atan+0x2c>
 800d1d4:	ee10 3a10 	vmov	r3, s0
 800d1d8:	b123      	cbz	r3, 800d1e4 <atan+0x2c>
 800d1da:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d1de:	eeb0 0b47 	vmov.f64	d0, d7
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800d320 <atan+0x168>
 800d1e8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800d328 <atan+0x170>
 800d1ec:	2d00      	cmp	r5, #0
 800d1ee:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800d1f2:	e7f4      	b.n	800d1de <atan+0x26>
 800d1f4:	4b68      	ldr	r3, [pc, #416]	; (800d398 <atan+0x1e0>)
 800d1f6:	429c      	cmp	r4, r3
 800d1f8:	dc11      	bgt.n	800d21e <atan+0x66>
 800d1fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d1fe:	429c      	cmp	r4, r3
 800d200:	dc0a      	bgt.n	800d218 <atan+0x60>
 800d202:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800d206:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800d330 <atan+0x178>
 800d20a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800d20e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d216:	dce2      	bgt.n	800d1de <atan+0x26>
 800d218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d21c:	e013      	b.n	800d246 <atan+0x8e>
 800d21e:	f000 f8c5 	bl	800d3ac <fabs>
 800d222:	4b5e      	ldr	r3, [pc, #376]	; (800d39c <atan+0x1e4>)
 800d224:	429c      	cmp	r4, r3
 800d226:	dc4f      	bgt.n	800d2c8 <atan+0x110>
 800d228:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d22c:	429c      	cmp	r4, r3
 800d22e:	dc41      	bgt.n	800d2b4 <atan+0xfc>
 800d230:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800d234:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d238:	2300      	movs	r3, #0
 800d23a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800d23e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d242:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d246:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d338 <atan+0x180>
 800d24a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800d24e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800d252:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800d340 <atan+0x188>
 800d256:	eea5 3b06 	vfma.f64	d3, d5, d6
 800d25a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800d348 <atan+0x190>
 800d25e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d262:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800d350 <atan+0x198>
 800d266:	eea6 3b05 	vfma.f64	d3, d6, d5
 800d26a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800d358 <atan+0x1a0>
 800d26e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d272:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800d360 <atan+0x1a8>
 800d276:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800d368 <atan+0x1b0>
 800d27a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800d27e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d370 <atan+0x1b8>
 800d282:	eea5 2b06 	vfma.f64	d2, d5, d6
 800d286:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d378 <atan+0x1c0>
 800d28a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800d28e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800d380 <atan+0x1c8>
 800d292:	eea6 2b05 	vfma.f64	d2, d6, d5
 800d296:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d388 <atan+0x1d0>
 800d29a:	1c5a      	adds	r2, r3, #1
 800d29c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800d2a0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800d2a4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800d2a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d2ac:	d121      	bne.n	800d2f2 <atan+0x13a>
 800d2ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2b2:	e794      	b.n	800d1de <atan+0x26>
 800d2b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d2be:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d2c2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d2c6:	e7be      	b.n	800d246 <atan+0x8e>
 800d2c8:	4b35      	ldr	r3, [pc, #212]	; (800d3a0 <atan+0x1e8>)
 800d2ca:	429c      	cmp	r4, r3
 800d2cc:	dc0b      	bgt.n	800d2e6 <atan+0x12e>
 800d2ce:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d2d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d2d6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800d2da:	eea0 6b07 	vfma.f64	d6, d0, d7
 800d2de:	2302      	movs	r3, #2
 800d2e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d2e4:	e7af      	b.n	800d246 <atan+0x8e>
 800d2e6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d2f0:	e7a9      	b.n	800d246 <atan+0x8e>
 800d2f2:	4a2c      	ldr	r2, [pc, #176]	; (800d3a4 <atan+0x1ec>)
 800d2f4:	492c      	ldr	r1, [pc, #176]	; (800d3a8 <atan+0x1f0>)
 800d2f6:	00db      	lsls	r3, r3, #3
 800d2f8:	441a      	add	r2, r3
 800d2fa:	440b      	add	r3, r1
 800d2fc:	ed93 5b00 	vldr	d5, [r3]
 800d300:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d304:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d308:	ed92 6b00 	vldr	d6, [r2]
 800d30c:	2d00      	cmp	r5, #0
 800d30e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d312:	bfb8      	it	lt
 800d314:	eeb1 7b47 	vneglt.f64	d7, d7
 800d318:	e761      	b.n	800d1de <atan+0x26>
 800d31a:	bf00      	nop
 800d31c:	f3af 8000 	nop.w
 800d320:	54442d18 	.word	0x54442d18
 800d324:	bff921fb 	.word	0xbff921fb
 800d328:	54442d18 	.word	0x54442d18
 800d32c:	3ff921fb 	.word	0x3ff921fb
 800d330:	8800759c 	.word	0x8800759c
 800d334:	7e37e43c 	.word	0x7e37e43c
 800d338:	e322da11 	.word	0xe322da11
 800d33c:	3f90ad3a 	.word	0x3f90ad3a
 800d340:	24760deb 	.word	0x24760deb
 800d344:	3fa97b4b 	.word	0x3fa97b4b
 800d348:	a0d03d51 	.word	0xa0d03d51
 800d34c:	3fb10d66 	.word	0x3fb10d66
 800d350:	c54c206e 	.word	0xc54c206e
 800d354:	3fb745cd 	.word	0x3fb745cd
 800d358:	920083ff 	.word	0x920083ff
 800d35c:	3fc24924 	.word	0x3fc24924
 800d360:	5555550d 	.word	0x5555550d
 800d364:	3fd55555 	.word	0x3fd55555
 800d368:	52defd9a 	.word	0x52defd9a
 800d36c:	bfadde2d 	.word	0xbfadde2d
 800d370:	2c6a6c2f 	.word	0x2c6a6c2f
 800d374:	bfa2b444 	.word	0xbfa2b444
 800d378:	af749a6d 	.word	0xaf749a6d
 800d37c:	bfb3b0f2 	.word	0xbfb3b0f2
 800d380:	fe231671 	.word	0xfe231671
 800d384:	bfbc71c6 	.word	0xbfbc71c6
 800d388:	9998ebc4 	.word	0x9998ebc4
 800d38c:	bfc99999 	.word	0xbfc99999
 800d390:	440fffff 	.word	0x440fffff
 800d394:	7ff00000 	.word	0x7ff00000
 800d398:	3fdbffff 	.word	0x3fdbffff
 800d39c:	3ff2ffff 	.word	0x3ff2ffff
 800d3a0:	40037fff 	.word	0x40037fff
 800d3a4:	0800e7e0 	.word	0x0800e7e0
 800d3a8:	0800e800 	.word	0x0800e800

0800d3ac <fabs>:
 800d3ac:	ec51 0b10 	vmov	r0, r1, d0
 800d3b0:	ee10 2a10 	vmov	r2, s0
 800d3b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3b8:	ec43 2b10 	vmov	d0, r2, r3
 800d3bc:	4770      	bx	lr
	...

0800d3c0 <fmod>:
 800d3c0:	b500      	push	{lr}
 800d3c2:	ed2d 8b04 	vpush	{d8-d9}
 800d3c6:	eeb0 8b40 	vmov.f64	d8, d0
 800d3ca:	eeb0 9b41 	vmov.f64	d9, d1
 800d3ce:	b08b      	sub	sp, #44	; 0x2c
 800d3d0:	f000 f9c6 	bl	800d760 <__ieee754_fmod>
 800d3d4:	4b22      	ldr	r3, [pc, #136]	; (800d460 <fmod+0xa0>)
 800d3d6:	f993 3000 	ldrsb.w	r3, [r3]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	d029      	beq.n	800d432 <fmod+0x72>
 800d3de:	eeb4 9b49 	vcmp.f64	d9, d9
 800d3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e6:	d624      	bvs.n	800d432 <fmod+0x72>
 800d3e8:	eeb4 8b48 	vcmp.f64	d8, d8
 800d3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f0:	d61f      	bvs.n	800d432 <fmod+0x72>
 800d3f2:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800d458 <fmod+0x98>
 800d3f6:	eeb4 9b47 	vcmp.f64	d9, d7
 800d3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fe:	d118      	bne.n	800d432 <fmod+0x72>
 800d400:	2201      	movs	r2, #1
 800d402:	9200      	str	r2, [sp, #0]
 800d404:	4a17      	ldr	r2, [pc, #92]	; (800d464 <fmod+0xa4>)
 800d406:	9201      	str	r2, [sp, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d40e:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d412:	9208      	str	r2, [sp, #32]
 800d414:	b993      	cbnz	r3, 800d43c <fmod+0x7c>
 800d416:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d41a:	4668      	mov	r0, sp
 800d41c:	f000 fe49 	bl	800e0b2 <matherr>
 800d420:	b190      	cbz	r0, 800d448 <fmod+0x88>
 800d422:	9b08      	ldr	r3, [sp, #32]
 800d424:	b11b      	cbz	r3, 800d42e <fmod+0x6e>
 800d426:	f7fb fdd5 	bl	8008fd4 <__errno>
 800d42a:	9b08      	ldr	r3, [sp, #32]
 800d42c:	6003      	str	r3, [r0, #0]
 800d42e:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d432:	b00b      	add	sp, #44	; 0x2c
 800d434:	ecbd 8b04 	vpop	{d8-d9}
 800d438:	f85d fb04 	ldr.w	pc, [sp], #4
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d442:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d446:	d1e8      	bne.n	800d41a <fmod+0x5a>
 800d448:	f7fb fdc4 	bl	8008fd4 <__errno>
 800d44c:	2321      	movs	r3, #33	; 0x21
 800d44e:	6003      	str	r3, [r0, #0]
 800d450:	e7e7      	b.n	800d422 <fmod+0x62>
 800d452:	bf00      	nop
 800d454:	f3af 8000 	nop.w
	...
 800d460:	200001e4 	.word	0x200001e4
 800d464:	0800e820 	.word	0x0800e820

0800d468 <pow>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	ed2d 8b0a 	vpush	{d8-d12}
 800d46e:	eeb0 9b40 	vmov.f64	d9, d0
 800d472:	eeb0 8b41 	vmov.f64	d8, d1
 800d476:	4c8c      	ldr	r4, [pc, #560]	; (800d6a8 <pow+0x240>)
 800d478:	b08a      	sub	sp, #40	; 0x28
 800d47a:	f000 fa89 	bl	800d990 <__ieee754_pow>
 800d47e:	f994 3000 	ldrsb.w	r3, [r4]
 800d482:	eeb0 ab40 	vmov.f64	d10, d0
 800d486:	1c5a      	adds	r2, r3, #1
 800d488:	4626      	mov	r6, r4
 800d48a:	d04b      	beq.n	800d524 <pow+0xbc>
 800d48c:	eeb4 8b48 	vcmp.f64	d8, d8
 800d490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d494:	d646      	bvs.n	800d524 <pow+0xbc>
 800d496:	eeb4 9b49 	vcmp.f64	d9, d9
 800d49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d49e:	d719      	bvc.n	800d4d4 <pow+0x6c>
 800d4a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a8:	d13c      	bne.n	800d524 <pow+0xbc>
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	9200      	str	r2, [sp, #0]
 800d4ae:	497f      	ldr	r1, [pc, #508]	; (800d6ac <pow+0x244>)
 800d4b0:	4a7f      	ldr	r2, [pc, #508]	; (800d6b0 <pow+0x248>)
 800d4b2:	9201      	str	r2, [sp, #4]
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	9208      	str	r2, [sp, #32]
 800d4bc:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d4c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d4c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d4c8:	d02a      	beq.n	800d520 <pow+0xb8>
 800d4ca:	4668      	mov	r0, sp
 800d4cc:	f000 fdf1 	bl	800e0b2 <matherr>
 800d4d0:	bb00      	cbnz	r0, 800d514 <pow+0xac>
 800d4d2:	e04e      	b.n	800d572 <pow+0x10a>
 800d4d4:	ed9f bb72 	vldr	d11, [pc, #456]	; 800d6a0 <pow+0x238>
 800d4d8:	eeb4 9b4b 	vcmp.f64	d9, d11
 800d4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e0:	eeb0 cb4b 	vmov.f64	d12, d11
 800d4e4:	d14a      	bne.n	800d57c <pow+0x114>
 800d4e6:	eeb4 8b4b 	vcmp.f64	d8, d11
 800d4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ee:	d11f      	bne.n	800d530 <pow+0xc8>
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	9200      	str	r2, [sp, #0]
 800d4f4:	4a6e      	ldr	r2, [pc, #440]	; (800d6b0 <pow+0x248>)
 800d4f6:	9201      	str	r2, [sp, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	9208      	str	r2, [sp, #32]
 800d4fc:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d500:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d504:	ed8d bb06 	vstr	d11, [sp, #24]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d0de      	beq.n	800d4ca <pow+0x62>
 800d50c:	4b67      	ldr	r3, [pc, #412]	; (800d6ac <pow+0x244>)
 800d50e:	2200      	movs	r2, #0
 800d510:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d514:	9b08      	ldr	r3, [sp, #32]
 800d516:	b11b      	cbz	r3, 800d520 <pow+0xb8>
 800d518:	f7fb fd5c 	bl	8008fd4 <__errno>
 800d51c:	9b08      	ldr	r3, [sp, #32]
 800d51e:	6003      	str	r3, [r0, #0]
 800d520:	ed9d ab06 	vldr	d10, [sp, #24]
 800d524:	eeb0 0b4a 	vmov.f64	d0, d10
 800d528:	b00a      	add	sp, #40	; 0x28
 800d52a:	ecbd 8b0a 	vpop	{d8-d12}
 800d52e:	bd70      	pop	{r4, r5, r6, pc}
 800d530:	eeb0 0b48 	vmov.f64	d0, d8
 800d534:	f000 fdb5 	bl	800e0a2 <finite>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d0f3      	beq.n	800d524 <pow+0xbc>
 800d53c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d544:	d5ee      	bpl.n	800d524 <pow+0xbc>
 800d546:	2301      	movs	r3, #1
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	4b59      	ldr	r3, [pc, #356]	; (800d6b0 <pow+0x248>)
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	2300      	movs	r3, #0
 800d550:	9308      	str	r3, [sp, #32]
 800d552:	f994 3000 	ldrsb.w	r3, [r4]
 800d556:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d55a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d55e:	b913      	cbnz	r3, 800d566 <pow+0xfe>
 800d560:	ed8d bb06 	vstr	d11, [sp, #24]
 800d564:	e7b1      	b.n	800d4ca <pow+0x62>
 800d566:	4953      	ldr	r1, [pc, #332]	; (800d6b4 <pow+0x24c>)
 800d568:	2000      	movs	r0, #0
 800d56a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d1ab      	bne.n	800d4ca <pow+0x62>
 800d572:	f7fb fd2f 	bl	8008fd4 <__errno>
 800d576:	2321      	movs	r3, #33	; 0x21
 800d578:	6003      	str	r3, [r0, #0]
 800d57a:	e7cb      	b.n	800d514 <pow+0xac>
 800d57c:	f000 fd91 	bl	800e0a2 <finite>
 800d580:	4605      	mov	r5, r0
 800d582:	2800      	cmp	r0, #0
 800d584:	d164      	bne.n	800d650 <pow+0x1e8>
 800d586:	eeb0 0b49 	vmov.f64	d0, d9
 800d58a:	f000 fd8a 	bl	800e0a2 <finite>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d05e      	beq.n	800d650 <pow+0x1e8>
 800d592:	eeb0 0b48 	vmov.f64	d0, d8
 800d596:	f000 fd84 	bl	800e0a2 <finite>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d058      	beq.n	800d650 <pow+0x1e8>
 800d59e:	eeb4 ab4a 	vcmp.f64	d10, d10
 800d5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a6:	f994 3000 	ldrsb.w	r3, [r4]
 800d5aa:	4a41      	ldr	r2, [pc, #260]	; (800d6b0 <pow+0x248>)
 800d5ac:	d70e      	bvc.n	800d5cc <pow+0x164>
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	e9cd 1200 	strd	r1, r2, [sp]
 800d5b4:	9508      	str	r5, [sp, #32]
 800d5b6:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d5ba:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0ce      	beq.n	800d560 <pow+0xf8>
 800d5c2:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800d5c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d5ca:	e7d0      	b.n	800d56e <pow+0x106>
 800d5cc:	2103      	movs	r1, #3
 800d5ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d5d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d5d6:	ee28 8b07 	vmul.f64	d8, d8, d7
 800d5da:	e9cd 1200 	strd	r1, r2, [sp]
 800d5de:	9508      	str	r5, [sp, #32]
 800d5e0:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d5e4:	b9fb      	cbnz	r3, 800d626 <pow+0x1be>
 800d5e6:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d5ea:	4b33      	ldr	r3, [pc, #204]	; (800d6b8 <pow+0x250>)
 800d5ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d5f8:	d54b      	bpl.n	800d692 <pow+0x22a>
 800d5fa:	eeb0 0b48 	vmov.f64	d0, d8
 800d5fe:	f000 fd63 	bl	800e0c8 <rint>
 800d602:	eeb4 0b48 	vcmp.f64	d0, d8
 800d606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60a:	d004      	beq.n	800d616 <pow+0x1ae>
 800d60c:	4b2b      	ldr	r3, [pc, #172]	; (800d6bc <pow+0x254>)
 800d60e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d612:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d616:	f996 3000 	ldrsb.w	r3, [r6]
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d139      	bne.n	800d692 <pow+0x22a>
 800d61e:	f7fb fcd9 	bl	8008fd4 <__errno>
 800d622:	2322      	movs	r3, #34	; 0x22
 800d624:	e7a8      	b.n	800d578 <pow+0x110>
 800d626:	4b26      	ldr	r3, [pc, #152]	; (800d6c0 <pow+0x258>)
 800d628:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d62c:	2200      	movs	r2, #0
 800d62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d632:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d636:	d5ee      	bpl.n	800d616 <pow+0x1ae>
 800d638:	eeb0 0b48 	vmov.f64	d0, d8
 800d63c:	f000 fd44 	bl	800e0c8 <rint>
 800d640:	eeb4 0b48 	vcmp.f64	d0, d8
 800d644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d648:	d0e5      	beq.n	800d616 <pow+0x1ae>
 800d64a:	2200      	movs	r2, #0
 800d64c:	4b19      	ldr	r3, [pc, #100]	; (800d6b4 <pow+0x24c>)
 800d64e:	e7e0      	b.n	800d612 <pow+0x1aa>
 800d650:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800d654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d658:	f47f af64 	bne.w	800d524 <pow+0xbc>
 800d65c:	eeb0 0b49 	vmov.f64	d0, d9
 800d660:	f000 fd1f 	bl	800e0a2 <finite>
 800d664:	2800      	cmp	r0, #0
 800d666:	f43f af5d 	beq.w	800d524 <pow+0xbc>
 800d66a:	eeb0 0b48 	vmov.f64	d0, d8
 800d66e:	f000 fd18 	bl	800e0a2 <finite>
 800d672:	2800      	cmp	r0, #0
 800d674:	f43f af56 	beq.w	800d524 <pow+0xbc>
 800d678:	2304      	movs	r3, #4
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	4b0c      	ldr	r3, [pc, #48]	; (800d6b0 <pow+0x248>)
 800d67e:	9301      	str	r3, [sp, #4]
 800d680:	2300      	movs	r3, #0
 800d682:	9308      	str	r3, [sp, #32]
 800d684:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d688:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d68c:	ed8d cb06 	vstr	d12, [sp, #24]
 800d690:	e7c1      	b.n	800d616 <pow+0x1ae>
 800d692:	4668      	mov	r0, sp
 800d694:	f000 fd0d 	bl	800e0b2 <matherr>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f47f af3b 	bne.w	800d514 <pow+0xac>
 800d69e:	e7be      	b.n	800d61e <pow+0x1b6>
	...
 800d6a8:	200001e4 	.word	0x200001e4
 800d6ac:	3ff00000 	.word	0x3ff00000
 800d6b0:	0800e825 	.word	0x0800e825
 800d6b4:	fff00000 	.word	0xfff00000
 800d6b8:	47efffff 	.word	0x47efffff
 800d6bc:	c7efffff 	.word	0xc7efffff
 800d6c0:	7ff00000 	.word	0x7ff00000
 800d6c4:	00000000 	.word	0x00000000

0800d6c8 <sqrt>:
 800d6c8:	b500      	push	{lr}
 800d6ca:	ed2d 8b02 	vpush	{d8}
 800d6ce:	eeb0 8b40 	vmov.f64	d8, d0
 800d6d2:	b08b      	sub	sp, #44	; 0x2c
 800d6d4:	f000 fce2 	bl	800e09c <__ieee754_sqrt>
 800d6d8:	4b1f      	ldr	r3, [pc, #124]	; (800d758 <sqrt+0x90>)
 800d6da:	f993 3000 	ldrsb.w	r3, [r3]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	d024      	beq.n	800d72c <sqrt+0x64>
 800d6e2:	eeb4 8b48 	vcmp.f64	d8, d8
 800d6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ea:	d61f      	bvs.n	800d72c <sqrt+0x64>
 800d6ec:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800d750 <sqrt+0x88>
 800d6f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f8:	d518      	bpl.n	800d72c <sqrt+0x64>
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	9200      	str	r2, [sp, #0]
 800d6fe:	4a17      	ldr	r2, [pc, #92]	; (800d75c <sqrt+0x94>)
 800d700:	9201      	str	r2, [sp, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	9208      	str	r2, [sp, #32]
 800d706:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d70a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d70e:	b993      	cbnz	r3, 800d736 <sqrt+0x6e>
 800d710:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d714:	4668      	mov	r0, sp
 800d716:	f000 fccc 	bl	800e0b2 <matherr>
 800d71a:	b190      	cbz	r0, 800d742 <sqrt+0x7a>
 800d71c:	9b08      	ldr	r3, [sp, #32]
 800d71e:	b11b      	cbz	r3, 800d728 <sqrt+0x60>
 800d720:	f7fb fc58 	bl	8008fd4 <__errno>
 800d724:	9b08      	ldr	r3, [sp, #32]
 800d726:	6003      	str	r3, [r0, #0]
 800d728:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d72c:	b00b      	add	sp, #44	; 0x2c
 800d72e:	ecbd 8b02 	vpop	{d8}
 800d732:	f85d fb04 	ldr.w	pc, [sp], #4
 800d736:	2b02      	cmp	r3, #2
 800d738:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d73c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d740:	d1e8      	bne.n	800d714 <sqrt+0x4c>
 800d742:	f7fb fc47 	bl	8008fd4 <__errno>
 800d746:	2321      	movs	r3, #33	; 0x21
 800d748:	6003      	str	r3, [r0, #0]
 800d74a:	e7e7      	b.n	800d71c <sqrt+0x54>
 800d74c:	f3af 8000 	nop.w
	...
 800d758:	200001e4 	.word	0x200001e4
 800d75c:	0800e829 	.word	0x0800e829

0800d760 <__ieee754_fmod>:
 800d760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d764:	ed8d 1b00 	vstr	d1, [sp]
 800d768:	e9dd 5600 	ldrd	r5, r6, [sp]
 800d76c:	f026 4200 	bic.w	r2, r6, #2147483648	; 0x80000000
 800d770:	ea52 0305 	orrs.w	r3, r2, r5
 800d774:	46ac      	mov	ip, r5
 800d776:	d00d      	beq.n	800d794 <__ieee754_fmod+0x34>
 800d778:	ee10 9a90 	vmov	r9, s1
 800d77c:	4b7c      	ldr	r3, [pc, #496]	; (800d970 <__ieee754_fmod+0x210>)
 800d77e:	f029 4100 	bic.w	r1, r9, #2147483648	; 0x80000000
 800d782:	4299      	cmp	r1, r3
 800d784:	dc06      	bgt.n	800d794 <__ieee754_fmod+0x34>
 800d786:	426b      	negs	r3, r5
 800d788:	432b      	orrs	r3, r5
 800d78a:	487a      	ldr	r0, [pc, #488]	; (800d974 <__ieee754_fmod+0x214>)
 800d78c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d790:	4283      	cmp	r3, r0
 800d792:	d908      	bls.n	800d7a6 <__ieee754_fmod+0x46>
 800d794:	ed9d 7b00 	vldr	d7, [sp]
 800d798:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d79c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800d7a0:	b003      	add	sp, #12
 800d7a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7a6:	4291      	cmp	r1, r2
 800d7a8:	ee10 ea10 	vmov	lr, s0
 800d7ac:	ee10 7a10 	vmov	r7, s0
 800d7b0:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 800d7b4:	dc0a      	bgt.n	800d7cc <__ieee754_fmod+0x6c>
 800d7b6:	dbf3      	blt.n	800d7a0 <__ieee754_fmod+0x40>
 800d7b8:	45ae      	cmp	lr, r5
 800d7ba:	d3f1      	bcc.n	800d7a0 <__ieee754_fmod+0x40>
 800d7bc:	d106      	bne.n	800d7cc <__ieee754_fmod+0x6c>
 800d7be:	496e      	ldr	r1, [pc, #440]	; (800d978 <__ieee754_fmod+0x218>)
 800d7c0:	0fe4      	lsrs	r4, r4, #31
 800d7c2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d7c6:	ed94 0b00 	vldr	d0, [r4]
 800d7ca:	e7e9      	b.n	800d7a0 <__ieee754_fmod+0x40>
 800d7cc:	4b6b      	ldr	r3, [pc, #428]	; (800d97c <__ieee754_fmod+0x21c>)
 800d7ce:	4299      	cmp	r1, r3
 800d7d0:	dc50      	bgt.n	800d874 <__ieee754_fmod+0x114>
 800d7d2:	2900      	cmp	r1, #0
 800d7d4:	d143      	bne.n	800d85e <__ieee754_fmod+0xfe>
 800d7d6:	486a      	ldr	r0, [pc, #424]	; (800d980 <__ieee754_fmod+0x220>)
 800d7d8:	46f0      	mov	r8, lr
 800d7da:	f1b8 0f00 	cmp.w	r8, #0
 800d7de:	dc3a      	bgt.n	800d856 <__ieee754_fmod+0xf6>
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	dc5a      	bgt.n	800d89a <__ieee754_fmod+0x13a>
 800d7e4:	2a00      	cmp	r2, #0
 800d7e6:	d14d      	bne.n	800d884 <__ieee754_fmod+0x124>
 800d7e8:	4b65      	ldr	r3, [pc, #404]	; (800d980 <__ieee754_fmod+0x220>)
 800d7ea:	46a8      	mov	r8, r5
 800d7ec:	f1b8 0f00 	cmp.w	r8, #0
 800d7f0:	dc44      	bgt.n	800d87c <__ieee754_fmod+0x11c>
 800d7f2:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800d984 <__ieee754_fmod+0x224>
 800d7f6:	4540      	cmp	r0, r8
 800d7f8:	db53      	blt.n	800d8a2 <__ieee754_fmod+0x142>
 800d7fa:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800d7fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d802:	f8df e180 	ldr.w	lr, [pc, #384]	; 800d984 <__ieee754_fmod+0x224>
 800d806:	4573      	cmp	r3, lr
 800d808:	db5f      	blt.n	800d8ca <__ieee754_fmod+0x16a>
 800d80a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d80e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d812:	1ac0      	subs	r0, r0, r3
 800d814:	1b8a      	subs	r2, r1, r6
 800d816:	eba7 050c 	sub.w	r5, r7, ip
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d16b      	bne.n	800d8f6 <__ieee754_fmod+0x196>
 800d81e:	4567      	cmp	r7, ip
 800d820:	bf38      	it	cc
 800d822:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800d826:	2a00      	cmp	r2, #0
 800d828:	bfbc      	itt	lt
 800d82a:	463d      	movlt	r5, r7
 800d82c:	460a      	movlt	r2, r1
 800d82e:	ea52 0105 	orrs.w	r1, r2, r5
 800d832:	d0c4      	beq.n	800d7be <__ieee754_fmod+0x5e>
 800d834:	4951      	ldr	r1, [pc, #324]	; (800d97c <__ieee754_fmod+0x21c>)
 800d836:	428a      	cmp	r2, r1
 800d838:	dd72      	ble.n	800d920 <__ieee754_fmod+0x1c0>
 800d83a:	4952      	ldr	r1, [pc, #328]	; (800d984 <__ieee754_fmod+0x224>)
 800d83c:	428b      	cmp	r3, r1
 800d83e:	db75      	blt.n	800d92c <__ieee754_fmod+0x1cc>
 800d840:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800d844:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d848:	4314      	orrs	r4, r2
 800d84a:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800d84e:	4628      	mov	r0, r5
 800d850:	ec41 0b10 	vmov	d0, r0, r1
 800d854:	e7a4      	b.n	800d7a0 <__ieee754_fmod+0x40>
 800d856:	3801      	subs	r0, #1
 800d858:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d85c:	e7bd      	b.n	800d7da <__ieee754_fmod+0x7a>
 800d85e:	4849      	ldr	r0, [pc, #292]	; (800d984 <__ieee754_fmod+0x224>)
 800d860:	ea4f 28c1 	mov.w	r8, r1, lsl #11
 800d864:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d868:	f1b8 0f00 	cmp.w	r8, #0
 800d86c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800d870:	dcf8      	bgt.n	800d864 <__ieee754_fmod+0x104>
 800d872:	e7b5      	b.n	800d7e0 <__ieee754_fmod+0x80>
 800d874:	1508      	asrs	r0, r1, #20
 800d876:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d87a:	e7b1      	b.n	800d7e0 <__ieee754_fmod+0x80>
 800d87c:	3b01      	subs	r3, #1
 800d87e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d882:	e7b3      	b.n	800d7ec <__ieee754_fmod+0x8c>
 800d884:	4b3f      	ldr	r3, [pc, #252]	; (800d984 <__ieee754_fmod+0x224>)
 800d886:	ea4f 28c2 	mov.w	r8, r2, lsl #11
 800d88a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d88e:	f1b8 0f00 	cmp.w	r8, #0
 800d892:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d896:	dcf8      	bgt.n	800d88a <__ieee754_fmod+0x12a>
 800d898:	e7ab      	b.n	800d7f2 <__ieee754_fmod+0x92>
 800d89a:	1513      	asrs	r3, r2, #20
 800d89c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d8a0:	e7a7      	b.n	800d7f2 <__ieee754_fmod+0x92>
 800d8a2:	eba8 0700 	sub.w	r7, r8, r0
 800d8a6:	2f1f      	cmp	r7, #31
 800d8a8:	dc09      	bgt.n	800d8be <__ieee754_fmod+0x15e>
 800d8aa:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 800d8ae:	40b9      	lsls	r1, r7
 800d8b0:	fa2e f808 	lsr.w	r8, lr, r8
 800d8b4:	ea48 0101 	orr.w	r1, r8, r1
 800d8b8:	fa0e f707 	lsl.w	r7, lr, r7
 800d8bc:	e7a1      	b.n	800d802 <__ieee754_fmod+0xa2>
 800d8be:	4932      	ldr	r1, [pc, #200]	; (800d988 <__ieee754_fmod+0x228>)
 800d8c0:	1a09      	subs	r1, r1, r0
 800d8c2:	fa0e f101 	lsl.w	r1, lr, r1
 800d8c6:	2700      	movs	r7, #0
 800d8c8:	e79b      	b.n	800d802 <__ieee754_fmod+0xa2>
 800d8ca:	ebae 0c03 	sub.w	ip, lr, r3
 800d8ce:	f1bc 0f1f 	cmp.w	ip, #31
 800d8d2:	dc09      	bgt.n	800d8e8 <__ieee754_fmod+0x188>
 800d8d4:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800d8d8:	fa02 f20c 	lsl.w	r2, r2, ip
 800d8dc:	fa25 f606 	lsr.w	r6, r5, r6
 800d8e0:	4316      	orrs	r6, r2
 800d8e2:	fa05 fc0c 	lsl.w	ip, r5, ip
 800d8e6:	e794      	b.n	800d812 <__ieee754_fmod+0xb2>
 800d8e8:	4e27      	ldr	r6, [pc, #156]	; (800d988 <__ieee754_fmod+0x228>)
 800d8ea:	1af6      	subs	r6, r6, r3
 800d8ec:	fa05 f606 	lsl.w	r6, r5, r6
 800d8f0:	f04f 0c00 	mov.w	ip, #0
 800d8f4:	e78d      	b.n	800d812 <__ieee754_fmod+0xb2>
 800d8f6:	4567      	cmp	r7, ip
 800d8f8:	bf38      	it	cc
 800d8fa:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800d8fe:	2a00      	cmp	r2, #0
 800d900:	da05      	bge.n	800d90e <__ieee754_fmod+0x1ae>
 800d902:	0ffa      	lsrs	r2, r7, #31
 800d904:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d908:	007f      	lsls	r7, r7, #1
 800d90a:	3801      	subs	r0, #1
 800d90c:	e782      	b.n	800d814 <__ieee754_fmod+0xb4>
 800d90e:	ea52 0105 	orrs.w	r1, r2, r5
 800d912:	f43f af54 	beq.w	800d7be <__ieee754_fmod+0x5e>
 800d916:	0fe9      	lsrs	r1, r5, #31
 800d918:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d91c:	006f      	lsls	r7, r5, #1
 800d91e:	e7f4      	b.n	800d90a <__ieee754_fmod+0x1aa>
 800d920:	0fe8      	lsrs	r0, r5, #31
 800d922:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d926:	006d      	lsls	r5, r5, #1
 800d928:	3b01      	subs	r3, #1
 800d92a:	e784      	b.n	800d836 <__ieee754_fmod+0xd6>
 800d92c:	1ac9      	subs	r1, r1, r3
 800d92e:	2914      	cmp	r1, #20
 800d930:	dc0a      	bgt.n	800d948 <__ieee754_fmod+0x1e8>
 800d932:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d936:	fa02 f303 	lsl.w	r3, r2, r3
 800d93a:	40cd      	lsrs	r5, r1
 800d93c:	432b      	orrs	r3, r5
 800d93e:	410a      	asrs	r2, r1
 800d940:	ea42 0104 	orr.w	r1, r2, r4
 800d944:	4618      	mov	r0, r3
 800d946:	e783      	b.n	800d850 <__ieee754_fmod+0xf0>
 800d948:	291f      	cmp	r1, #31
 800d94a:	dc07      	bgt.n	800d95c <__ieee754_fmod+0x1fc>
 800d94c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d950:	40cd      	lsrs	r5, r1
 800d952:	fa02 f303 	lsl.w	r3, r2, r3
 800d956:	432b      	orrs	r3, r5
 800d958:	4622      	mov	r2, r4
 800d95a:	e7f1      	b.n	800d940 <__ieee754_fmod+0x1e0>
 800d95c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800d960:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d964:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800d968:	33e2      	adds	r3, #226	; 0xe2
 800d96a:	fa42 f303 	asr.w	r3, r2, r3
 800d96e:	e7f3      	b.n	800d958 <__ieee754_fmod+0x1f8>
 800d970:	7fefffff 	.word	0x7fefffff
 800d974:	7ff00000 	.word	0x7ff00000
 800d978:	0800e830 	.word	0x0800e830
 800d97c:	000fffff 	.word	0x000fffff
 800d980:	fffffbed 	.word	0xfffffbed
 800d984:	fffffc02 	.word	0xfffffc02
 800d988:	fffffbe2 	.word	0xfffffbe2
 800d98c:	00000000 	.word	0x00000000

0800d990 <__ieee754_pow>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	ec57 6b11 	vmov	r6, r7, d1
 800d998:	ed2d 8b02 	vpush	{d8}
 800d99c:	eeb0 8b40 	vmov.f64	d8, d0
 800d9a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d9a4:	ea58 0306 	orrs.w	r3, r8, r6
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	46b9      	mov	r9, r7
 800d9ac:	ee11 2a10 	vmov	r2, s2
 800d9b0:	f000 8306 	beq.w	800dfc0 <__ieee754_pow+0x630>
 800d9b4:	ee18 aa90 	vmov	sl, s17
 800d9b8:	4bb9      	ldr	r3, [pc, #740]	; (800dca0 <__ieee754_pow+0x310>)
 800d9ba:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800d9be:	429c      	cmp	r4, r3
 800d9c0:	ee10 ba10 	vmov	fp, s0
 800d9c4:	dc0b      	bgt.n	800d9de <__ieee754_pow+0x4e>
 800d9c6:	d105      	bne.n	800d9d4 <__ieee754_pow+0x44>
 800d9c8:	f1bb 0f00 	cmp.w	fp, #0
 800d9cc:	d107      	bne.n	800d9de <__ieee754_pow+0x4e>
 800d9ce:	45a0      	cmp	r8, r4
 800d9d0:	dc0d      	bgt.n	800d9ee <__ieee754_pow+0x5e>
 800d9d2:	e001      	b.n	800d9d8 <__ieee754_pow+0x48>
 800d9d4:	4598      	cmp	r8, r3
 800d9d6:	dc02      	bgt.n	800d9de <__ieee754_pow+0x4e>
 800d9d8:	4598      	cmp	r8, r3
 800d9da:	d110      	bne.n	800d9fe <__ieee754_pow+0x6e>
 800d9dc:	b17a      	cbz	r2, 800d9fe <__ieee754_pow+0x6e>
 800d9de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d9e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9e6:	ea54 030b 	orrs.w	r3, r4, fp
 800d9ea:	f000 82e9 	beq.w	800dfc0 <__ieee754_pow+0x630>
 800d9ee:	48ad      	ldr	r0, [pc, #692]	; (800dca4 <__ieee754_pow+0x314>)
 800d9f0:	b005      	add	sp, #20
 800d9f2:	ecbd 8b02 	vpop	{d8}
 800d9f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fa:	f000 bb5d 	b.w	800e0b8 <nan>
 800d9fe:	f1ba 0f00 	cmp.w	sl, #0
 800da02:	da4e      	bge.n	800daa2 <__ieee754_pow+0x112>
 800da04:	4ba8      	ldr	r3, [pc, #672]	; (800dca8 <__ieee754_pow+0x318>)
 800da06:	4598      	cmp	r8, r3
 800da08:	dc49      	bgt.n	800da9e <__ieee754_pow+0x10e>
 800da0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800da0e:	4598      	cmp	r8, r3
 800da10:	dd47      	ble.n	800daa2 <__ieee754_pow+0x112>
 800da12:	ea4f 5328 	mov.w	r3, r8, asr #20
 800da16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da1a:	2b14      	cmp	r3, #20
 800da1c:	dd24      	ble.n	800da68 <__ieee754_pow+0xd8>
 800da1e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800da22:	fa22 f503 	lsr.w	r5, r2, r3
 800da26:	fa05 f303 	lsl.w	r3, r5, r3
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d139      	bne.n	800daa2 <__ieee754_pow+0x112>
 800da2e:	f005 0501 	and.w	r5, r5, #1
 800da32:	f1c5 0502 	rsb	r5, r5, #2
 800da36:	2a00      	cmp	r2, #0
 800da38:	d15a      	bne.n	800daf0 <__ieee754_pow+0x160>
 800da3a:	4b99      	ldr	r3, [pc, #612]	; (800dca0 <__ieee754_pow+0x310>)
 800da3c:	4598      	cmp	r8, r3
 800da3e:	d122      	bne.n	800da86 <__ieee754_pow+0xf6>
 800da40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800da44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800da48:	ea53 030b 	orrs.w	r3, r3, fp
 800da4c:	f000 82b8 	beq.w	800dfc0 <__ieee754_pow+0x630>
 800da50:	4b96      	ldr	r3, [pc, #600]	; (800dcac <__ieee754_pow+0x31c>)
 800da52:	429c      	cmp	r4, r3
 800da54:	dd27      	ble.n	800daa6 <__ieee754_pow+0x116>
 800da56:	f1b9 0f00 	cmp.w	r9, #0
 800da5a:	f280 82b4 	bge.w	800dfc6 <__ieee754_pow+0x636>
 800da5e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800dc70 <__ieee754_pow+0x2e0>
 800da62:	ed8d 7b00 	vstr	d7, [sp]
 800da66:	e026      	b.n	800dab6 <__ieee754_pow+0x126>
 800da68:	2a00      	cmp	r2, #0
 800da6a:	d140      	bne.n	800daee <__ieee754_pow+0x15e>
 800da6c:	f1c3 0314 	rsb	r3, r3, #20
 800da70:	fa48 f503 	asr.w	r5, r8, r3
 800da74:	fa05 f303 	lsl.w	r3, r5, r3
 800da78:	4543      	cmp	r3, r8
 800da7a:	f040 82aa 	bne.w	800dfd2 <__ieee754_pow+0x642>
 800da7e:	f005 0501 	and.w	r5, r5, #1
 800da82:	f1c5 0502 	rsb	r5, r5, #2
 800da86:	4b8a      	ldr	r3, [pc, #552]	; (800dcb0 <__ieee754_pow+0x320>)
 800da88:	4598      	cmp	r8, r3
 800da8a:	d11b      	bne.n	800dac4 <__ieee754_pow+0x134>
 800da8c:	f1b9 0f00 	cmp.w	r9, #0
 800da90:	f280 829c 	bge.w	800dfcc <__ieee754_pow+0x63c>
 800da94:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800da98:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800da9c:	e7e1      	b.n	800da62 <__ieee754_pow+0xd2>
 800da9e:	2502      	movs	r5, #2
 800daa0:	e7c9      	b.n	800da36 <__ieee754_pow+0xa6>
 800daa2:	2500      	movs	r5, #0
 800daa4:	e7c7      	b.n	800da36 <__ieee754_pow+0xa6>
 800daa6:	f1b9 0f00 	cmp.w	r9, #0
 800daaa:	dad8      	bge.n	800da5e <__ieee754_pow+0xce>
 800daac:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800dab0:	4633      	mov	r3, r6
 800dab2:	e9cd 3400 	strd	r3, r4, [sp]
 800dab6:	ed9d 0b00 	vldr	d0, [sp]
 800daba:	b005      	add	sp, #20
 800dabc:	ecbd 8b02 	vpop	{d8}
 800dac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dac8:	d102      	bne.n	800dad0 <__ieee754_pow+0x140>
 800daca:	ee28 7b08 	vmul.f64	d7, d8, d8
 800dace:	e7c8      	b.n	800da62 <__ieee754_pow+0xd2>
 800dad0:	4b78      	ldr	r3, [pc, #480]	; (800dcb4 <__ieee754_pow+0x324>)
 800dad2:	4599      	cmp	r9, r3
 800dad4:	d10c      	bne.n	800daf0 <__ieee754_pow+0x160>
 800dad6:	f1ba 0f00 	cmp.w	sl, #0
 800dada:	db09      	blt.n	800daf0 <__ieee754_pow+0x160>
 800dadc:	eeb0 0b48 	vmov.f64	d0, d8
 800dae0:	b005      	add	sp, #20
 800dae2:	ecbd 8b02 	vpop	{d8}
 800dae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daea:	f000 bad7 	b.w	800e09c <__ieee754_sqrt>
 800daee:	2500      	movs	r5, #0
 800daf0:	eeb0 0b48 	vmov.f64	d0, d8
 800daf4:	f7ff fc5a 	bl	800d3ac <fabs>
 800daf8:	ed8d 0b00 	vstr	d0, [sp]
 800dafc:	f1bb 0f00 	cmp.w	fp, #0
 800db00:	d128      	bne.n	800db54 <__ieee754_pow+0x1c4>
 800db02:	b124      	cbz	r4, 800db0e <__ieee754_pow+0x17e>
 800db04:	4b6a      	ldr	r3, [pc, #424]	; (800dcb0 <__ieee754_pow+0x320>)
 800db06:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d122      	bne.n	800db54 <__ieee754_pow+0x1c4>
 800db0e:	f1b9 0f00 	cmp.w	r9, #0
 800db12:	da07      	bge.n	800db24 <__ieee754_pow+0x194>
 800db14:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800db18:	ed9d 6b00 	vldr	d6, [sp]
 800db1c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800db20:	ed8d 7b00 	vstr	d7, [sp]
 800db24:	f1ba 0f00 	cmp.w	sl, #0
 800db28:	dac5      	bge.n	800dab6 <__ieee754_pow+0x126>
 800db2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800db2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db32:	ea54 0305 	orrs.w	r3, r4, r5
 800db36:	d106      	bne.n	800db46 <__ieee754_pow+0x1b6>
 800db38:	ed9d 7b00 	vldr	d7, [sp]
 800db3c:	ee37 7b47 	vsub.f64	d7, d7, d7
 800db40:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800db44:	e78d      	b.n	800da62 <__ieee754_pow+0xd2>
 800db46:	2d01      	cmp	r5, #1
 800db48:	d1b5      	bne.n	800dab6 <__ieee754_pow+0x126>
 800db4a:	ed9d 7b00 	vldr	d7, [sp]
 800db4e:	eeb1 7b47 	vneg.f64	d7, d7
 800db52:	e786      	b.n	800da62 <__ieee754_pow+0xd2>
 800db54:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800db58:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800db5c:	ea55 030a 	orrs.w	r3, r5, sl
 800db60:	d104      	bne.n	800db6c <__ieee754_pow+0x1dc>
 800db62:	ee38 8b48 	vsub.f64	d8, d8, d8
 800db66:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800db6a:	e77a      	b.n	800da62 <__ieee754_pow+0xd2>
 800db6c:	4b52      	ldr	r3, [pc, #328]	; (800dcb8 <__ieee754_pow+0x328>)
 800db6e:	4598      	cmp	r8, r3
 800db70:	f340 80a8 	ble.w	800dcc4 <__ieee754_pow+0x334>
 800db74:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800db78:	4598      	cmp	r8, r3
 800db7a:	dd0b      	ble.n	800db94 <__ieee754_pow+0x204>
 800db7c:	4b4b      	ldr	r3, [pc, #300]	; (800dcac <__ieee754_pow+0x31c>)
 800db7e:	429c      	cmp	r4, r3
 800db80:	dc0e      	bgt.n	800dba0 <__ieee754_pow+0x210>
 800db82:	f1b9 0f00 	cmp.w	r9, #0
 800db86:	f6bf af6a 	bge.w	800da5e <__ieee754_pow+0xce>
 800db8a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800dc78 <__ieee754_pow+0x2e8>
 800db8e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800db92:	e766      	b.n	800da62 <__ieee754_pow+0xd2>
 800db94:	4b49      	ldr	r3, [pc, #292]	; (800dcbc <__ieee754_pow+0x32c>)
 800db96:	429c      	cmp	r4, r3
 800db98:	ddf3      	ble.n	800db82 <__ieee754_pow+0x1f2>
 800db9a:	4b45      	ldr	r3, [pc, #276]	; (800dcb0 <__ieee754_pow+0x320>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	dd03      	ble.n	800dba8 <__ieee754_pow+0x218>
 800dba0:	f1b9 0f00 	cmp.w	r9, #0
 800dba4:	dcf1      	bgt.n	800db8a <__ieee754_pow+0x1fa>
 800dba6:	e75a      	b.n	800da5e <__ieee754_pow+0xce>
 800dba8:	ed9d 7b00 	vldr	d7, [sp]
 800dbac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dbb0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800dc80 <__ieee754_pow+0x2f0>
 800dbb4:	ee37 6b46 	vsub.f64	d6, d7, d6
 800dbb8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800dbbc:	eeb1 3b46 	vneg.f64	d3, d6
 800dbc0:	eea3 5b07 	vfma.f64	d5, d3, d7
 800dbc4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dbc8:	eea5 7b46 	vfms.f64	d7, d5, d6
 800dbcc:	ee26 5b06 	vmul.f64	d5, d6, d6
 800dbd0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dbd4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800dc88 <__ieee754_pow+0x2f8>
 800dbd8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800dbdc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800dc90 <__ieee754_pow+0x300>
 800dbe0:	eea6 7b05 	vfma.f64	d7, d6, d5
 800dbe4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800dc98 <__ieee754_pow+0x308>
 800dbe8:	eeb0 4b47 	vmov.f64	d4, d7
 800dbec:	eea6 4b05 	vfma.f64	d4, d6, d5
 800dbf0:	ec53 2b14 	vmov	r2, r3, d4
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	ec43 2b14 	vmov	d4, r2, r3
 800dbfa:	eeb0 6b44 	vmov.f64	d6, d4
 800dbfe:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dc02:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc06:	3d01      	subs	r5, #1
 800dc08:	ea55 030a 	orrs.w	r3, r5, sl
 800dc0c:	f04f 0200 	mov.w	r2, #0
 800dc10:	463b      	mov	r3, r7
 800dc12:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dc16:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800dc1a:	ec47 6b15 	vmov	d5, r6, r7
 800dc1e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800dc22:	ec47 6b13 	vmov	d3, r6, r7
 800dc26:	ec43 2b16 	vmov	d6, r2, r3
 800dc2a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dc2e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800dc32:	4b23      	ldr	r3, [pc, #140]	; (800dcc0 <__ieee754_pow+0x330>)
 800dc34:	eea5 7b04 	vfma.f64	d7, d5, d4
 800dc38:	ee24 6b06 	vmul.f64	d6, d4, d6
 800dc3c:	ee37 5b06 	vadd.f64	d5, d7, d6
 800dc40:	ee15 1a90 	vmov	r1, s11
 800dc44:	4299      	cmp	r1, r3
 800dc46:	ee15 2a10 	vmov	r2, s10
 800dc4a:	f340 819b 	ble.w	800df84 <__ieee754_pow+0x5f4>
 800dc4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dc52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dc56:	4313      	orrs	r3, r2
 800dc58:	f000 810a 	beq.w	800de70 <__ieee754_pow+0x4e0>
 800dc5c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800dc78 <__ieee754_pow+0x2e8>
 800dc60:	ee28 8b07 	vmul.f64	d8, d8, d7
 800dc64:	ee28 7b07 	vmul.f64	d7, d8, d7
 800dc68:	e6fb      	b.n	800da62 <__ieee754_pow+0xd2>
 800dc6a:	bf00      	nop
 800dc6c:	f3af 8000 	nop.w
	...
 800dc78:	8800759c 	.word	0x8800759c
 800dc7c:	7e37e43c 	.word	0x7e37e43c
 800dc80:	55555555 	.word	0x55555555
 800dc84:	3fd55555 	.word	0x3fd55555
 800dc88:	652b82fe 	.word	0x652b82fe
 800dc8c:	3ff71547 	.word	0x3ff71547
 800dc90:	f85ddf44 	.word	0xf85ddf44
 800dc94:	3e54ae0b 	.word	0x3e54ae0b
 800dc98:	60000000 	.word	0x60000000
 800dc9c:	3ff71547 	.word	0x3ff71547
 800dca0:	7ff00000 	.word	0x7ff00000
 800dca4:	0800e651 	.word	0x0800e651
 800dca8:	433fffff 	.word	0x433fffff
 800dcac:	3fefffff 	.word	0x3fefffff
 800dcb0:	3ff00000 	.word	0x3ff00000
 800dcb4:	3fe00000 	.word	0x3fe00000
 800dcb8:	41e00000 	.word	0x41e00000
 800dcbc:	3feffffe 	.word	0x3feffffe
 800dcc0:	408fffff 	.word	0x408fffff
 800dcc4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800dcc8:	f280 80ce 	bge.w	800de68 <__ieee754_pow+0x4d8>
 800dccc:	ed9d 6b00 	vldr	d6, [sp]
 800dcd0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800dfd8 <__ieee754_pow+0x648>
 800dcd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dcd8:	ed8d 7b00 	vstr	d7, [sp]
 800dcdc:	9c01      	ldr	r4, [sp, #4]
 800dcde:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800dce2:	1521      	asrs	r1, r4, #20
 800dce4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dce8:	4419      	add	r1, r3
 800dcea:	4be3      	ldr	r3, [pc, #908]	; (800e078 <__ieee754_pow+0x6e8>)
 800dcec:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dcf0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800dcf4:	429c      	cmp	r4, r3
 800dcf6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800dcfa:	dd06      	ble.n	800dd0a <__ieee754_pow+0x37a>
 800dcfc:	4bdf      	ldr	r3, [pc, #892]	; (800e07c <__ieee754_pow+0x6ec>)
 800dcfe:	429c      	cmp	r4, r3
 800dd00:	f340 80b4 	ble.w	800de6c <__ieee754_pow+0x4dc>
 800dd04:	3101      	adds	r1, #1
 800dd06:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800dd0a:	2400      	movs	r4, #0
 800dd0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd10:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800dd14:	4603      	mov	r3, r0
 800dd16:	ec43 2b17 	vmov	d7, r2, r3
 800dd1a:	4bd9      	ldr	r3, [pc, #868]	; (800e080 <__ieee754_pow+0x6f0>)
 800dd1c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800dd20:	4463      	add	r3, ip
 800dd22:	ed93 5b00 	vldr	d5, [r3]
 800dd26:	1040      	asrs	r0, r0, #1
 800dd28:	ee37 2b45 	vsub.f64	d2, d7, d5
 800dd2c:	ee35 6b07 	vadd.f64	d6, d5, d7
 800dd30:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800dd34:	ee22 6b01 	vmul.f64	d6, d2, d1
 800dd38:	ed8d 6b00 	vstr	d6, [sp]
 800dd3c:	e9dd 8900 	ldrd	r8, r9, [sp]
 800dd40:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800dd44:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800dd48:	f04f 0800 	mov.w	r8, #0
 800dd4c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800dd50:	2200      	movs	r2, #0
 800dd52:	ec49 8b14 	vmov	d4, r8, r9
 800dd56:	ec43 2b16 	vmov	d6, r2, r3
 800dd5a:	eeb1 3b44 	vneg.f64	d3, d4
 800dd5e:	eea3 2b06 	vfma.f64	d2, d3, d6
 800dd62:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dd66:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd6a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800dd6e:	ed9d 7b00 	vldr	d7, [sp]
 800dd72:	ee22 2b01 	vmul.f64	d2, d2, d1
 800dd76:	ee27 5b07 	vmul.f64	d5, d7, d7
 800dd7a:	ee37 6b04 	vadd.f64	d6, d7, d4
 800dd7e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800dfe0 <__ieee754_pow+0x650>
 800dd82:	ee25 0b05 	vmul.f64	d0, d5, d5
 800dd86:	ee26 6b02 	vmul.f64	d6, d6, d2
 800dd8a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800dfe8 <__ieee754_pow+0x658>
 800dd8e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800dd92:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800dff0 <__ieee754_pow+0x660>
 800dd96:	eea7 1b05 	vfma.f64	d1, d7, d5
 800dd9a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800dff8 <__ieee754_pow+0x668>
 800dd9e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800dda2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800e000 <__ieee754_pow+0x670>
 800dda6:	eea7 1b05 	vfma.f64	d1, d7, d5
 800ddaa:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800e008 <__ieee754_pow+0x678>
 800ddae:	eea1 7b05 	vfma.f64	d7, d1, d5
 800ddb2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800ddb6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800ddba:	eeb0 5b47 	vmov.f64	d5, d7
 800ddbe:	eea4 5b04 	vfma.f64	d5, d4, d4
 800ddc2:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ddc6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ddca:	f8cd 8008 	str.w	r8, [sp, #8]
 800ddce:	ed9d 5b02 	vldr	d5, [sp, #8]
 800ddd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ddd6:	eea3 7b04 	vfma.f64	d7, d3, d4
 800ddda:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ddde:	ed9d 6b00 	vldr	d6, [sp]
 800dde2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dde6:	eea2 7b05 	vfma.f64	d7, d2, d5
 800ddea:	eeb0 6b47 	vmov.f64	d6, d7
 800ddee:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ddf2:	ed8d 6b00 	vstr	d6, [sp]
 800ddf6:	f8cd 8000 	str.w	r8, [sp]
 800ddfa:	ed9d 2b00 	vldr	d2, [sp]
 800ddfe:	eeb0 6b42 	vmov.f64	d6, d2
 800de02:	eea3 6b05 	vfma.f64	d6, d3, d5
 800de06:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de0a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800e010 <__ieee754_pow+0x680>
 800de0e:	4b9d      	ldr	r3, [pc, #628]	; (800e084 <__ieee754_pow+0x6f4>)
 800de10:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de14:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800e018 <__ieee754_pow+0x688>
 800de18:	4463      	add	r3, ip
 800de1a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800de1e:	ed93 6b00 	vldr	d6, [r3]
 800de22:	4b99      	ldr	r3, [pc, #612]	; (800e088 <__ieee754_pow+0x6f8>)
 800de24:	ee37 6b06 	vadd.f64	d6, d7, d6
 800de28:	449c      	add	ip, r3
 800de2a:	ed9c 1b00 	vldr	d1, [ip]
 800de2e:	eeb0 4b46 	vmov.f64	d4, d6
 800de32:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800e020 <__ieee754_pow+0x690>
 800de36:	ee07 1a90 	vmov	s15, r1
 800de3a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800de3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de42:	ee34 4b01 	vadd.f64	d4, d4, d1
 800de46:	ee34 5b07 	vadd.f64	d5, d4, d7
 800de4a:	ed8d 5b00 	vstr	d5, [sp]
 800de4e:	f8cd 8000 	str.w	r8, [sp]
 800de52:	ed9d 4b00 	vldr	d4, [sp]
 800de56:	ee34 7b47 	vsub.f64	d7, d4, d7
 800de5a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800de5e:	eea2 7b43 	vfms.f64	d7, d2, d3
 800de62:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de66:	e6ce      	b.n	800dc06 <__ieee754_pow+0x276>
 800de68:	2300      	movs	r3, #0
 800de6a:	e73a      	b.n	800dce2 <__ieee754_pow+0x352>
 800de6c:	2401      	movs	r4, #1
 800de6e:	e74d      	b.n	800dd0c <__ieee754_pow+0x37c>
 800de70:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800e028 <__ieee754_pow+0x698>
 800de74:	ee35 5b46 	vsub.f64	d5, d5, d6
 800de78:	ee37 4b04 	vadd.f64	d4, d7, d4
 800de7c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800de80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de84:	f73f aeea 	bgt.w	800dc5c <__ieee754_pow+0x2cc>
 800de88:	4a80      	ldr	r2, [pc, #512]	; (800e08c <__ieee754_pow+0x6fc>)
 800de8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de8e:	4293      	cmp	r3, r2
 800de90:	f340 808e 	ble.w	800dfb0 <__ieee754_pow+0x620>
 800de94:	151b      	asrs	r3, r3, #20
 800de96:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800de9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de9e:	4103      	asrs	r3, r0
 800dea0:	440b      	add	r3, r1
 800dea2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dea6:	487a      	ldr	r0, [pc, #488]	; (800e090 <__ieee754_pow+0x700>)
 800dea8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800deac:	4110      	asrs	r0, r2
 800deae:	ea23 0500 	bic.w	r5, r3, r0
 800deb2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800deb6:	2400      	movs	r4, #0
 800deb8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800debc:	f1c2 0214 	rsb	r2, r2, #20
 800dec0:	ec45 4b15 	vmov	d5, r4, r5
 800dec4:	4110      	asrs	r0, r2
 800dec6:	2900      	cmp	r1, #0
 800dec8:	bfb8      	it	lt
 800deca:	4240      	neglt	r0, r0
 800decc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ded0:	ee36 5b07 	vadd.f64	d5, d6, d7
 800ded4:	ec53 2b15 	vmov	r2, r3, d5
 800ded8:	2200      	movs	r2, #0
 800deda:	ec43 2b15 	vmov	d5, r2, r3
 800dede:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800e030 <__ieee754_pow+0x6a0>
 800dee2:	ee35 6b46 	vsub.f64	d6, d5, d6
 800dee6:	ee37 6b46 	vsub.f64	d6, d7, d6
 800deea:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800e038 <__ieee754_pow+0x6a8>
 800deee:	ee25 7b07 	vmul.f64	d7, d5, d7
 800def2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800def6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800e040 <__ieee754_pow+0x6b0>
 800defa:	eeb0 4b47 	vmov.f64	d4, d7
 800defe:	eea5 4b06 	vfma.f64	d4, d5, d6
 800df02:	eeb0 3b44 	vmov.f64	d3, d4
 800df06:	eea5 3b46 	vfms.f64	d3, d5, d6
 800df0a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800e048 <__ieee754_pow+0x6b8>
 800df0e:	ee37 7b43 	vsub.f64	d7, d7, d3
 800df12:	ee24 6b04 	vmul.f64	d6, d4, d4
 800df16:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800e050 <__ieee754_pow+0x6c0>
 800df1a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800df1e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800df22:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800e058 <__ieee754_pow+0x6c8>
 800df26:	eea3 5b06 	vfma.f64	d5, d3, d6
 800df2a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800e060 <__ieee754_pow+0x6d0>
 800df2e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800df32:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800e068 <__ieee754_pow+0x6d8>
 800df36:	eea3 5b06 	vfma.f64	d5, d3, d6
 800df3a:	eeb0 3b44 	vmov.f64	d3, d4
 800df3e:	eea5 3b46 	vfms.f64	d3, d5, d6
 800df42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800df46:	eeb0 6b43 	vmov.f64	d6, d3
 800df4a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800df4e:	ee36 5b45 	vsub.f64	d5, d6, d5
 800df52:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800df56:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800df5e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800df62:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df66:	ed8d 7b00 	vstr	d7, [sp]
 800df6a:	9901      	ldr	r1, [sp, #4]
 800df6c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800df70:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800df74:	da1e      	bge.n	800dfb4 <__ieee754_pow+0x624>
 800df76:	eeb0 0b47 	vmov.f64	d0, d7
 800df7a:	f000 f931 	bl	800e1e0 <scalbn>
 800df7e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800df82:	e56e      	b.n	800da62 <__ieee754_pow+0xd2>
 800df84:	4b43      	ldr	r3, [pc, #268]	; (800e094 <__ieee754_pow+0x704>)
 800df86:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800df8a:	4298      	cmp	r0, r3
 800df8c:	f77f af7c 	ble.w	800de88 <__ieee754_pow+0x4f8>
 800df90:	4b41      	ldr	r3, [pc, #260]	; (800e098 <__ieee754_pow+0x708>)
 800df92:	440b      	add	r3, r1
 800df94:	4313      	orrs	r3, r2
 800df96:	d002      	beq.n	800df9e <__ieee754_pow+0x60e>
 800df98:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800e070 <__ieee754_pow+0x6e0>
 800df9c:	e660      	b.n	800dc60 <__ieee754_pow+0x2d0>
 800df9e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800dfa2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfaa:	f6ff af6d 	blt.w	800de88 <__ieee754_pow+0x4f8>
 800dfae:	e7f3      	b.n	800df98 <__ieee754_pow+0x608>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	e78d      	b.n	800ded0 <__ieee754_pow+0x540>
 800dfb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	ec43 2b10 	vmov	d0, r2, r3
 800dfbe:	e7de      	b.n	800df7e <__ieee754_pow+0x5ee>
 800dfc0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dfc4:	e54d      	b.n	800da62 <__ieee754_pow+0xd2>
 800dfc6:	e9cd 6700 	strd	r6, r7, [sp]
 800dfca:	e574      	b.n	800dab6 <__ieee754_pow+0x126>
 800dfcc:	ed8d 8b00 	vstr	d8, [sp]
 800dfd0:	e571      	b.n	800dab6 <__ieee754_pow+0x126>
 800dfd2:	4615      	mov	r5, r2
 800dfd4:	e557      	b.n	800da86 <__ieee754_pow+0xf6>
 800dfd6:	bf00      	nop
 800dfd8:	00000000 	.word	0x00000000
 800dfdc:	43400000 	.word	0x43400000
 800dfe0:	4a454eef 	.word	0x4a454eef
 800dfe4:	3fca7e28 	.word	0x3fca7e28
 800dfe8:	93c9db65 	.word	0x93c9db65
 800dfec:	3fcd864a 	.word	0x3fcd864a
 800dff0:	a91d4101 	.word	0xa91d4101
 800dff4:	3fd17460 	.word	0x3fd17460
 800dff8:	518f264d 	.word	0x518f264d
 800dffc:	3fd55555 	.word	0x3fd55555
 800e000:	db6fabff 	.word	0xdb6fabff
 800e004:	3fdb6db6 	.word	0x3fdb6db6
 800e008:	33333303 	.word	0x33333303
 800e00c:	3fe33333 	.word	0x3fe33333
 800e010:	dc3a03fd 	.word	0xdc3a03fd
 800e014:	3feec709 	.word	0x3feec709
 800e018:	145b01f5 	.word	0x145b01f5
 800e01c:	be3e2fe0 	.word	0xbe3e2fe0
 800e020:	e0000000 	.word	0xe0000000
 800e024:	3feec709 	.word	0x3feec709
 800e028:	652b82fe 	.word	0x652b82fe
 800e02c:	3c971547 	.word	0x3c971547
 800e030:	fefa39ef 	.word	0xfefa39ef
 800e034:	3fe62e42 	.word	0x3fe62e42
 800e038:	0ca86c39 	.word	0x0ca86c39
 800e03c:	be205c61 	.word	0xbe205c61
 800e040:	00000000 	.word	0x00000000
 800e044:	3fe62e43 	.word	0x3fe62e43
 800e048:	72bea4d0 	.word	0x72bea4d0
 800e04c:	3e663769 	.word	0x3e663769
 800e050:	c5d26bf1 	.word	0xc5d26bf1
 800e054:	bebbbd41 	.word	0xbebbbd41
 800e058:	af25de2c 	.word	0xaf25de2c
 800e05c:	3f11566a 	.word	0x3f11566a
 800e060:	16bebd93 	.word	0x16bebd93
 800e064:	bf66c16c 	.word	0xbf66c16c
 800e068:	5555553e 	.word	0x5555553e
 800e06c:	3fc55555 	.word	0x3fc55555
 800e070:	c2f8f359 	.word	0xc2f8f359
 800e074:	01a56e1f 	.word	0x01a56e1f
 800e078:	0003988e 	.word	0x0003988e
 800e07c:	000bb679 	.word	0x000bb679
 800e080:	0800e840 	.word	0x0800e840
 800e084:	0800e860 	.word	0x0800e860
 800e088:	0800e850 	.word	0x0800e850
 800e08c:	3fe00000 	.word	0x3fe00000
 800e090:	000fffff 	.word	0x000fffff
 800e094:	4090cbff 	.word	0x4090cbff
 800e098:	3f6f3400 	.word	0x3f6f3400

0800e09c <__ieee754_sqrt>:
 800e09c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e0a0:	4770      	bx	lr

0800e0a2 <finite>:
 800e0a2:	ee10 3a90 	vmov	r3, s1
 800e0a6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e0aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e0ae:	0fc0      	lsrs	r0, r0, #31
 800e0b0:	4770      	bx	lr

0800e0b2 <matherr>:
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	4770      	bx	lr
	...

0800e0b8 <nan>:
 800e0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e0c0 <nan+0x8>
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	00000000 	.word	0x00000000
 800e0c4:	7ff80000 	.word	0x7ff80000

0800e0c8 <rint>:
 800e0c8:	b530      	push	{r4, r5, lr}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	ed8d 0b00 	vstr	d0, [sp]
 800e0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0d4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800e0d8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800e0dc:	2813      	cmp	r0, #19
 800e0de:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800e0e2:	dc5a      	bgt.n	800e19a <rint+0xd2>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	da2f      	bge.n	800e148 <rint+0x80>
 800e0e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e0ec:	4311      	orrs	r1, r2
 800e0ee:	d027      	beq.n	800e140 <rint+0x78>
 800e0f0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800e0f4:	4315      	orrs	r5, r2
 800e0f6:	426a      	negs	r2, r5
 800e0f8:	432a      	orrs	r2, r5
 800e0fa:	0b12      	lsrs	r2, r2, #12
 800e0fc:	0c5b      	lsrs	r3, r3, #17
 800e0fe:	045b      	lsls	r3, r3, #17
 800e100:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800e104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e108:	ea42 0103 	orr.w	r1, r2, r3
 800e10c:	4b31      	ldr	r3, [pc, #196]	; (800e1d4 <rint+0x10c>)
 800e10e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e112:	ed93 6b00 	vldr	d6, [r3]
 800e116:	ec41 0b17 	vmov	d7, r0, r1
 800e11a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e11e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e122:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e126:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e12a:	ed8d 7b00 	vstr	d7, [sp]
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e138:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800e13c:	e9cd 0100 	strd	r0, r1, [sp]
 800e140:	ed9d 0b00 	vldr	d0, [sp]
 800e144:	b005      	add	sp, #20
 800e146:	bd30      	pop	{r4, r5, pc}
 800e148:	4923      	ldr	r1, [pc, #140]	; (800e1d8 <rint+0x110>)
 800e14a:	4101      	asrs	r1, r0
 800e14c:	ea03 0501 	and.w	r5, r3, r1
 800e150:	4315      	orrs	r5, r2
 800e152:	d0f5      	beq.n	800e140 <rint+0x78>
 800e154:	0849      	lsrs	r1, r1, #1
 800e156:	ea03 0501 	and.w	r5, r3, r1
 800e15a:	432a      	orrs	r2, r5
 800e15c:	d00b      	beq.n	800e176 <rint+0xae>
 800e15e:	ea23 0101 	bic.w	r1, r3, r1
 800e162:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e166:	2813      	cmp	r0, #19
 800e168:	fa43 f300 	asr.w	r3, r3, r0
 800e16c:	bf0c      	ite	eq
 800e16e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800e172:	2200      	movne	r2, #0
 800e174:	430b      	orrs	r3, r1
 800e176:	4619      	mov	r1, r3
 800e178:	4b16      	ldr	r3, [pc, #88]	; (800e1d4 <rint+0x10c>)
 800e17a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e17e:	ed94 6b00 	vldr	d6, [r4]
 800e182:	4610      	mov	r0, r2
 800e184:	ec41 0b17 	vmov	d7, r0, r1
 800e188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e18c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e190:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e194:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e198:	e008      	b.n	800e1ac <rint+0xe4>
 800e19a:	2833      	cmp	r0, #51	; 0x33
 800e19c:	dd09      	ble.n	800e1b2 <rint+0xea>
 800e19e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e1a2:	d1cd      	bne.n	800e140 <rint+0x78>
 800e1a4:	ed9d 7b00 	vldr	d7, [sp]
 800e1a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e1ac:	ed8d 7b00 	vstr	d7, [sp]
 800e1b0:	e7c6      	b.n	800e140 <rint+0x78>
 800e1b2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800e1b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e1ba:	40c1      	lsrs	r1, r0
 800e1bc:	420a      	tst	r2, r1
 800e1be:	d0bf      	beq.n	800e140 <rint+0x78>
 800e1c0:	0849      	lsrs	r1, r1, #1
 800e1c2:	420a      	tst	r2, r1
 800e1c4:	bf1f      	itttt	ne
 800e1c6:	ea22 0101 	bicne.w	r1, r2, r1
 800e1ca:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800e1ce:	4102      	asrne	r2, r0
 800e1d0:	430a      	orrne	r2, r1
 800e1d2:	e7d0      	b.n	800e176 <rint+0xae>
 800e1d4:	0800e870 	.word	0x0800e870
 800e1d8:	000fffff 	.word	0x000fffff
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <scalbn>:
 800e1e0:	b500      	push	{lr}
 800e1e2:	ed2d 8b02 	vpush	{d8}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	ed8d 0b00 	vstr	d0, [sp]
 800e1ec:	9b01      	ldr	r3, [sp, #4]
 800e1ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e1f2:	b9a2      	cbnz	r2, 800e21e <scalbn+0x3e>
 800e1f4:	9a00      	ldr	r2, [sp, #0]
 800e1f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	d03a      	beq.n	800e274 <scalbn+0x94>
 800e1fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e2b8 <scalbn+0xd8>
 800e202:	4b35      	ldr	r3, [pc, #212]	; (800e2d8 <scalbn+0xf8>)
 800e204:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e208:	4298      	cmp	r0, r3
 800e20a:	ed8d 7b00 	vstr	d7, [sp]
 800e20e:	da11      	bge.n	800e234 <scalbn+0x54>
 800e210:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e2c0 <scalbn+0xe0>
 800e214:	ed9d 6b00 	vldr	d6, [sp]
 800e218:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e21c:	e007      	b.n	800e22e <scalbn+0x4e>
 800e21e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e222:	428a      	cmp	r2, r1
 800e224:	d10a      	bne.n	800e23c <scalbn+0x5c>
 800e226:	ed9d 7b00 	vldr	d7, [sp]
 800e22a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e22e:	ed8d 7b00 	vstr	d7, [sp]
 800e232:	e01f      	b.n	800e274 <scalbn+0x94>
 800e234:	9b01      	ldr	r3, [sp, #4]
 800e236:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e23a:	3a36      	subs	r2, #54	; 0x36
 800e23c:	4402      	add	r2, r0
 800e23e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e242:	428a      	cmp	r2, r1
 800e244:	dd0a      	ble.n	800e25c <scalbn+0x7c>
 800e246:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800e2c8 <scalbn+0xe8>
 800e24a:	eeb0 0b48 	vmov.f64	d0, d8
 800e24e:	ed9d 1b00 	vldr	d1, [sp]
 800e252:	f000 f843 	bl	800e2dc <copysign>
 800e256:	ee20 7b08 	vmul.f64	d7, d0, d8
 800e25a:	e7e8      	b.n	800e22e <scalbn+0x4e>
 800e25c:	2a00      	cmp	r2, #0
 800e25e:	dd10      	ble.n	800e282 <scalbn+0xa2>
 800e260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e264:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e268:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e26c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e270:	e9cd 0100 	strd	r0, r1, [sp]
 800e274:	ed9d 0b00 	vldr	d0, [sp]
 800e278:	b003      	add	sp, #12
 800e27a:	ecbd 8b02 	vpop	{d8}
 800e27e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e282:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e286:	da06      	bge.n	800e296 <scalbn+0xb6>
 800e288:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e28c:	4298      	cmp	r0, r3
 800e28e:	dcda      	bgt.n	800e246 <scalbn+0x66>
 800e290:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800e2c0 <scalbn+0xe0>
 800e294:	e7d9      	b.n	800e24a <scalbn+0x6a>
 800e296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e29a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e29e:	3236      	adds	r2, #54	; 0x36
 800e2a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2a4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e2a8:	ec41 0b17 	vmov	d7, r0, r1
 800e2ac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800e2d0 <scalbn+0xf0>
 800e2b0:	e7b2      	b.n	800e218 <scalbn+0x38>
 800e2b2:	bf00      	nop
 800e2b4:	f3af 8000 	nop.w
 800e2b8:	00000000 	.word	0x00000000
 800e2bc:	43500000 	.word	0x43500000
 800e2c0:	c2f8f359 	.word	0xc2f8f359
 800e2c4:	01a56e1f 	.word	0x01a56e1f
 800e2c8:	8800759c 	.word	0x8800759c
 800e2cc:	7e37e43c 	.word	0x7e37e43c
 800e2d0:	00000000 	.word	0x00000000
 800e2d4:	3c900000 	.word	0x3c900000
 800e2d8:	ffff3cb0 	.word	0xffff3cb0

0800e2dc <copysign>:
 800e2dc:	ec51 0b10 	vmov	r0, r1, d0
 800e2e0:	ee11 0a90 	vmov	r0, s3
 800e2e4:	ee10 2a10 	vmov	r2, s0
 800e2e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e2ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e2f0:	ea41 0300 	orr.w	r3, r1, r0
 800e2f4:	ec43 2b10 	vmov	d0, r2, r3
 800e2f8:	4770      	bx	lr
	...

0800e2fc <_init>:
 800e2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2fe:	bf00      	nop
 800e300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e302:	bc08      	pop	{r3}
 800e304:	469e      	mov	lr, r3
 800e306:	4770      	bx	lr

0800e308 <_fini>:
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30a:	bf00      	nop
 800e30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e30e:	bc08      	pop	{r3}
 800e310:	469e      	mov	lr, r3
 800e312:	4770      	bx	lr
